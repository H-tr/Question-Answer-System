,name,text
0,Transformer.pdf,"7
1
0
2
c
e
D
6

]
L
C
.
s
c
[

5
v
2
6
7
3
0
.
6
0
7
1
:
v
i
X
r
a

Attention Is All You Need

Ashish Vaswani∗
Google Brain
avaswani@google.com

Noam Shazeer∗
Google Brain
noam@google.com

Niki Parmar∗
Google Research
nikip@google.com

Jakob Uszkoreit∗
Google Research
usz@google.com

Llion Jones∗
Google Research
llion@google.com

Aidan N. Gomez∗ †
University of Toronto
aidan@cs.toronto.edu

Łukasz Kaiser∗
Google Brain
lukaszkaiser@google.com

Illia Polosukhin∗ ‡
illia.polosukhin@gmail.com

Abstract

The dominant sequence transduction models are based on complex recurrent or
convolutional neural networks that include an encoder and a decoder. The best
performing models also connect the encoder and decoder through an attention
mechanism. We propose a new simple network architecture, the Transformer,
based solely on attention mechanisms, dispensing with recurrence and convolutions
entirely. Experiments on two machine translation tasks show these models to
be superior in quality while being more parallelizable and requiring signiﬁcantly
less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-
to-German translation task, improving over the existing best results, including
ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,
our model establishes a new single-model state-of-the-art BLEU score of 41.8 after
training for 3.5 days on eight GPUs, a small fraction of the training costs of the
best models from the literature. We show that the Transformer generalizes well to
other tasks by applying it successfully to English constituency parsing both with
large and limited training data.

1

Introduction

Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks
in particular, have been ﬁrmly established as state of the art approaches in sequence modeling and

∗Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started
the effort to evaluate this idea. Ashish, with Illia, designed and implemented the ﬁrst Transformer models and
has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head
attention and the parameter-free position representation and became the other person involved in nearly every
detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and
tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and
efﬁcient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and
implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating
our research.

†Work performed while at Google Brain.
‡Work performed while at Google Research.

31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.

 
 
 
 
 
 
transduction problems such as language modeling and machine translation [35, 2, 5]. Numerous
efforts have since continued to push the boundaries of recurrent language models and encoder-decoder
architectures [38, 24, 15].

Recurrent models typically factor computation along the symbol positions of the input and output
sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden
states ht, as a function of the previous hidden state ht−1 and the input for position t. This inherently
sequential nature precludes parallelization within training examples, which becomes critical at longer
sequence lengths, as memory constraints limit batching across examples. Recent work has achieved
signiﬁcant improvements in computational efﬁciency through factorization tricks [21] and conditional
computation [32], while also improving model performance in case of the latter. The fundamental
constraint of sequential computation, however, remains.

Attention mechanisms have become an integral part of compelling sequence modeling and transduc-
tion models in various tasks, allowing modeling of dependencies without regard to their distance in
the input or output sequences [2, 19]. In all but a few cases [27], however, such attention mechanisms
are used in conjunction with a recurrent network.

In this work we propose the Transformer, a model architecture eschewing recurrence and instead
relying entirely on an attention mechanism to draw global dependencies between input and output.
The Transformer allows for signiﬁcantly more parallelization and can reach a new state of the art in
translation quality after being trained for as little as twelve hours on eight P100 GPUs.

2 Background

The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU
[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building
block, computing hidden representations in parallel for all input and output positions. In these models,
the number of operations required to relate signals from two arbitrary input or output positions grows
in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes
it more difﬁcult to learn dependencies between distant positions [12]. In the Transformer this is
reduced to a constant number of operations, albeit at the cost of reduced effective resolution due
to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as
described in section 3.2.

Self-attention, sometimes called intra-attention is an attention mechanism relating different positions
of a single sequence in order to compute a representation of the sequence. Self-attention has been
used successfully in a variety of tasks including reading comprehension, abstractive summarization,
textual entailment and learning task-independent sentence representations [4, 27, 28, 22].

End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-
aligned recurrence and have been shown to perform well on simple-language question answering and
language modeling tasks [34].

To the best of our knowledge, however, the Transformer is the ﬁrst transduction model relying
entirely on self-attention to compute representations of its input and output without using sequence-
aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate
self-attention and discuss its advantages over models such as [17, 18] and [9].

3 Model Architecture

Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35].
Here, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence
of continuous representations z = (z1, ..., zn). Given z, the decoder then generates an output
sequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive
[10], consuming the previously generated symbols as additional input when generating the next.

The Transformer follows this overall architecture using stacked self-attention and point-wise, fully
connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,
respectively.

2

Figure 1: The Transformer - model architecture.

3.1 Encoder and Decoder Stacks

Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two
sub-layers. The ﬁrst is a multi-head self-attention mechanism, and the second is a simple, position-
wise fully connected feed-forward network. We employ a residual connection [11] around each of
the two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is
LayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer
itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding
layers, produce outputs of dimension dmodel = 512.

Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two
sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head
attention over the output of the encoder stack. Similar to the encoder, we employ residual connections
around each of the sub-layers, followed by layer normalization. We also modify the self-attention
sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This
masking, combined with fact that the output embeddings are offset by one position, ensures that the
predictions for position i can depend only on the known outputs at positions less than i.

3.2 Attention

An attention function can be described as mapping a query and a set of key-value pairs to an output,
where the query, keys, values, and output are all vectors. The output is computed as a weighted sum
of the values, where the weight assigned to each value is computed by a compatibility function of the
query with the corresponding key.

3

Scaled Dot-Product Attention

Multi-Head Attention

Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several
attention layers running in parallel.

3.2.1 Scaled Dot-Product Attention

We call our particular attention ""Scaled Dot-Product Attention"" (Figure 2). The input consists of
queries and keys of dimension dk, and values of dimension dv. We compute the dot products of the
dk, and apply a softmax function to obtain the weights on the
query with all keys, divide each by
values.

√

In practice, we compute the attention function on a set of queries simultaneously, packed together
into a matrix Q. The keys and values are also packed together into matrices K and V . We compute
the matrix of outputs as:

Attention(Q, K, V ) = softmax(

QK T
√
dk

)V

(1)

1√

The two most commonly used attention functions are additive attention [2], and dot-product (multi-
plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor
of
. Additive attention computes the compatibility function using a feed-forward network with
a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is
much faster and more space-efﬁcient in practice, since it can be implemented using highly optimized
matrix multiplication code.

dk

While for small values of dk the two mechanisms perform similarly, additive attention outperforms
dot product attention without scaling for larger values of dk [3]. We suspect that for large values of
dk, the dot products grow large in magnitude, pushing the softmax function into regions where it has
extremely small gradients 4. To counteract this effect, we scale the dot products by 1√
dk

.

3.2.2 Multi-Head Attention

Instead of performing a single attention function with dmodel-dimensional keys, values and queries,
we found it beneﬁcial to linearly project the queries, keys and values h times with different, learned
linear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of
queries, keys and values we then perform the attention function in parallel, yielding dv-dimensional
output values. These are concatenated and once again projected, resulting in the ﬁnal values, as
depicted in Figure 2.

4To illustrate why the dot products get large, assume that the components of q and k are independent random
i=1 qiki, has mean 0 and variance dk.

variables with mean 0 and variance 1. Then their dot product, q · k = (cid:80)dk

4

Multi-head attention allows the model to jointly attend to information from different representation
subspaces at different positions. With a single attention head, averaging inhibits this.

MultiHead(Q, K, V ) = Concat(head1, ..., headh)W O

where headi = Attention(QW Q

i , KW K
i

, V W V

i )

Where the projections are parameter matrices W Q
and W O ∈ Rhdv×dmodel.

i ∈ Rdmodel×dk , W K

i ∈ Rdmodel×dk , W V

i ∈ Rdmodel×dv

In this work we employ h = 8 parallel attention layers, or heads. For each of these we use
dk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost
is similar to that of single-head attention with full dimensionality.

3.2.3 Applications of Attention in our Model

The Transformer uses multi-head attention in three different ways:

• In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,
and the memory keys and values come from the output of the encoder. This allows every
position in the decoder to attend over all positions in the input sequence. This mimics the
typical encoder-decoder attention mechanisms in sequence-to-sequence models such as
[38, 2, 9].

• The encoder contains self-attention layers. In a self-attention layer all of the keys, values
and queries come from the same place, in this case, the output of the previous layer in the
encoder. Each position in the encoder can attend to all positions in the previous layer of the
encoder.

• Similarly, self-attention layers in the decoder allow each position in the decoder to attend to
all positions in the decoder up to and including that position. We need to prevent leftward
information ﬂow in the decoder to preserve the auto-regressive property. We implement this
inside of scaled dot-product attention by masking out (setting to −∞) all values in the input
of the softmax which correspond to illegal connections. See Figure 2.

3.3 Position-wise Feed-Forward Networks

In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully
connected feed-forward network, which is applied to each position separately and identically. This
consists of two linear transformations with a ReLU activation in between.

FFN(x) = max(0, xW1 + b1)W2 + b2

(2)

While the linear transformations are the same across different positions, they use different parameters
from layer to layer. Another way of describing this is as two convolutions with kernel size 1.
The dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality
df f = 2048.

3.4 Embeddings and Softmax

Similarly to other sequence transduction models, we use learned embeddings to convert the input
tokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-
mation and softmax function to convert the decoder output to predicted next-token probabilities. In
our model, we share the same weight matrix between the two embedding layers and the pre-softmax
dmodel.
linear transformation, similar to [30]. In the embedding layers, we multiply those weights by

√

3.5 Positional Encoding

Since our model contains no recurrence and no convolution, in order for the model to make use of the
order of the sequence, we must inject some information about the relative or absolute position of the

5

Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations
for different layer types. n is the sequence length, d is the representation dimension, k is the kernel
size of convolutions and r the size of the neighborhood in restricted self-attention.

Layer Type

Complexity per Layer

Self-Attention
Recurrent
Convolutional
Self-Attention (restricted)

O(n2 · d)
O(n · d2)
O(k · n · d2)
O(r · n · d)

Sequential Maximum Path Length
Operations
O(1)
O(n)
O(1)
O(1)

O(1)
O(n)
O(logk(n))
O(n/r)

tokens in the sequence. To this end, we add ""positional encodings"" to the input embeddings at the
bottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel
as the embeddings, so that the two can be summed. There are many choices of positional encodings,
learned and ﬁxed [9].

In this work, we use sine and cosine functions of different frequencies:

P E(pos,2i) = sin(pos/100002i/dmodel)
P E(pos,2i+1) = cos(pos/100002i/dmodel)

where pos is the position and i is the dimension. That is, each dimension of the positional encoding
corresponds to a sinusoid. The wavelengths form a geometric progression from 2π to 10000 · 2π. We
chose this function because we hypothesized it would allow the model to easily learn to attend by
relative positions, since for any ﬁxed offset k, P Epos+k can be represented as a linear function of
P Epos.

We also experimented with using learned positional embeddings [9] instead, and found that the two
versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version
because it may allow the model to extrapolate to sequence lengths longer than the ones encountered
during training.

4 Why Self-Attention

In this section we compare various aspects of self-attention layers to the recurrent and convolu-
tional layers commonly used for mapping one variable-length sequence of symbol representations
(x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi ∈ Rd, such as a hidden
layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we
consider three desiderata.

One is the total computational complexity per layer. Another is the amount of computation that can
be parallelized, as measured by the minimum number of sequential operations required.

The third is the path length between long-range dependencies in the network. Learning long-range
dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the
ability to learn such dependencies is the length of the paths forward and backward signals have to
traverse in the network. The shorter these paths between any combination of positions in the input
and output sequences, the easier it is to learn long-range dependencies [12]. Hence we also compare
the maximum path length between any two input and output positions in networks composed of the
different layer types.

As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially
executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of
computational complexity, self-attention layers are faster than recurrent layers when the sequence
length n is smaller than the representation dimensionality d, which is most often the case with
sentence representations used by state-of-the-art models in machine translations, such as word-piece
[38] and byte-pair [31] representations. To improve computational performance for tasks involving
very long sequences, self-attention could be restricted to considering only a neighborhood of size r in

6

the input sequence centered around the respective output position. This would increase the maximum
path length to O(n/r). We plan to investigate this approach further in future work.

A single convolutional layer with kernel width k < n does not connect all pairs of input and output
positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels,
or O(logk(n)) in the case of dilated convolutions [18], increasing the length of the longest paths
between any two positions in the network. Convolutional layers are generally more expensive than
recurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexity
considerably, to O(k · n · d + n · d2). Even with k = n, however, the complexity of a separable
convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,
the approach we take in our model.

As side beneﬁt, self-attention could yield more interpretable models. We inspect attention distributions
from our models and present and discuss examples in the appendix. Not only do individual attention
heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic
and semantic structure of the sentences.

5 Training

This section describes the training regime for our models.

5.1 Training Data and Batching

We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million
sentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-
target vocabulary of about 37000 tokens. For English-French, we used the signiﬁcantly larger WMT
2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece
vocabulary [38]. Sentence pairs were batched together by approximate sequence length. Each training
batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000
target tokens.

5.2 Hardware and Schedule

We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using
the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We
trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the
bottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps
(3.5 days).

5.3 Optimizer

We used the Adam optimizer [20] with β1 = 0.9, β2 = 0.98 and (cid:15) = 10−9. We varied the learning
rate over the course of training, according to the formula:

lrate = d−0.5

model · min(step_num−0.5, step_num · warmup_steps−1.5)

(3)

This corresponds to increasing the learning rate linearly for the ﬁrst warmup_steps training steps,
and decreasing it thereafter proportionally to the inverse square root of the step number. We used
warmup_steps = 4000.

5.4 Regularization

We employ three types of regularization during training:

Residual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the
sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the
positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of
Pdrop = 0.1.

7

Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the
English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.

Model

ByteNet [18]
Deep-Att + PosUnk [39]
GNMT + RL [38]
ConvS2S [9]
MoE [32]
Deep-Att + PosUnk Ensemble [39]
GNMT + RL Ensemble [38]
ConvS2S Ensemble [9]
Transformer (base model)
Transformer (big)

BLEU

Training Cost (FLOPs)

EN-DE EN-FR
23.75

24.6
25.16
26.03

26.30
26.36
27.3
28.4

39.2
39.92
40.46
40.56
40.4
41.16
41.29
38.1
41.8

EN-DE

EN-FR

2.3 · 1019
9.6 · 1018
2.0 · 1019

1.8 · 1020
7.7 · 1019

1.0 · 1020
1.4 · 1020
1.5 · 1020
1.2 · 1020
8.0 · 1020
1.1 · 1021
1.2 · 1021

3.3 · 1018
2.3 · 1019

Label Smoothing During training, we employed label smoothing of value (cid:15)ls = 0.1 [36]. This
hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.

6 Results

6.1 Machine Translation

On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)
in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0
BLEU, establishing a new state-of-the-art BLEU score of 28.4. The conﬁguration of this model is
listed in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model
surpasses all previously published models and ensembles, at a fraction of the training cost of any of
the competitive models.

On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,
outperforming all of the previously published single models, at less than 1/4 the training cost of the
previous state-of-the-art model. The Transformer (big) model trained for English-to-French used
dropout rate Pdrop = 0.1, instead of 0.3.

For the base models, we used a single model obtained by averaging the last 5 checkpoints, which
were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We
used beam search with a beam size of 4 and length penalty α = 0.6 [38]. These hyperparameters
were chosen after experimentation on the development set. We set the maximum output length during
inference to input length + 50, but terminate early when possible [38].

Table 2 summarizes our results and compares our translation quality and training costs to other model
architectures from the literature. We estimate the number of ﬂoating point operations used to train a
model by multiplying the training time, the number of GPUs used, and an estimate of the sustained
single-precision ﬂoating-point capacity of each GPU 5.

6.2 Model Variations

To evaluate the importance of different components of the Transformer, we varied our base model
in different ways, measuring the change in performance on English-to-German translation on the
development set, newstest2013. We used beam search as described in the previous section, but no
checkpoint averaging. We present these results in Table 3.

In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,
keeping the amount of computation constant, as described in Section 3.2.2. While single-head
attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.

5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.

8

Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base
model. All metrics are on the English-to-German translation development set, newstest2013. Listed
perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to
per-word perplexities.

N dmodel

dff

base

6

512

2048

(cid:15)ls

0.1

dv

Pdrop

0.1

64
512
128
32
16

h

8
1
4
16
32

dk

64
512
128
32
16
16
32

2
4
8

256
1024

32
128

32
128

1024
4096

0.0
0.2

0.0
0.2

positional embedding instead of sinusoids

6

1024

4096

16

0.3

(A)

(B)

(C)

(D)

(E)
big

PPL
train
steps
(dev)
100K 4.92
5.29
5.00
4.91
5.01
5.16
5.01
6.11
5.19
4.88
5.75
4.66
5.12
4.75
5.77
4.95
4.67
5.47
4.92
300K 4.33

BLEU params
×106
(dev)
25.8
65
24.9
25.5
25.8
25.4
25.1
25.4
23.7
25.3
25.5
24.5
26.0
25.4
26.2
24.6
25.5
25.3
25.7
25.7
26.4

58
60
36
50
80
28
168
53
90

213

Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23
of WSJ)

Parser

Training

Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative
WSJ only, discriminative
WSJ only, discriminative
WSJ only, discriminative
WSJ only, discriminative
semi-supervised
semi-supervised
semi-supervised
semi-supervised
semi-supervised
multi-task
generative

Petrov et al. (2006) [29]
Zhu et al. (2013) [40]
Dyer et al. (2016) [8]
Transformer (4 layers)
Zhu et al. (2013) [40]
Huang & Harper (2009) [14]
McClosky et al. (2006) [26]
Vinyals & Kaiser el al. (2014) [37]
Transformer (4 layers)
Luong et al. (2015) [23]
Dyer et al. (2016) [8]

WSJ 23 F1
88.3
90.4
90.4
91.7
91.3
91.3
91.3
92.1
92.1
92.7
93.0
93.3

In Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This
suggests that determining compatibility is not easy and that a more sophisticated compatibility
function than dot product may be beneﬁcial. We further observe in rows (C) and (D) that, as expected,
bigger models are better, and dropout is very helpful in avoiding over-ﬁtting. In row (E) we replace our
sinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical
results to the base model.

6.3 English Constituency Parsing

To evaluate if the Transformer can generalize to other tasks we performed experiments on English
constituency parsing. This task presents speciﬁc challenges: the output is subject to strong structural

9

constraints and is signiﬁcantly longer than the input. Furthermore, RNN sequence-to-sequence
models have not been able to attain state-of-the-art results in small-data regimes [37].

We trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of the
Penn Treebank [25], about 40K training sentences. We also trained it in a semi-supervised setting,
using the larger high-conﬁdence and BerkleyParser corpora from with approximately 17M sentences
[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens
for the semi-supervised setting.

We performed only a small number of experiments to select the dropout, both attention and residual
(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters
remained unchanged from the English-to-German base translation model. During inference, we
increased the maximum output length to input length + 300. We used a beam size of 21 and α = 0.3
for both WSJ only and the semi-supervised setting.

Our results in Table 4 show that despite the lack of task-speciﬁc tuning our model performs sur-
prisingly well, yielding better results than all previously reported models with the exception of the
Recurrent Neural Network Grammar [8].

In contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-
Parser [29] even when training only on the WSJ training set of 40K sentences.

7 Conclusion

In this work, we presented the Transformer, the ﬁrst sequence transduction model based entirely on
attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with
multi-headed self-attention.

For translation tasks, the Transformer can be trained signiﬁcantly faster than architectures based
on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014
English-to-French translation tasks, we achieve a new state of the art. In the former task our best
model outperforms even all previously reported ensembles.

We are excited about the future of attention-based models and plan to apply them to other tasks. We
plan to extend the Transformer to problems involving input and output modalities other than text and
to investigate local, restricted attention mechanisms to efﬁciently handle large inputs and outputs
such as images, audio and video. Making generation less sequential is another research goals of ours.

The code we used to train and evaluate our models is available at https://github.com/
tensorflow/tensor2tensor.

Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful
comments, corrections and inspiration.

References

[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint

arXiv:1607.06450, 2016.

[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly

learning to align and translate. CoRR, abs/1409.0473, 2014.

[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural

machine translation architectures. CoRR, abs/1703.03906, 2017.

[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine

reading. arXiv preprint arXiv:1601.06733, 2016.

[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical
machine translation. CoRR, abs/1406.1078, 2014.

[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXiv

preprint arXiv:1610.02357, 2016.

10

[7] Junyoung Chung, Çaglar Gülçehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation
of gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.

[8] Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros, and Noah A. Smith. Recurrent neural

network grammars. In Proc. of NAACL, 2016.

[9] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-

tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2, 2017.

[10] Alex Graves. Generating sequences with recurrent neural networks.

arXiv preprint

arXiv:1308.0850, 2013.

[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-
age recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 770–778, 2016.

[12] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jürgen Schmidhuber. Gradient ﬂow in

recurrent nets: the difﬁculty of learning long-term dependencies, 2001.

[13] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation,

9(8):1735–1780, 1997.

[14] Zhongqiang Huang and Mary Harper. Self-training PCFG grammars with latent annotations
across languages. In Proceedings of the 2009 Conference on Empirical Methods in Natural
Language Processing, pages 832–841. ACL, August 2009.

[15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring

the limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.

[16] Łukasz Kaiser and Samy Bengio. Can active memory replace attention? In Advances in Neural

Information Processing Systems, (NIPS), 2016.

[17] Łukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference

on Learning Representations (ICLR), 2016.

[18] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-
ray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2,
2017.

[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.

In International Conference on Learning Representations, 2017.

[20] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.

[21] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprint

arXiv:1703.10722, 2017.

[22] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen
Zhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprint
arXiv:1703.03130, 2017.

[23] Minh-Thang Luong, Quoc V. Le, Ilya Sutskever, Oriol Vinyals, and Lukasz Kaiser. Multi-task

sequence to sequence learning. arXiv preprint arXiv:1511.06114, 2015.

[24] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-

based neural machine translation. arXiv preprint arXiv:1508.04025, 2015.

[25] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated
corpus of english: The penn treebank. Computational linguistics, 19(2):313–330, 1993.

[26] David McClosky, Eugene Charniak, and Mark Johnson. Effective self-training for parsing. In
Proceedings of the Human Language Technology Conference of the NAACL, Main Conference,
pages 152–159. ACL, June 2006.

11

[27] Ankur Parikh, Oscar Täckström, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention

model. In Empirical Methods in Natural Language Processing, 2016.

[28] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive

summarization. arXiv preprint arXiv:1705.04304, 2017.

[29] Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein. Learning accurate, compact,
and interpretable tree annotation. In Proceedings of the 21st International Conference on
Computational Linguistics and 44th Annual Meeting of the ACL, pages 433–440. ACL, July
2006.

[30] Oﬁr Press and Lior Wolf. Using the output embedding to improve language models. arXiv

preprint arXiv:1608.05859, 2016.

[31] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words

with subword units. arXiv preprint arXiv:1508.07909, 2015.

[32] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,
and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts
layer. arXiv preprint arXiv:1701.06538, 2017.

[33] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-
nov. Dropout: a simple way to prevent neural networks from overﬁtting. Journal of Machine
Learning Research, 15(1):1929–1958, 2014.

[34] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory
networks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,
Advances in Neural Information Processing Systems 28, pages 2440–2448. Curran Associates,
Inc., 2015.

[35] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural

networks. In Advances in Neural Information Processing Systems, pages 3104–3112, 2014.

[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.
Rethinking the inception architecture for computer vision. CoRR, abs/1512.00567, 2015.

[37] Vinyals & Kaiser, Koo, Petrov, Sutskever, and Hinton. Grammar as a foreign language. In

Advances in Neural Information Processing Systems, 2015.

[38] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang
Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine
translation system: Bridging the gap between human and machine translation. arXiv preprint
arXiv:1609.08144, 2016.

[39] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with
fast-forward connections for neural machine translation. CoRR, abs/1606.04199, 2016.

[40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate
shift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume
1: Long Papers), pages 434–443. ACL, August 2013.

12

Attention Visualizations

Figure 3: An example of the attention mechanism following long-distance dependencies in the
encoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of
the verb ‘making’, completing the phrase ‘making...more difﬁcult’. Attentions here shown only for
the word ‘making’. Different colors represent different heads. Best viewed in color.

13

Input-Input Layer5ItisinthisspiritthatamajorityofAmericangovernmentshavepassednewlawssince2009makingtheregistrationorvotingprocessmoredifficult.<EOS><pad><pad><pad><pad><pad><pad>ItisinthisspiritthatamajorityofAmericangovernmentshavepassednewlawssince2009makingtheregistrationorvotingprocessmoredifficult.<EOS><pad><pad><pad><pad><pad><pad>Figure 4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top:
Full attentions for head 5. Bottom: Isolated attentions from just the word ‘its’ for attention heads 5
and 6. Note that the attentions are very sharp for this word.

14

Input-Input Layer5TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>Input-Input Layer5TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>Figure 5: Many of the attention heads exhibit behaviour that seems related to the structure of the
sentence. We give two such examples above, from two different heads from the encoder self-attention
at layer 5 of 6. The heads clearly learned to perform different tasks.

15

Input-Input Layer5TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>Input-Input Layer5TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>TheLawwillneverbeperfect,butitsapplicationshouldbejust-thisiswhatwearemissing,inmyopinion.<EOS><pad>"
1,AlexNet.pdf,"ImageNet Classiﬁcation with Deep Convolutional
Neural Networks

Alex Krizhevsky
University of Toronto
kriz@cs.utoronto.ca

Ilya Sutskever
University of Toronto
ilya@cs.utoronto.ca

Geoffrey E. Hinton
University of Toronto
hinton@cs.utoronto.ca

Abstract

We trained a large, deep convolutional neural network to classify the 1.2 million
high-resolution images in the ImageNet LSVRC-2010 contest into the 1000 dif-
ferent classes. On the test data, we achieved top-1 and top-5 error rates of 37.5%
and 17.0% which is considerably better than the previous state-of-the-art. The
neural network, which has 60 million parameters and 650,000 neurons, consists
of ﬁve convolutional layers, some of which are followed by max-pooling layers,
and three fully-connected layers with a ﬁnal 1000-way softmax. To make train-
ing faster, we used non-saturating neurons and a very efﬁcient GPU implemen-
tation of the convolution operation. To reduce overﬁtting in the fully-connected
layers we employed a recently-developed regularization method called “dropout”
that proved to be very effective. We also entered a variant of this model in the
ILSVRC-2012 competition and achieved a winning top-5 test error rate of 15.3%,
compared to 26.2% achieved by the second-best entry.

1

Introduction

Current approaches to object recognition make essential use of machine learning methods. To im-
prove their performance, we can collect larger datasets, learn more powerful models, and use bet-
ter techniques for preventing overﬁtting. Until recently, datasets of labeled images were relatively
small — on the order of tens of thousands of images (e.g., NORB [16], Caltech-101/256 [8, 9], and
CIFAR-10/100 [12]). Simple recognition tasks can be solved quite well with datasets of this size,
especially if they are augmented with label-preserving transformations. For example, the current-
best error rate on the MNIST digit-recognition task (<0.3%) approaches human performance [4].
But objects in realistic settings exhibit considerable variability, so to learn to recognize them it is
necessary to use much larger training sets. And indeed, the shortcomings of small image datasets
have been widely recognized (e.g., Pinto et al. [21]), but it has only recently become possible to col-
lect labeled datasets with millions of images. The new larger datasets include LabelMe [23], which
consists of hundreds of thousands of fully-segmented images, and ImageNet [6], which consists of
over 15 million labeled high-resolution images in over 22,000 categories.

To learn about thousands of objects from millions of images, we need a model with a large learning
capacity. However, the immense complexity of the object recognition task means that this prob-
lem cannot be speciﬁed even by a dataset as large as ImageNet, so our model should also have lots
of prior knowledge to compensate for all the data we don’t have. Convolutional neural networks
(CNNs) constitute one such class of models [16, 11, 13, 18, 15, 22, 26]. Their capacity can be con-
trolled by varying their depth and breadth, and they also make strong and mostly correct assumptions
about the nature of images (namely, stationarity of statistics and locality of pixel dependencies).
Thus, compared to standard feedforward neural networks with similarly-sized layers, CNNs have
much fewer connections and parameters and so they are easier to train, while their theoretically-best
performance is likely to be only slightly worse.

1

Despite the attractive qualities of CNNs, and despite the relative efﬁciency of their local architecture,
they have still been prohibitively expensive to apply in large scale to high-resolution images. Luck-
ily, current GPUs, paired with a highly-optimized implementation of 2D convolution, are powerful
enough to facilitate the training of interestingly-large CNNs, and recent datasets such as ImageNet
contain enough labeled examples to train such models without severe overﬁtting.

The speciﬁc contributions of this paper are as follows: we trained one of the largest convolutional
neural networks to date on the subsets of ImageNet used in the ILSVRC-2010 and ILSVRC-2012
competitions [2] and achieved by far the best results ever reported on these datasets. We wrote a
highly-optimized GPU implementation of 2D convolution and all the other operations inherent in
training convolutional neural networks, which we make available publicly1. Our network contains
a number of new and unusual features which improve its performance and reduce its training time,
which are detailed in Section 3. The size of our network made overﬁtting a signiﬁcant problem, even
with 1.2 million labeled training examples, so we used several effective techniques for preventing
overﬁtting, which are described in Section 4. Our ﬁnal network contains ﬁve convolutional and
three fully-connected layers, and this depth seems to be important: we found that removing any
convolutional layer (each of which contains no more than 1% of the model’s parameters) resulted in
inferior performance.

In the end, the network’s size is limited mainly by the amount of memory available on current GPUs
and by the amount of training time that we are willing to tolerate. Our network takes between ﬁve
and six days to train on two GTX 580 3GB GPUs. All of our experiments suggest that our results
can be improved simply by waiting for faster GPUs and bigger datasets to become available.

2 The Dataset

ImageNet is a dataset of over 15 million labeled high-resolution images belonging to roughly 22,000
categories. The images were collected from the web and labeled by human labelers using Ama-
zon’s Mechanical Turk crowd-sourcing tool. Starting in 2010, as part of the Pascal Visual Object
Challenge, an annual competition called the ImageNet Large-Scale Visual Recognition Challenge
(ILSVRC) has been held. ILSVRC uses a subset of ImageNet with roughly 1000 images in each of
1000 categories. In all, there are roughly 1.2 million training images, 50,000 validation images, and
150,000 testing images.

ILSVRC-2010 is the only version of ILSVRC for which the test set labels are available, so this is
the version on which we performed most of our experiments. Since we also entered our model in
the ILSVRC-2012 competition, in Section 6 we report our results on this version of the dataset as
well, for which test set labels are unavailable. On ImageNet, it is customary to report two error rates:
top-1 and top-5, where the top-5 error rate is the fraction of test images for which the correct label
is not among the ﬁve labels considered most probable by the model.

ImageNet consists of variable-resolution images, while our system requires a constant input dimen-
sionality. Therefore, we down-sampled the images to a ﬁxed resolution of 256 × 256. Given a
rectangular image, we ﬁrst rescaled the image such that the shorter side was of length 256, and then
cropped out the central 256×256 patch from the resulting image. We did not pre-process the images
in any other way, except for subtracting the mean activity over the training set from each pixel. So
we trained our network on the (centered) raw RGB values of the pixels.

3 The Architecture

The architecture of our network is summarized in Figure 2.
It contains eight learned layers —
ﬁve convolutional and three fully-connected. Below, we describe some of the novel or unusual
features of our network’s architecture. Sections 3.1-3.4 are sorted according to our estimation of
their importance, with the most important ﬁrst.

1http://code.google.com/p/cuda-convnet/

2

3.1 ReLU Nonlinearity

The standard way to model a neuron’s output f as
a function of its input x is with f (x) = tanh(x)
or f (x) = (1 + e−x)−1.
In terms of training time
with gradient descent, these saturating nonlinearities
are much slower than the non-saturating nonlinearity
f (x) = max(0, x). Following Nair and Hinton [20],
we refer to neurons with this nonlinearity as Rectiﬁed
Linear Units (ReLUs). Deep convolutional neural net-
works with ReLUs train several times faster than their
equivalents with tanh units. This is demonstrated in
Figure 1, which shows the number of iterations re-
quired to reach 25% training error on the CIFAR-10
dataset for a particular four-layer convolutional net-
work. This plot shows that we would not have been
able to experiment with such large neural networks for
this work if we had used traditional saturating neuron
models.

We are not the ﬁrst to consider alternatives to tradi-
tional neuron models in CNNs. For example, Jarrett
et al. [11] claim that the nonlinearity f (x) = |tanh(x)|
works particularly well with their type of contrast nor-
malization followed by local average pooling on the
Caltech-101 dataset. However, on this dataset the pri-
mary concern is preventing overﬁtting, so the effect
they are observing is different from the accelerated
ability to ﬁt the training set which we report when us-
ing ReLUs. Faster learning has a great inﬂuence on the
performance of large models trained on large datasets.

3.2 Training on Multiple GPUs

Figure 1: A four-layer convolutional neural
network with ReLUs (solid line) reaches a 25%
training error rate on CIFAR-10 six times faster
than an equivalent network with tanh neurons
(dashed line). The learning rates for each net-
work were chosen independently to make train-
ing as fast as possible. No regularization of
any kind was employed. The magnitude of the
effect demonstrated here varies with network
architecture, but networks with ReLUs consis-
tently learn several times faster than equivalents
with saturating neurons.

A single GTX 580 GPU has only 3GB of memory, which limits the maximum size of the networks
that can be trained on it. It turns out that 1.2 million training examples are enough to train networks
which are too big to ﬁt on one GPU. Therefore we spread the net across two GPUs. Current GPUs
are particularly well-suited to cross-GPU parallelization, as they are able to read from and write to
one another’s memory directly, without going through host machine memory. The parallelization
scheme that we employ essentially puts half of the kernels (or neurons) on each GPU, with one
additional trick: the GPUs communicate only in certain layers. This means that, for example, the
kernels of layer 3 take input from all kernel maps in layer 2. However, kernels in layer 4 take input
only from those kernel maps in layer 3 which reside on the same GPU. Choosing the pattern of
connectivity is a problem for cross-validation, but this allows us to precisely tune the amount of
communication until it is an acceptable fraction of the amount of computation.

The resultant architecture is somewhat similar to that of the “columnar” CNN employed by Cire¸san
et al. [5], except that our columns are not independent (see Figure 2). This scheme reduces our top-1
and top-5 error rates by 1.7% and 1.2%, respectively, as compared with a net with half as many
kernels in each convolutional layer trained on one GPU. The two-GPU net takes slightly less time
to train than the one-GPU net2.

2The one-GPU net actually has the same number of kernels as the two-GPU net in the ﬁnal convolutional
layer. This is because most of the net’s parameters are in the ﬁrst fully-connected layer, which takes the last
convolutional layer as input. So to make the two nets have approximately the same number of parameters, we
did not halve the size of the ﬁnal convolutional layer (nor the fully-conneced layers which follow). Therefore
this comparison is biased in favor of the one-GPU net, since it is bigger than “half the size” of the two-GPU
net.

3

3.3 Local Response Normalization

ReLUs have the desirable property that they do not require input normalization to prevent them
from saturating. If at least some training examples produce a positive input to a ReLU, learning will
happen in that neuron. However, we still ﬁnd that the following local normalization scheme aids
generalization. Denoting by ai
x,y the activity of a neuron computed by applying kernel i at position
(x, y) and then applying the ReLU nonlinearity, the response-normalized activity bi
x,y is given by
the expression

x,y = ai
bi

x,y/

k + α



min(N −1,i+n/2)
(cid:88)

(aj

x,y)2




β

j=max(0,i−n/2)

where the sum runs over n “adjacent” kernel maps at the same spatial position, and N is the total
number of kernels in the layer. The ordering of the kernel maps is of course arbitrary and determined
before training begins. This sort of response normalization implements a form of lateral inhibition
inspired by the type found in real neurons, creating competition for big activities amongst neuron
outputs computed using different kernels. The constants k, n, α, and β are hyper-parameters whose
values are determined using a validation set; we used k = 2, n = 5, α = 10−4, and β = 0.75. We
applied this normalization after applying the ReLU nonlinearity in certain layers (see Section 3.5).

This scheme bears some resemblance to the local contrast normalization scheme of Jarrett et al. [11],
but ours would be more correctly termed “brightness normalization”, since we do not subtract the
mean activity. Response normalization reduces our top-1 and top-5 error rates by 1.4% and 1.2%,
respectively. We also veriﬁed the effectiveness of this scheme on the CIFAR-10 dataset: a four-layer
CNN achieved a 13% test error rate without normalization and 11% with normalization3.

3.4 Overlapping Pooling

Pooling layers in CNNs summarize the outputs of neighboring groups of neurons in the same kernel
map. Traditionally, the neighborhoods summarized by adjacent pooling units do not overlap (e.g.,
[17, 11, 4]). To be more precise, a pooling layer can be thought of as consisting of a grid of pooling
units spaced s pixels apart, each summarizing a neighborhood of size z × z centered at the location
of the pooling unit. If we set s = z, we obtain traditional local pooling as commonly employed
in CNNs. If we set s < z, we obtain overlapping pooling. This is what we use throughout our
network, with s = 2 and z = 3. This scheme reduces the top-1 and top-5 error rates by 0.4% and
0.3%, respectively, as compared with the non-overlapping scheme s = 2, z = 2, which produces
output of equivalent dimensions. We generally observe during training that models with overlapping
pooling ﬁnd it slightly more difﬁcult to overﬁt.

3.5 Overall Architecture

Now we are ready to describe the overall architecture of our CNN. As depicted in Figure 2, the net
contains eight layers with weights; the ﬁrst ﬁve are convolutional and the remaining three are fully-
connected. The output of the last fully-connected layer is fed to a 1000-way softmax which produces
a distribution over the 1000 class labels. Our network maximizes the multinomial logistic regression
objective, which is equivalent to maximizing the average across training cases of the log-probability
of the correct label under the prediction distribution.

The kernels of the second, fourth, and ﬁfth convolutional layers are connected only to those kernel
maps in the previous layer which reside on the same GPU (see Figure 2). The kernels of the third
convolutional layer are connected to all kernel maps in the second layer. The neurons in the fully-
connected layers are connected to all neurons in the previous layer. Response-normalization layers
follow the ﬁrst and second convolutional layers. Max-pooling layers, of the kind described in Section
3.4, follow both response-normalization layers as well as the ﬁfth convolutional layer. The ReLU
non-linearity is applied to the output of every convolutional and fully-connected layer.

The ﬁrst convolutional layer ﬁlters the 224 × 224 × 3 input image with 96 kernels of size 11 × 11 × 3
with a stride of 4 pixels (this is the distance between the receptive ﬁeld centers of neighboring

3We cannot describe this network in detail due to space constraints, but it is speciﬁed precisely by the code

and parameter ﬁles provided here: http://code.google.com/p/cuda-convnet/.

4

Figure 2: An illustration of the architecture of our CNN, explicitly showing the delineation of responsibilities
between the two GPUs. One GPU runs the layer-parts at the top of the ﬁgure while the other runs the layer-parts
at the bottom. The GPUs communicate only at certain layers. The network’s input is 150,528-dimensional, and
the number of neurons in the network’s remaining layers is given by 253,440–186,624–64,896–64,896–43,264–
4096–4096–1000.

neurons in a kernel map). The second convolutional layer takes as input the (response-normalized
and pooled) output of the ﬁrst convolutional layer and ﬁlters it with 256 kernels of size 5 × 5 × 48.
The third, fourth, and ﬁfth convolutional layers are connected to one another without any intervening
pooling or normalization layers. The third convolutional layer has 384 kernels of size 3 × 3 ×
256 connected to the (normalized, pooled) outputs of the second convolutional layer. The fourth
convolutional layer has 384 kernels of size 3 × 3 × 192 , and the ﬁfth convolutional layer has 256
kernels of size 3 × 3 × 192. The fully-connected layers have 4096 neurons each.

4 Reducing Overﬁtting

Our neural network architecture has 60 million parameters. Although the 1000 classes of ILSVRC
make each training example impose 10 bits of constraint on the mapping from image to label, this
turns out to be insufﬁcient to learn so many parameters without considerable overﬁtting. Below, we
describe the two primary ways in which we combat overﬁtting.

4.1 Data Augmentation

The easiest and most common method to reduce overﬁtting on image data is to artiﬁcially enlarge
the dataset using label-preserving transformations (e.g., [25, 4, 5]). We employ two distinct forms
of data augmentation, both of which allow transformed images to be produced from the original
images with very little computation, so the transformed images do not need to be stored on disk.
In our implementation, the transformed images are generated in Python code on the CPU while the
GPU is training on the previous batch of images. So these data augmentation schemes are, in effect,
computationally free.

The ﬁrst form of data augmentation consists of generating image translations and horizontal reﬂec-
tions. We do this by extracting random 224 × 224 patches (and their horizontal reﬂections) from the
256×256 images and training our network on these extracted patches4. This increases the size of our
training set by a factor of 2048, though the resulting training examples are, of course, highly inter-
dependent. Without this scheme, our network suffers from substantial overﬁtting, which would have
forced us to use much smaller networks. At test time, the network makes a prediction by extracting
ﬁve 224 × 224 patches (the four corner patches and the center patch) as well as their horizontal
reﬂections (hence ten patches in all), and averaging the predictions made by the network’s softmax
layer on the ten patches.

The second form of data augmentation consists of altering the intensities of the RGB channels in
training images. Speciﬁcally, we perform PCA on the set of RGB pixel values throughout the
ImageNet training set. To each training image, we add multiples of the found principal components,

4This is the reason why the input images in Figure 2 are 224 × 224 × 3-dimensional.

5

with magnitudes proportional to the corresponding eigenvalues times a random variable drawn from
a Gaussian with mean zero and standard deviation 0.1. Therefore to each RGB image pixel Ixy =
[I R

xy]T we add the following quantity:

xy, I G

xy, I B

[p1, p2, p3][α1λ1, α2λ2, α3λ3]T
where pi and λi are ith eigenvector and eigenvalue of the 3 × 3 covariance matrix of RGB pixel
values, respectively, and αi is the aforementioned random variable. Each αi is drawn only once
for all the pixels of a particular training image until that image is used for training again, at which
point it is re-drawn. This scheme approximately captures an important property of natural images,
namely, that object identity is invariant to changes in the intensity and color of the illumination. This
scheme reduces the top-1 error rate by over 1%.

4.2 Dropout

Combining the predictions of many different models is a very successful way to reduce test errors
[1, 3], but it appears to be too expensive for big neural networks that already take several days
to train. There is, however, a very efﬁcient version of model combination that only costs about a
factor of two during training. The recently-introduced technique, called “dropout” [10], consists
of setting to zero the output of each hidden neuron with probability 0.5. The neurons which are
“dropped out” in this way do not contribute to the forward pass and do not participate in back-
propagation. So every time an input is presented, the neural network samples a different architecture,
but all these architectures share weights. This technique reduces complex co-adaptations of neurons,
since a neuron cannot rely on the presence of particular other neurons. It is, therefore, forced to
learn more robust features that are useful in conjunction with many different random subsets of the
other neurons. At test time, we use all the neurons but multiply their outputs by 0.5, which is a
reasonable approximation to taking the geometric mean of the predictive distributions produced by
the exponentially-many dropout networks.

We use dropout in the ﬁrst two fully-connected layers of Figure 2. Without dropout, our network ex-
hibits substantial overﬁtting. Dropout roughly doubles the number of iterations required to converge.

5 Details of learning

We trained our models using stochastic gradient descent
with a batch size of 128 examples, momentum of 0.9, and
weight decay of 0.0005. We found that this small amount
of weight decay was important for the model to learn. In
other words, weight decay here is not merely a regularizer:
it reduces the model’s training error. The update rule for
weight w was

vi+1

:= 0.9 · vi − 0.0005 · (cid:15) · wi − (cid:15) ·

wi+1

:= wi + vi+1

(cid:29)

(cid:28) ∂L
∂w

(cid:12)
(cid:12)wi

Di

Figure 3: 96 convolutional kernels of size
11×11×3 learned by the ﬁrst convolutional
layer on the 224×224×3 input images. The
top 48 kernels were learned on GPU 1 while
the bottom 48 kernels were learned on GPU
2. See Section 6.1 for details.

where i is the iteration index, v is the momentum variable, (cid:15) is the learning rate, and

(cid:68) ∂L
∂w

(cid:12)
(cid:12)wi

(cid:69)

the average over the ith batch Di of the derivative of the objective with respect to w, evaluated at
wi.

is

Di

We initialized the weights in each layer from a zero-mean Gaussian distribution with standard de-
viation 0.01. We initialized the neuron biases in the second, fourth, and ﬁfth convolutional layers,
as well as in the fully-connected hidden layers, with the constant 1. This initialization accelerates
the early stages of learning by providing the ReLUs with positive inputs. We initialized the neuron
biases in the remaining layers with the constant 0.

We used an equal learning rate for all layers, which we adjusted manually throughout training.
The heuristic which we followed was to divide the learning rate by 10 when the validation error
rate stopped improving with the current learning rate. The learning rate was initialized at 0.01 and

6

reduced three times prior to termination. We trained the network for roughly 90 cycles through the
training set of 1.2 million images, which took ﬁve to six days on two NVIDIA GTX 580 3GB GPUs.

6 Results

Our results on ILSVRC-2010 are summarized in Table 1. Our network achieves top-1 and top-5
test set error rates of 37.5% and 17.0%5. The best performance achieved during the ILSVRC-
2010 competition was 47.1% and 28.2% with an approach that averages the predictions produced
from six sparse-coding models trained on different features [2], and since then the best pub-
lished results are 45.7% and 25.7% with an approach that averages the predictions of two classi-
ﬁers trained on Fisher Vectors (FVs) computed from two types of densely-sampled features [24].

Top-1
Top-5
47.1% 28.2%
45.7% 25.7%
37.5% 17.0%

Model
Sparse coding [2]
SIFT + FVs [24]
CNN

We also entered our model in the ILSVRC-2012 com-
petition and report our results in Table 2. Since the
ILSVRC-2012 test set labels are not publicly available,
we cannot report test error rates for all the models that
In the remainder of this paragraph, we use
we tried.
validation and test error rates interchangeably because
in our experience they do not differ by more than 0.1%
(see Table 2). The CNN described in this paper achieves
a top-5 error rate of 18.2%. Averaging the predictions
of ﬁve similar CNNs gives an error rate of 16.4%. Training one CNN, with an extra sixth con-
volutional layer over the last pooling layer, to classify the entire ImageNet Fall 2011 release
(15M images, 22K categories), and then “ﬁne-tuning” it on ILSVRC-2012 gives an error rate of
16.6%. Averaging the predictions of two CNNs that were pre-trained on the entire Fall 2011 re-
lease with the aforementioned ﬁve CNNs gives an error rate of 15.3%. The second-best con-
test entry achieved an error rate of 26.2% with an approach that averages the predictions of sev-
eral classiﬁers trained on FVs computed from different types of densely-sampled features [7].

Table 1: Comparison of results on ILSVRC-
In italics are best results
2010 test set.
achieved by others.

Model
SIFT + FVs [7]
1 CNN
5 CNNs
1 CNN*
7 CNNs*

Top-1 (val) Top-5 (val) Top-5 (test)
—
18.2%
16.4%
16.6%
15.4%

Finally, we also report our error
rates on the Fall 2009 version of
ImageNet with 10,184 categories
and 8.9 million images. On this
dataset we follow the convention
in the literature of using half of
the images for training and half
for testing. Since there is no es-
tablished test set, our split neces-
sarily differs from the splits used
by previous authors, but this does
not affect the results appreciably.
Our top-1 and top-5 error rates
on this dataset are 67.4% and
40.9%, attained by the net described above but with an additional, sixth convolutional layer over the
last pooling layer. The best published results on this dataset are 78.1% and 60.9% [19].

Table 2: Comparison of error rates on ILSVRC-2012 validation and
test sets. In italics are best results achieved by others. Models with an
asterisk* were “pre-trained” to classify the entire ImageNet 2011 Fall
release. See Section 6 for details.

26.2%
—
16.4%
—
15.3%

—
40.7%
38.1%
39.0%
36.7%

6.1 Qualitative Evaluations

Figure 3 shows the convolutional kernels learned by the network’s two data-connected layers. The
network has learned a variety of frequency- and orientation-selective kernels, as well as various col-
ored blobs. Notice the specialization exhibited by the two GPUs, a result of the restricted connec-
tivity described in Section 3.5. The kernels on GPU 1 are largely color-agnostic, while the kernels
on on GPU 2 are largely color-speciﬁc. This kind of specialization occurs during every run and is
independent of any particular random weight initialization (modulo a renumbering of the GPUs).

5The error rates without averaging predictions over ten patches as described in Section 4.1 are 39.0% and

18.3%.

7

Figure 4: (Left) Eight ILSVRC-2010 test images and the ﬁve labels considered most probable by our model.
The correct label is written under each image, and the probability assigned to the correct label is also shown
with a red bar (if it happens to be in the top 5). (Right) Five ILSVRC-2010 test images in the ﬁrst column. The
remaining columns show the six training images that produce feature vectors in the last hidden layer with the
smallest Euclidean distance from the feature vector for the test image.

In the left panel of Figure 4 we qualitatively assess what the network has learned by computing its
top-5 predictions on eight test images. Notice that even off-center objects, such as the mite in the
top-left, can be recognized by the net. Most of the top-5 labels appear reasonable. For example,
only other types of cat are considered plausible labels for the leopard. In some cases (grille, cherry)
there is genuine ambiguity about the intended focus of the photograph.

Another way to probe the network’s visual knowledge is to consider the feature activations induced
by an image at the last, 4096-dimensional hidden layer. If two images produce feature activation
vectors with a small Euclidean separation, we can say that the higher levels of the neural network
consider them to be similar. Figure 4 shows ﬁve images from the test set and the six images from
the training set that are most similar to each of them according to this measure. Notice that at the
pixel level, the retrieved training images are generally not close in L2 to the query images in the ﬁrst
column. For example, the retrieved dogs and elephants appear in a variety of poses. We present the
results for many more test images in the supplementary material.

Computing similarity by using Euclidean distance between two 4096-dimensional, real-valued vec-
tors is inefﬁcient, but it could be made efﬁcient by training an auto-encoder to compress these vectors
to short binary codes. This should produce a much better image retrieval method than applying auto-
encoders to the raw pixels [14], which does not make use of image labels and hence has a tendency
to retrieve images with similar patterns of edges, whether or not they are semantically similar.

7 Discussion

Our results show that a large, deep convolutional neural network is capable of achieving record-
breaking results on a highly challenging dataset using purely supervised learning.
It is notable
that our network’s performance degrades if a single convolutional layer is removed. For example,
removing any of the middle layers results in a loss of about 2% for the top-1 performance of the
network. So the depth really is important for achieving our results.

To simplify our experiments, we did not use any unsupervised pre-training even though we expect
that it will help, especially if we obtain enough computational power to signiﬁcantly increase the
size of the network without obtaining a corresponding increase in the amount of labeled data. Thus
far, our results have improved as we have made our network larger and trained it longer but we still
have many orders of magnitude to go in order to match the infero-temporal pathway of the human
visual system. Ultimately we would like to use very large and deep convolutional nets on video
sequences where the temporal structure provides very helpful information that is missing or far less
obvious in static images.

8

References

[1] R.M. Bell and Y. Koren. Lessons from the netﬂix prize challenge. ACM SIGKDD Explorations Newsletter,

9(2):75–79, 2007.

[2] A. Berg, J. Deng, and L. Fei-Fei.

Large scale visual recognition challenge 2010. www.image-

net.org/challenges. 2010.

[3] L. Breiman. Random forests. Machine learning, 45(1):5–32, 2001.
[4] D. Cire¸san, U. Meier, and J. Schmidhuber. Multi-column deep neural networks for image classiﬁcation.

Arxiv preprint arXiv:1202.2745, 2012.

[5] D.C. Cire¸san, U. Meier, J. Masci, L.M. Gambardella, and J. Schmidhuber. High-performance neural

networks for visual object classiﬁcation. Arxiv preprint arXiv:1102.0183, 2011.

[6] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.

ImageNet: A Large-Scale Hierarchical

Image Database. In CVPR09, 2009.

[7] J. Deng, A. Berg, S. Satheesh, H. Su, A. Khosla, and L. Fei-Fei.
http://www.image-net.org/challenges/LSVRC/2012/.

ILSVRC-2012, 2012. URL

[8] L. Fei-Fei, R. Fergus, and P. Perona. Learning generative visual models from few training examples: An
incremental bayesian approach tested on 101 object categories. Computer Vision and Image Understand-
ing, 106(1):59–70, 2007.

[9] G. Grifﬁn, A. Holub, and P. Perona. Caltech-256 object category dataset. Technical Report 7694, Cali-
fornia Institute of Technology, 2007. URL http://authors.library.caltech.edu/7694.

[10] G.E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and R.R. Salakhutdinov. Improving neural net-

works by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580, 2012.

[11] K. Jarrett, K. Kavukcuoglu, M. A. Ranzato, and Y. LeCun. What is the best multi-stage architecture for
object recognition? In International Conference on Computer Vision, pages 2146–2153. IEEE, 2009.
[12] A. Krizhevsky. Learning multiple layers of features from tiny images. Master’s thesis, Department of

Computer Science, University of Toronto, 2009.

[13] A. Krizhevsky. Convolutional deep belief networks on cifar-10. Unpublished manuscript, 2010.
[14] A. Krizhevsky and G.E. Hinton. Using very deep autoencoders for content-based image retrieval.

In

ESANN, 2011.

[15] Y. Le Cun, B. Boser, J.S. Denker, D. Henderson, R.E. Howard, W. Hubbard, L.D. Jackel, et al. Hand-
written digit recognition with a back-propagation network. In Advances in neural information processing
systems, 1990.

[16] Y. LeCun, F.J. Huang, and L. Bottou. Learning methods for generic object recognition with invariance to
pose and lighting. In Computer Vision and Pattern Recognition, 2004. CVPR 2004. Proceedings of the
2004 IEEE Computer Society Conference on, volume 2, pages II–97. IEEE, 2004.

[17] Y. LeCun, K. Kavukcuoglu, and C. Farabet. Convolutional networks and applications in vision.

In
Circuits and Systems (ISCAS), Proceedings of 2010 IEEE International Symposium on, pages 253–256.
IEEE, 2010.

[18] H. Lee, R. Grosse, R. Ranganath, and A.Y. Ng. Convolutional deep belief networks for scalable unsuper-
vised learning of hierarchical representations. In Proceedings of the 26th Annual International Conference
on Machine Learning, pages 609–616. ACM, 2009.

[19] T. Mensink, J. Verbeek, F. Perronnin, and G. Csurka. Metric Learning for Large Scale Image Classiﬁ-
cation: Generalizing to New Classes at Near-Zero Cost. In ECCV - European Conference on Computer
Vision, Florence, Italy, October 2012.

[20] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted boltzmann machines. In Proc. 27th

International Conference on Machine Learning, 2010.

[21] N. Pinto, D.D. Cox, and J.J. DiCarlo. Why is real-world visual object recognition hard? PLoS computa-

tional biology, 4(1):e27, 2008.

[22] N. Pinto, D. Doukhan, J.J. DiCarlo, and D.D. Cox. A high-throughput screening approach to discovering
good forms of biologically inspired visual representation. PLoS computational biology, 5(11):e1000579,
2009.

[23] B.C. Russell, A. Torralba, K.P. Murphy, and W.T. Freeman. Labelme: a database and web-based tool for

image annotation. International journal of computer vision, 77(1):157–173, 2008.

[24] J. Sánchez and F. Perronnin. High-dimensional signature compression for large-scale image classiﬁcation.
In Computer Vision and Pattern Recognition (CVPR), 2011 IEEE Conference on, pages 1665–1672. IEEE,
2011.

[25] P.Y. Simard, D. Steinkraus, and J.C. Platt. Best practices for convolutional neural networks applied to
visual document analysis. In Proceedings of the Seventh International Conference on Document Analysis
and Recognition, volume 2, pages 958–962, 2003.

[26] S.C. Turaga, J.F. Murray, V. Jain, F. Roth, M. Helmstaedter, K. Briggman, W. Denk, and H.S. Seung. Con-
volutional networks can learn to generate afﬁnity graphs for image segmentation. Neural Computation,
22(2):511–538, 2010.

9

"
2,RestNet.pdf,"Deep Residual Learning for Image Recognition

Kaiming He

Xiangyu Zhang

Shaoqing Ren

Jian Sun

Microsoft Research

@microsoft.com
kahe, v-xiangz, v-shren, jiansun
}
{

5
1
0
2
c
e
D
0
1

]

V
C
.
s
c
[

1
v
5
8
3
3
0
.
2
1
5
1
:
v
i
X
r
a

Abstract

Deeper neural networks are more difﬁcult to train. We
present a residual learning framework to ease the training
of networks that are substantially deeper than those used
previously. We explicitly reformulate the layers as learn-
ing residual functions with reference to the layer inputs, in-
stead of learning unreferenced functions. We provide com-
prehensive empirical evidence showing that these residual
networks are easier to optimize, and can gain accuracy from
considerably increased depth. On the ImageNet dataset we
evaluate residual nets with a depth of up to 152 layers—8
×
deeper than VGG nets [41] but still having lower complex-
ity. An ensemble of these residual nets achieves 3.57% error
on the ImageNet test set. This result won the 1st place on the
ILSVRC 2015 classiﬁcation task. We also present analysis
on CIFAR-10 with 100 and 1000 layers.

The depth of representations is of central importance
for many visual recognition tasks. Solely due to our ex-
tremely deep representations, we obtain a 28% relative im-
provement on the COCO object detection dataset. Deep
residual nets are foundations of our submissions to ILSVRC
& COCO 2015 competitions1, where we also won the 1st
places on the tasks of ImageNet detection, ImageNet local-
ization, COCO detection, and COCO segmentation.

1. Introduction

Deep convolutional neural networks [22, 21] have led
to a series of breakthroughs for image classiﬁcation [21,
50, 40]. Deep networks naturally integrate low/mid/high-
level features [50] and classiﬁers in an end-to-end multi-
layer fashion, and the “levels” of features can be enriched
by the number of stacked layers (depth). Recent evidence
[41, 44] reveals that network depth is of crucial importance,
and the leading results [41, 44, 13, 16] on the challenging
ImageNet dataset [36] all exploit “very deep” [41] models,
with a depth of sixteen [41] to thirty [16]. Many other non-
trivial visual recognition tasks [8, 12, 7, 32, 27] have also

1http://image-net.org/challenges/LSVRC/2015/

and
http://mscoco.org/dataset/#detections-challenge2015.

Figure 1. Training error (left) and test error (right) on CIFAR-10
with 20-layer and 56-layer “plain” networks. The deeper network
has higher training error, and thus test error. Similar phenomena
on ImageNet is presented in Fig. 4.

greatly beneﬁted from very deep models.

Driven by the signiﬁcance of depth, a question arises: Is
learning better networks as easy as stacking more layers?
An obstacle to answering this question was the notorious
problem of vanishing/exploding gradients [1, 9], which
hamper convergence from the beginning. This problem,
however, has been largely addressed by normalized initial-
ization [23, 9, 37, 13] and intermediate normalization layers
[16], which enable networks with tens of layers to start con-
verging for stochastic gradient descent (SGD) with back-
propagation [22].

When deeper networks are able to start converging, a
degradation problem has been exposed: with the network
depth increasing, accuracy gets saturated (which might be
unsurprising) and then degrades rapidly. Unexpectedly,
such degradation is not caused by overﬁtting, and adding
more layers to a suitably deep model leads to higher train-
ing error, as reported in [11, 42] and thoroughly veriﬁed by
our experiments. Fig. 1 shows a typical example.

The degradation (of training accuracy) indicates that not
all systems are similarly easy to optimize. Let us consider a
shallower architecture and its deeper counterpart that adds
more layers onto it. There exists a solution by construction
to the deeper model: the added layers are identity mapping,
and the other layers are copied from the learned shallower
model. The existence of this constructed solution indicates
that a deeper model should produce no higher training error
than its shallower counterpart. But experiments show that
our current solvers on hand are unable to ﬁnd solutions that

1

01234560 1020iter. (1e4)training error (%)  012345601020iter. (1e4)test error (%)  56-layer20-layer56-layer20-layer 
 
 
 
 
 
Figure 2. Residual learning: a building block.

ImageNet test set, and won the 1st place in the ILSVRC
2015 classiﬁcation competition. The extremely deep rep-
resentations also have excellent generalization performance
on other recognition tasks, and lead us to further win the
1st places on: ImageNet detection, ImageNet localization,
COCO detection, and COCO segmentation in ILSVRC &
COCO 2015 competitions. This strong evidence shows that
the residual learning principle is generic, and we expect that
it is applicable in other vision and non-vision problems.

are comparably good or better than the constructed solution
(or unable to do so in feasible time).

2. Related Work

learning framework.

In this paper, we address the degradation problem by
introducing a deep residual
In-
stead of hoping each few stacked layers directly ﬁt a
desired underlying mapping, we explicitly let these lay-
ers ﬁt a residual mapping. Formally, denoting the desired
(x), we let the stacked nonlinear
underlying mapping as
x. The orig-
layers ﬁt another mapping of
(x)
F
inal mapping is recast into
(x)+x. We hypothesize that it
is easier to optimize the residual mapping than to optimize
the original, unreferenced mapping. To the extreme, if an
identity mapping were optimal, it would be easier to push
the residual to zero than to ﬁt an identity mapping by a stack
of nonlinear layers.

(x) :=

H

H

−

F

F

The formulation of

(x) + x can be realized by feedfor-
ward neural networks with “shortcut connections” (Fig. 2).
Shortcut connections [2, 34, 49] are those skipping one or
more layers. In our case, the shortcut connections simply
perform identity mapping, and their outputs are added to
Identity short-
the outputs of the stacked layers (Fig. 2).
cut connections add neither extra parameter nor computa-
tional complexity. The entire network can still be trained
end-to-end by SGD with backpropagation, and can be eas-
ily implemented using common libraries (e.g., Caffe [19])
without modifying the solvers.

We present comprehensive experiments on ImageNet
[36] to show the degradation problem and evaluate our
method. We show that: 1) Our extremely deep residual nets
are easy to optimize, but the counterpart “plain” nets (that
simply stack layers) exhibit higher training error when the
depth increases; 2) Our deep residual nets can easily enjoy
accuracy gains from greatly increased depth, producing re-
sults substantially better than previous networks.

Similar phenomena are also shown on the CIFAR-10 set
[20], suggesting that the optimization difﬁculties and the
effects of our method are not just akin to a particular dataset.
We present successfully trained models on this dataset with
over 100 layers, and explore models with over 1000 layers.
On the ImageNet classiﬁcation dataset [36], we obtain
excellent results by extremely deep residual nets. Our 152-
layer residual net is the deepest network ever presented on
ImageNet, while still having lower complexity than VGG
nets [41]. Our ensemble has 3.57% top-5 error on the

2

Residual Representations. In image recognition, VLAD
[18] is a representation that encodes by the residual vectors
with respect to a dictionary, and Fisher Vector [30] can be
formulated as a probabilistic version [18] of VLAD. Both
of them are powerful shallow representations for image re-
trieval and classiﬁcation [4, 48]. For vector quantization,
encoding residual vectors [17] is shown to be more effec-
tive than encoding original vectors.

In low-level vision and computer graphics, for solv-
ing Partial Differential Equations (PDEs), the widely used
Multigrid method [3] reformulates the system as subprob-
lems at multiple scales, where each subproblem is respon-
sible for the residual solution between a coarser and a ﬁner
scale. An alternative to Multigrid is hierarchical basis pre-
conditioning [45, 46], which relies on variables that repre-
sent residual vectors between two scales. It has been shown
[3, 45, 46] that these solvers converge much faster than stan-
dard solvers that are unaware of the residual nature of the
solutions. These methods suggest that a good reformulation
or preconditioning can simplify the optimization.

Shortcut Connections. Practices and theories that lead to
shortcut connections [2, 34, 49] have been studied for a long
time. An early practice of training multi-layer perceptrons
(MLPs) is to add a linear layer connected from the network
input to the output [34, 49].
In [44, 24], a few interme-
diate layers are directly connected to auxiliary classiﬁers
for addressing vanishing/exploding gradients. The papers
of [39, 38, 31, 47] propose methods for centering layer re-
sponses, gradients, and propagated errors, implemented by
shortcut connections. In [44], an “inception” layer is com-
posed of a shortcut branch and a few deeper branches.

Concurrent with our work, “highway networks” [42, 43]
present shortcut connections with gating functions [15].
These gates are data-dependent and have parameters, in
contrast to our identity shortcuts that are parameter-free.
When a gated shortcut is “closed” (approaching zero), the
layers in highway networks represent non-residual func-
tions. On the contrary, our formulation always learns
residual functions; our identity shortcuts are never closed,
and all information is always passed through, with addi-
tional residual functions to be learned. In addition, high-

identityweight layerweight layerrelureluF(x)(cid:1)+(cid:1)xxF(x)xway networks have not demonstrated accuracy gains with
extremely increased depth (e.g., over 100 layers).

3. Deep Residual Learning

3.1. Residual Learning

H

Let us consider

(x) as an underlying mapping to be
ﬁt by a few stacked layers (not necessarily the entire net),
with x denoting the inputs to the ﬁrst of these layers. If one
hypothesizes that multiple nonlinear layers can asymptoti-
cally approximate complicated functions2, then it is equiv-
alent to hypothesize that they can asymptotically approxi-
mate the residual functions, i.e.,
x (assuming that
the input and output are of the same dimensions). So
rather than expect stacked layers to approximate
(x), we
explicitly let these layers approximate a residual function
x. The original function thus becomes
(x) :=
F
(x)+x. Although both forms should be able to asymptot-
F
ically approximate the desired functions (as hypothesized),
the ease of learning might be different.

(x)

(x)

H

H

H

−

−

This reformulation is motivated by the counterintuitive
phenomena about the degradation problem (Fig. 1, left). As
we discussed in the introduction, if the added layers can
be constructed as identity mappings, a deeper model should
have training error no greater than its shallower counter-
part. The degradation problem suggests that the solvers
might have difﬁculties in approximating identity mappings
by multiple nonlinear layers. With the residual learning re-
formulation, if identity mappings are optimal, the solvers
may simply drive the weights of the multiple nonlinear lay-
ers toward zero to approach identity mappings.

In real cases, it is unlikely that identity mappings are op-
timal, but our reformulation may help to precondition the
If the optimal function is closer to an identity
problem.
mapping than to a zero mapping, it should be easier for the
solver to ﬁnd the perturbations with reference to an identity
mapping, than to learn the function as a new one. We show
by experiments (Fig. 7) that the learned residual functions in
general have small responses, suggesting that identity map-
pings provide reasonable preconditioning.

3.2. Identity Mapping by Shortcuts

We adopt residual learning to every few stacked layers.
A building block is shown in Fig. 2. Formally, in this paper
we consider a building block deﬁned as:

y =

(x,

Wi

) + x.
}

F

{
Here x and y are the input and output vectors of the lay-
ers considered. The function
) represents the
}
residual mapping to be learned. For the example in Fig. 2
= W2σ(W1x) in which σ denotes
that has two layers,

Wi
{

(x,

F

(1)

F

2This hypothesis, however, is still an open question. See [28].

3

ReLU [29] and the biases are omitted for simplifying no-
tations. The operation
+ x is performed by a shortcut
connection and element-wise addition. We adopt the sec-
ond nonlinearity after the addition (i.e., σ(y), see Fig. 2).

F

The shortcut connections in Eqn.(1) introduce neither ex-
tra parameter nor computation complexity. This is not only
attractive in practice but also important in our comparisons
between plain and residual networks. We can fairly com-
pare plain/residual networks that simultaneously have the
same number of parameters, depth, width, and computa-
tional cost (except for the negligible element-wise addition).
must be equal in Eqn.(1).
F
If this is not the case (e.g., when changing the input/output
channels), we can perform a linear projection Ws by the
shortcut connections to match the dimensions:

The dimensions of x and

y =

(x,

Wi

) + Wsx.
}

{

F

(2)

We can also use a square matrix Ws in Eqn.(1). But we will
show by experiments that the identity mapping is sufﬁcient
for addressing the degradation problem and is economical,
and thus Ws is only used when matching dimensions.

F

is ﬂexible. Exper-
The form of the residual function
F
iments in this paper involve a function
that has two or
three layers (Fig. 5), while more layers are possible. But if
has only a single layer, Eqn.(1) is similar to a linear layer:
F
y = W1x + x, for which we have not observed advantages.
We also note that although the above notations are about
fully-connected layers for simplicity, they are applicable to
convolutional layers. The function
) can repre-
}
sent multiple convolutional layers. The element-wise addi-
tion is performed on two feature maps, channel by channel.

(x,

Wi

F

{

3.3. Network Architectures

We have tested various plain/residual nets, and have ob-
served consistent phenomena. To provide instances for dis-
cussion, we describe two models for ImageNet as follows.

Plain Network. Our plain baselines (Fig. 3, middle) are
mainly inspired by the philosophy of VGG nets [41] (Fig. 3,
left). The convolutional layers mostly have 3
3 ﬁlters and
×
follow two simple design rules:
(i) for the same output
feature map size, the layers have the same number of ﬁl-
ters; and (ii) if the feature map size is halved, the num-
ber of ﬁlters is doubled so as to preserve the time com-
plexity per layer. We perform downsampling directly by
convolutional layers that have a stride of 2. The network
ends with a global average pooling layer and a 1000-way
fully-connected layer with softmax. The total number of
weighted layers is 34 in Fig. 3 (middle).

It is worth noticing that our model has fewer ﬁlters and
lower complexity than VGG nets [41] (Fig. 3, left). Our 34-
layer baseline has 3.6 billion FLOPs (multiply-adds), which
is only 18% of VGG-19 (19.6 billion FLOPs).

Residual Network. Based on the above plain network, we
insert shortcut connections (Fig. 3, right) which turn the
network into its counterpart residual version. The identity
shortcuts (Eqn.(1)) can be directly used when the input and
output are of the same dimensions (solid line shortcuts in
Fig. 3). When the dimensions increase (dotted line shortcuts
in Fig. 3), we consider two options: (A) The shortcut still
performs identity mapping, with extra zero entries padded
for increasing dimensions. This option introduces no extra
parameter; (B) The projection shortcut in Eqn.(2) is used to
match dimensions (done by 1
1 convolutions). For both
options, when the shortcuts go across feature maps of two
sizes, they are performed with a stride of 2.

×

3.4. Implementation

×

Our implementation for ImageNet follows the practice
in [21, 41]. The image is resized with its shorter side ran-
domly sampled in [256, 480] for scale augmentation [41].
A 224
224 crop is randomly sampled from an image or its
horizontal ﬂip, with the per-pixel mean subtracted [21]. The
standard color augmentation in [21] is used. We adopt batch
normalization (BN) [16] right after each convolution and
before activation, following [16]. We initialize the weights
as in [13] and train all plain/residual nets from scratch. We
use SGD with a mini-batch size of 256. The learning rate
starts from 0.1 and is divided by 10 when the error plateaus,
104 iterations. We
and the models are trained for up to 60
use a weight decay of 0.0001 and a momentum of 0.9. We
do not use dropout [14], following the practice in [16].

×

In testing, for comparison studies we adopt the standard
10-crop testing [21]. For best results, we adopt the fully-
convolutional form as in [41, 13], and average the scores
at multiple scales (images are resized such that the shorter
side is in

224, 256, 384, 480, 640

).
}

{
4. Experiments

Figure 3. Example network architectures for ImageNet. Left: the
VGG-19 model [41] (19.6 billion FLOPs) as a reference. Mid-
dle: a plain network with 34 parameter layers (3.6 billion FLOPs).
Right: a residual network with 34 parameter layers (3.6 billion
FLOPs). The dotted shortcuts increase dimensions. Table 1 shows
more details and other variants.

4.1. ImageNet Classiﬁcation

We evaluate our method on the ImageNet 2012 classiﬁ-
cation dataset [36] that consists of 1000 classes. The models
are trained on the 1.28 million training images, and evalu-
ated on the 50k validation images. We also obtain a ﬁnal
result on the 100k test images, reported by the test server.
We evaluate both top-1 and top-5 error rates.

Plain Networks. We ﬁrst evaluate 18-layer and 34-layer
plain nets. The 34-layer plain net is in Fig. 3 (middle). The
18-layer plain net is of a similar form. See Table 1 for de-
tailed architectures.

The results in Table 2 show that the deeper 34-layer plain
net has higher validation error than the shallower 18-layer
plain net. To reveal the reasons, in Fig. 4 (left) we com-
pare their training/validation errors during the training pro-
cedure. We have observed the degradation problem - the

4

7x7 conv, 64, /2pool, /23x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 128, /23x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 256, /23x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 512, /23x3 conv, 5123x3 conv, 5123x3 conv, 5123x3 conv, 5123x3 conv, 512avg poolfc 1000image3x3 conv, 5123x3 conv, 643x3 conv, 64pool, /23x3 conv, 1283x3 conv, 128pool, /23x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 256pool, /23x3 conv, 5123x3 conv, 5123x3 conv, 512pool, /23x3 conv, 5123x3 conv, 5123x3 conv, 5123x3 conv, 512pool, /2fc 4096fc 4096fc 1000imageoutput size: 112output size: 224output size: 56output size: 28output size: 14output size: 7output size: 1VGG-1934-layer plain7x7 conv, 64, /2pool, /23x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 643x3 conv, 128, /23x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 1283x3 conv, 256, /23x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 2563x3 conv, 512, /23x3 conv, 5123x3 conv, 5123x3 conv, 5123x3 conv, 5123x3 conv, 512avg poolfc 1000image34-layer residuallayer name output size
112

conv1

112

×

18-layer

34-layer

50-layer

101-layer

152-layer

conv2 x

56

56

×

(cid:20) 3
×
3
×

3, 64
3, 64

(cid:21)

2

×

(cid:20) 3
3

×
×

3, 64
3, 64

(cid:21)

3

×

conv3 x

28

28

×

conv4 x

14

14

×

conv5 x

FLOPs

7

7
×

1

1
×

(cid:20) 3
×
3
×

(cid:20) 3
×
3
×

(cid:20) 3
×
3
×

3, 128
3, 128

3, 256
3, 256

3, 512
3, 512

(cid:21)

2
×

(cid:21)

2
×

(cid:21)

2
×

(cid:20) 3
×
3
×

(cid:20) 3
×
3
×

(cid:20) 3
×
3
×

3, 128
3, 128

(cid:21)

4

×

3, 256
3, 256

3, 512
3, 512

(cid:21)

×

(cid:21)

×

109

1.8

×

109

3.6

×

7, 64, stride 2
7
×
3 max pool, stride 2
3
×



1
×
3
×
1
×

1, 64
3, 64
1, 256

×







3





4



×









1, 128
3, 128
1, 512

1
3
1

×
×
×





6

6









×

1, 256
3, 256
1, 1024

1
×
3
×
1
×
1
×
3
×
1
×

1
×
3
×
1
×
1
×
3
×
1
×
average pool, 1000-d fc, softmax
109

1, 512
3, 512
1, 2048

3.8

×











3

3

×

1, 64
3, 64
1, 256

1, 128
3, 128
1, 512

1
×
3
×
1
×
1
×
3
×
1
×

1, 256
3, 256
1, 1024

1, 512
3, 512
1, 2048



3



×



4



×



23



×



3



×

















1, 64
3, 64
1, 256

1
×
3
×
1
×

1, 128
3, 128
1, 512

1, 256
3, 256
1, 1024

1, 512
3, 512
1, 2048

1
3
1

×
×
×

1
×
3
×
1
×
1
×
3
×
1
×



3



×



8



×



36



×



3



×

7.6

109

11.3

109

×

×

Table 1. Architectures for ImageNet. Building blocks are shown in brackets (see also Fig. 5), with the numbers of blocks stacked. Down-
sampling is performed by conv3 1, conv4 1, and conv5 1 with a stride of 2.

Figure 4. Training on ImageNet. Thin curves denote training error, and bold curves denote validation error of the center crops. Left: plain
networks of 18 and 34 layers. Right: ResNets of 18 and 34 layers. In this plot, the residual networks have no extra parameter compared to
their plain counterparts.

18 layers
34 layers

plain
27.94
28.54

ResNet
27.88
25.03

Table 2. Top-1 error (%, 10-crop testing) on ImageNet validation.
Here the ResNets have no extra parameter compared to their plain
counterparts. Fig. 4 shows the training procedures.

34-layer plain net has higher training error throughout the
whole training procedure, even though the solution space
of the 18-layer plain network is a subspace of that of the
34-layer one.

We argue that this optimization difﬁculty is unlikely to
be caused by vanishing gradients. These plain networks are
trained with BN [16], which ensures forward propagated
signals to have non-zero variances. We also verify that the
backward propagated gradients exhibit healthy norms with
BN. So neither forward nor backward signals vanish.
In
fact, the 34-layer plain net is still able to achieve compet-
itive accuracy (Table 3), suggesting that the solver works
to some extent. We conjecture that the deep plain nets may
have exponentially low convergence rates, which impact the

reducing of the training error3. The reason for such opti-
mization difﬁculties will be studied in the future.

Residual Networks. Next we evaluate 18-layer and 34-
layer residual nets (ResNets). The baseline architectures
are the same as the above plain nets, expect that a shortcut
connection is added to each pair of 3
3 ﬁlters as in Fig. 3
(right). In the ﬁrst comparison (Table 2 and Fig. 4 right),
we use identity mapping for all shortcuts and zero-padding
for increasing dimensions (option A). So they have no extra
parameter compared to the plain counterparts.

×

We have three major observations from Table 2 and
Fig. 4. First, the situation is reversed with residual learn-
ing – the 34-layer ResNet is better than the 18-layer ResNet
(by 2.8%). More importantly, the 34-layer ResNet exhibits
considerably lower training error and is generalizable to the
validation data. This indicates that the degradation problem
is well addressed in this setting and we manage to obtain
accuracy gains from increased depth.

Second, compared to its plain counterpart, the 34-layer

3We have experimented with more training iterations (3×) and still ob-
served the degradation problem, suggesting that this problem cannot be
feasibly addressed by simply using more iterations.

5

010203040502030405060iter. (1e4)error (%)  plain-18plain-34010203040502030405060iter. (1e4)error (%)  ResNet-18ResNet-3418-layer34-layer18-layer34-layermodel

VGG-16 [41]

GoogLeNet [44]

PReLU-net [13]

top-1 err.
28.07
-
24.27

top-5 err.
9.33
9.15
7.38

plain-34

ResNet-34 A

ResNet-34 B

ResNet-34 C

ResNet-50

ResNet-101

ResNet-152

28.54
25.03
24.52
24.19
22.85
21.75
21.43

10.02
7.76
7.46
7.40
6.71
6.05
5.71

Table 3. Error rates (%, 10-crop testing) on ImageNet validation.
VGG-16 is based on our test. ResNet-50/101/152 are of option B
that only uses projections for increasing dimensions.

method
VGG [41] (ILSVRC’14)
GoogLeNet [44] (ILSVRC’14)
VGG [41] (v5)
PReLU-net [13]
BN-inception [16]
ResNet-34 B
ResNet-34 C
ResNet-50
ResNet-101
ResNet-152

top-1 err.
-
-
24.4
21.59
21.99
21.84
21.53
20.74
19.87
19.38

top-5 err.
8.43†
7.89
7.1
5.71
5.81
5.71
5.60
5.25
4.60
4.49

Table 4. Error rates (%) of single-model results on the ImageNet
validation set (except † reported on the test set).

method
VGG [41] (ILSVRC’14)
GoogLeNet [44] (ILSVRC’14)
VGG [41] (v5)
PReLU-net [13]
BN-inception [16]
ResNet (ILSVRC’15)

top-5 err. (test)
7.32
6.66
6.8
4.94
4.82
3.57

Table 5. Error rates (%) of ensembles. The top-5 error is on the
test set of ImageNet and reported by the test server.

Figure 5. A deeper residual function F for ImageNet. Left: a
building block (on 56×56 feature maps) as in Fig. 3 for ResNet-
34. Right: a “bottleneck” building block for ResNet-50/101/152.

parameter-free, identity shortcuts help with training. Next
we investigate projection shortcuts (Eqn.(2)). In Table 3 we
compare three options: (A) zero-padding shortcuts are used
for increasing dimensions, and all shortcuts are parameter-
free (the same as Table 2 and Fig. 4 right); (B) projec-
tion shortcuts are used for increasing dimensions, and other
shortcuts are identity; and (C) all shortcuts are projections.
Table 3 shows that all three options are considerably bet-
ter than the plain counterpart. B is slightly better than A. We
argue that this is because the zero-padded dimensions in A
indeed have no residual learning. C is marginally better than
B, and we attribute this to the extra parameters introduced
by many (thirteen) projection shortcuts. But the small dif-
ferences among A/B/C indicate that projection shortcuts are
not essential for addressing the degradation problem. So we
do not use option C in the rest of this paper, to reduce mem-
ory/time complexity and model sizes. Identity shortcuts are
particularly important for not increasing the complexity of
the bottleneck architectures that are introduced below.

Deeper Bottleneck Architectures. Next we describe our
deeper nets for ImageNet. Because of concerns on the train-
ing time that we can afford, we modify the building block
as a bottleneck design4. For each residual function
, we
use a stack of 3 layers instead of 2 (Fig. 5). The three layers
are 1
1 layers
are responsible for reducing and then increasing (restoring)
3 layer a bottleneck with smaller
dimensions, leaving the 3
input/output dimensions. Fig. 5 shows an example, where
both designs have similar time complexity.

1 convolutions, where the 1

3, and 1

1, 3

×

×

×

×

×

F

ResNet reduces the top-1 error by 3.5% (Table 2), resulting
from the successfully reduced training error (Fig. 4 right vs.
left). This comparison veriﬁes the effectiveness of residual
learning on extremely deep systems.

Last, we also note that the 18-layer plain/residual nets
are comparably accurate (Table 2), but the 18-layer ResNet
converges faster (Fig. 4 right vs. left). When the net is “not
overly deep” (18 layers here), the current SGD solver is still
able to ﬁnd good solutions to the plain net. In this case, the
ResNet eases the optimization by providing faster conver-
gence at the early stage.

Identity vs. Projection Shortcuts. We have shown that

The parameter-free identity shortcuts are particularly im-
portant for the bottleneck architectures. If the identity short-
cut in Fig. 5 (right) is replaced with projection, one can
show that the time complexity and model size are doubled,
as the shortcut is connected to the two high-dimensional
ends. So identity shortcuts lead to more efﬁcient models
for the bottleneck designs.

50-layer ResNet: We replace each 2-layer block in the

4Deeper non-bottleneck ResNets (e.g., Fig. 5 left) also gain accuracy
from increased depth (as shown on CIFAR-10), but are not as economical
as the bottleneck ResNets. So the usage of bottleneck designs is mainly due
to practical considerations. We further note that the degradation problem
of plain nets is also witnessed for the bottleneck designs.

6

3x3, 641x1, 64relu1x1, 256relurelu3x3, 643x3, 64relurelu64-d256-d34-layer net with this 3-layer bottleneck block, resulting in
a 50-layer ResNet (Table 1). We use option B for increasing
dimensions. This model has 3.8 billion FLOPs.

101-layer and 152-layer ResNets: We construct 101-
layer and 152-layer ResNets by using more 3-layer blocks
(Table 1). Remarkably, although the depth is signiﬁcantly
increased, the 152-layer ResNet (11.3 billion FLOPs) still
has lower complexity than VGG-16/19 nets (15.3/19.6 bil-
lion FLOPs).

The 50/101/152-layer ResNets are more accurate than
the 34-layer ones by considerable margins (Table 3 and 4).
We do not observe the degradation problem and thus en-
joy signiﬁcant accuracy gains from considerably increased
depth. The beneﬁts of depth are witnessed for all evaluation
metrics (Table 3 and 4).

Comparisons with State-of-the-art Methods. In Table 4
we compare with the previous best single-model results.
Our baseline 34-layer ResNets have achieved very compet-
itive accuracy. Our 152-layer ResNet has a single-model
top-5 validation error of 4.49%. This single-model result
outperforms all previous ensemble results (Table 5). We
combine six models of different depth to form an ensemble
(only with two 152-layer ones at the time of submitting).
This leads to 3.57% top-5 error on the test set (Table 5).
This entry won the 1st place in ILSVRC 2015.

4.2. CIFAR-10 and Analysis

We conducted more studies on the CIFAR-10 dataset
[20], which consists of 50k training images and 10k test-
ing images in 10 classes. We present experiments trained
on the training set and evaluated on the test set. Our focus
is on the behaviors of extremely deep networks, but not on
pushing the state-of-the-art results, so we intentionally use
simple architectures as follows.

×

The plain/residual architectures follow the form in Fig. 3
32 images, with
(middle/right). The network inputs are 32
3 convo-
the per-pixel mean subtracted. The ﬁrst layer is 3
lutions. Then we use a stack of 6n layers with 3
3 convo-
lutions on the feature maps of sizes
respectively,
with 2n layers for each feature map size. The numbers of
ﬁlters are
respectively. The subsampling is per-
formed by convolutions with a stride of 2. The network ends
with a global average pooling, a 10-way fully-connected
layer, and softmax. There are totally 6n+2 stacked weighted
layers. The following table summarizes the architecture:

16, 32, 64
{

32, 16, 8
{

×
×

}

}

output map size
# layers
# ﬁlters

32×32
1+2n
16

16×16
2n
32

8×8
2n
64

When shortcut connections are used, they are connected
3 layers (totally 3n shortcuts). On this
to the pairs of 3
dataset we use identity shortcuts in all cases (i.e., option A),

×

7

method
Maxout [10]
NIN [25]
DSN [24]

error (%)
9.38
8.81
8.22

FitNet [35]
Highway [42, 43]
Highway [42, 43]
ResNet
ResNet
ResNet
ResNet
ResNet
ResNet

# layers
19
19
32
20
32
44
56
110
1202

# params
2.5M
2.3M
1.25M 8.80
0.27M 8.75
0.46M 7.51
0.66M 7.17
0.85M 6.97
1.7M
19.4M 7.93

8.39
7.54 (7.72±0.16)

6.43 (6.61±0.16)

Table 6. Classiﬁcation error on the CIFAR-10 test set. All meth-
ods are with data augmentation. For ResNet-110, we run it 5 times
and show “best (mean±std)” as in [43].

so our residual models have exactly the same depth, width,
and number of parameters as the plain counterparts.

We use a weight decay of 0.0001 and momentum of 0.9,
and adopt the weight initialization in [13] and BN [16] but
with no dropout. These models are trained with a mini-
batch size of 128 on two GPUs. We start with a learning
rate of 0.1, divide it by 10 at 32k and 48k iterations, and
terminate training at 64k iterations, which is determined on
a 45k/5k train/val split. We follow the simple data augmen-
tation in [24] for training: 4 pixels are padded on each side,
32 crop is randomly sampled from the padded
and a 32
image or its horizontal ﬂip. For testing, we only evaluate
the single view of the original 32

We compare n =

3, 5, 7, 9
}
{

×
, leading to 20, 32, 44, and
56-layer networks. Fig. 6 (left) shows the behaviors of the
plain nets. The deep plain nets suffer from increased depth,
and exhibit higher training error when going deeper. This
phenomenon is similar to that on ImageNet (Fig. 4, left) and
on MNIST (see [42]), suggesting that such an optimization
difﬁculty is a fundamental problem.

32 image.

×

Fig. 6 (middle) shows the behaviors of ResNets. Also
similar to the ImageNet cases (Fig. 4, right), our ResNets
manage to overcome the optimization difﬁculty and demon-
strate accuracy gains when the depth increases.

We further explore n = 18 that leads to a 110-layer
ResNet. In this case, we ﬁnd that the initial learning rate
of 0.1 is slightly too large to start converging5. So we use
0.01 to warm up the training until the training error is below
80% (about 400 iterations), and then go back to 0.1 and con-
tinue training. The rest of the learning schedule is as done
previously. This 110-layer network converges well (Fig. 6,
middle). It has fewer parameters than other deep and thin

5With an initial learning rate of 0.1, it starts converging (<90% error)

after several epochs, but still reaches similar accuracy.

Figure 6. Training on CIFAR-10. Dashed lines denote training error, and bold lines denote testing error. Left: plain networks. The error
of plain-110 is higher than 60% and not displayed. Middle: ResNets. Right: ResNets with 110 and 1202 layers.

training data
test data
VGG-16
ResNet-101

07+12
VOC 07 test
73.2
76.4

07++12
VOC 12 test
70.4
73.8

Table 7. Object detection mAP (%) on the PASCAL VOC
2007/2012 test sets using baseline Faster R-CNN. See also Ta-
ble 10 and 11 for better results.

metric
VGG-16
ResNet-101

mAP@.5
41.5
48.4

mAP@[.5, .95]
21.2
27.2

Table 8. Object detection mAP (%) on the COCO validation set
using baseline Faster R-CNN. See also Table 9 for better results.

have similar training error. We argue that this is because of
overﬁtting. The 1202-layer network may be unnecessarily
large (19.4M) for this small dataset. Strong regularization
such as maxout [10] or dropout [14] is applied to obtain the
best results ([10, 25, 24, 35]) on this dataset. In this paper,
we use no maxout/dropout and just simply impose regular-
ization via deep and thin architectures by design, without
distracting from the focus on the difﬁculties of optimiza-
tion. But combining with stronger regularization may im-
prove results, which we will study in the future.

4.3. Object Detection on PASCAL and MS COCO

Our method has good generalization performance on
other recognition tasks. Table 7 and 8 show the object de-
tection baseline results on PASCAL VOC 2007 and 2012
[5] and COCO [26]. We adopt Faster R-CNN [32] as the de-
tection method. Here we are interested in the improvements
of replacing VGG-16 [41] with ResNet-101. The detection
implementation (see appendix) of using both models is the
same, so the gains can only be attributed to better networks.
Most remarkably, on the challenging COCO dataset we ob-
tain a 6.0% increase in COCO’s standard metric (mAP@[.5,
.95]), which is a 28% relative improvement. This gain is
solely due to the learned representations.

Based on deep residual nets, we won the 1st places in
several tracks in ILSVRC & COCO 2015 competitions: Im-
ageNet detection, ImageNet localization, COCO detection,
and COCO segmentation. The details are in the appendix.

Figure 7. Standard deviations (std) of layer responses on CIFAR-
10. The responses are the outputs of each 3×3 layer, after BN and
before nonlinearity. Top: the layers are shown in their original
order. Bottom: the responses are ranked in descending order.

networks such as FitNet [35] and Highway [42] (Table 6),
yet is among the state-of-the-art results (6.43%, Table 6).

×

Analysis of Layer Responses. Fig. 7 shows the standard
deviations (std) of the layer responses. The responses are
the outputs of each 3
3 layer, after BN and before other
nonlinearity (ReLU/addition). For ResNets, this analy-
sis reveals the response strength of the residual functions.
Fig. 7 shows that ResNets have generally smaller responses
than their plain counterparts. These results support our ba-
sic motivation (Sec.3.1) that the residual functions might
be generally closer to zero than the non-residual functions.
We also notice that the deeper ResNet has smaller magni-
tudes of responses, as evidenced by the comparisons among
ResNet-20, 56, and 110 in Fig. 7. When there are more
layers, an individual layer of ResNets tends to modify the
signal less.

Exploring Over 1000 layers. We explore an aggressively
deep model of over 1000 layers. We set n = 200 that
leads to a 1202-layer network, which is trained as described
above. Our method shows no optimization difﬁculty, and
this 103-layer network is able to achieve training error
<0.1% (Fig. 6, right).
Its test error is still fairly good
(7.93%, Table 6).

But there are still open problems on such aggressively
deep models. The testing result of this 1202-layer network
is worse than that of our 110-layer network, although both

8

0123456051020iter. (1e4)error (%)  plain-20plain-32plain-44plain-560123456051020iter. (1e4)error (%)  ResNet-20ResNet-32ResNet-44ResNet-56ResNet-11056-layer20-layer110-layer20-layer4560151020iter. (1e4)error (%)  residual-110residual-1202020406080100123layer index (sorted by magnitude)std  plain-20plain-56ResNet-20ResNet-56ResNet-110020406080100123layer index (original)std  plain-20plain-56ResNet-20ResNet-56ResNet-110[28] G. Mont´ufar, R. Pascanu, K. Cho, and Y. Bengio. On the number of

linear regions of deep neural networks. In NIPS, 2014.

[29] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted

boltzmann machines. In ICML, 2010.

[30] F. Perronnin and C. Dance. Fisher kernels on visual vocabularies for

image categorization. In CVPR, 2007.

[31] T. Raiko, H. Valpola, and Y. LeCun. Deep learning made easier by

linear transformations in perceptrons. In AISTATS, 2012.

[32] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: Towards
real-time object detection with region proposal networks. In NIPS,
2015.

[33] S. Ren, K. He, R. Girshick, X. Zhang, and J. Sun. Object detection

networks on convolutional feature maps. arXiv:1504.06066, 2015.

[34] B. D. Ripley. Pattern recognition and neural networks. Cambridge

university press, 1996.

[35] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta, and

Y. Bengio. Fitnets: Hints for thin deep nets. In ICLR, 2015.

[36] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma,
Imagenet

Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, et al.
large scale visual recognition challenge. arXiv:1409.0575, 2014.
[37] A. M. Saxe, J. L. McClelland, and S. Ganguli. Exact solutions to
the nonlinear dynamics of learning in deep linear neural networks.
arXiv:1312.6120, 2013.

[38] N. N. Schraudolph. Accelerated gradient descent by factor-centering

decomposition. Technical report, 1998.

[39] N. N. Schraudolph. Centering neural network gradient factors. In
Neural Networks: Tricks of the Trade, pages 207–226. Springer,
1998.

[40] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. Le-
Cun. Overfeat: Integrated recognition, localization and detection
using convolutional networks. In ICLR, 2014.

[41] K. Simonyan and A. Zisserman. Very deep convolutional networks

for large-scale image recognition. In ICLR, 2015.

[42] R. K. Srivastava, K. Greff, and J. Schmidhuber. Highway networks.

arXiv:1505.00387, 2015.

[43] R. K. Srivastava, K. Greff, and J. Schmidhuber. Training very deep

networks. 1507.06228, 2015.

[44] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Er-
han, V. Vanhoucke, and A. Rabinovich. Going deeper with convolu-
tions. In CVPR, 2015.

[45] R. Szeliski. Fast surface interpolation using hierarchical basis func-

tions. TPAMI, 1990.

[46] R. Szeliski. Locally adapted hierarchical basis preconditioning. In

SIGGRAPH, 2006.

[47] T. Vatanen, T. Raiko, H. Valpola, and Y. LeCun. Pushing stochas-
tic gradient towards second-order methods–backpropagation learn-
In Neural Information
ing with transformations in nonlinearities.
Processing, 2013.

[48] A. Vedaldi and B. Fulkerson. VLFeat: An open and portable library

of computer vision algorithms, 2008.

[49] W. Venables and B. Ripley. Modern applied statistics with s-plus.

1999.

[50] M. D. Zeiler and R. Fergus. Visualizing and understanding convolu-

tional neural networks. In ECCV, 2014.

References

[1] Y. Bengio, P. Simard, and P. Frasconi. Learning long-term dependen-
cies with gradient descent is difﬁcult. IEEE Transactions on Neural
Networks, 5(2):157–166, 1994.

[2] C. M. Bishop. Neural networks for pattern recognition. Oxford

university press, 1995.

[3] W. L. Briggs, S. F. McCormick, et al. A Multigrid Tutorial. Siam,

2000.

[4] K. Chatﬁeld, V. Lempitsky, A. Vedaldi, and A. Zisserman. The devil
is in the details: an evaluation of recent feature encoding methods.
In BMVC, 2011.

[5] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zis-
serman. The Pascal Visual Object Classes (VOC) Challenge. IJCV,
pages 303–338, 2010.

[6] S. Gidaris and N. Komodakis. Object detection via a multi-region &

semantic segmentation-aware cnn model. In ICCV, 2015.

[7] R. Girshick. Fast R-CNN. In ICCV, 2015.
[8] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hier-
archies for accurate object detection and semantic segmentation. In
CVPR, 2014.

[9] X. Glorot and Y. Bengio. Understanding the difﬁculty of training

deep feedforward neural networks. In AISTATS, 2010.

[10] I. J. Goodfellow, D. Warde-Farley, M. Mirza, A. Courville, and

Y. Bengio. Maxout networks. arXiv:1302.4389, 2013.

[11] K. He and J. Sun. Convolutional neural networks at constrained time

cost. In CVPR, 2015.

[12] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling in deep
convolutional networks for visual recognition. In ECCV, 2014.
[13] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectiﬁers:
Surpassing human-level performance on imagenet classiﬁcation. In
ICCV, 2015.

[14] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and
R. R. Salakhutdinov. Improving neural networks by preventing co-
adaptation of feature detectors. arXiv:1207.0580, 2012.

[15] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural

computation, 9(8):1735–1780, 1997.

[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep
network training by reducing internal covariate shift. In ICML, 2015.
[17] H. Jegou, M. Douze, and C. Schmid. Product quantization for nearest

neighbor search. TPAMI, 33, 2011.

[18] H. Jegou, F. Perronnin, M. Douze, J. Sanchez, P. Perez, and
C. Schmid. Aggregating local image descriptors into compact codes.
TPAMI, 2012.

[19] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,
S. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for
fast feature embedding. arXiv:1408.5093, 2014.

[20] A. Krizhevsky. Learning multiple layers of features from tiny im-

ages. Tech Report, 2009.

[21] A. Krizhevsky, I. Sutskever, and G. Hinton. Imagenet classiﬁcation

with deep convolutional neural networks. In NIPS, 2012.

[22] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,
W. Hubbard, and L. D. Jackel. Backpropagation applied to hand-
written zip code recognition. Neural computation, 1989.

[23] Y. LeCun, L. Bottou, G. B. Orr, and K.-R. M¨uller. Efﬁcient backprop.
In Neural Networks: Tricks of the Trade, pages 9–50. Springer, 1998.
[24] C.-Y. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu. Deeply-

supervised nets. arXiv:1409.5185, 2014.

[25] M. Lin, Q. Chen, and S. Yan. Network in network. arXiv:1312.4400,

2013.

[26] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan,
P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Common objects in
context. In ECCV. 2014.

[27] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional networks

for semantic segmentation. In CVPR, 2015.

9

A. Object Detection Baselines

In this section we introduce our detection method based
on the baseline Faster R-CNN [32] system. The models are
initialized by the ImageNet classiﬁcation models, and then
ﬁne-tuned on the object detection data. We have experi-
mented with ResNet-50/101 at the time of the ILSVRC &
COCO 2015 detection competitions.

Unlike VGG-16 used in [32], our ResNet has no hidden
fc layers. We adopt the idea of “Networks on Conv fea-
ture maps” (NoC) [33] to address this issue. We compute
the full-image shared conv feature maps using those lay-
ers whose strides on the image are no greater than 16 pixels
(i.e., conv1, conv2 x, conv3 x, and conv4 x, totally 91 conv
layers in ResNet-101; Table 1). We consider these layers as
analogous to the 13 conv layers in VGG-16, and by doing
so, both ResNet and VGG-16 have conv feature maps of the
same total stride (16 pixels). These layers are shared by a
region proposal network (RPN, generating 300 proposals)
[32] and a Fast R-CNN detection network [7]. RoI pool-
ing [7] is performed before conv5 1. On this RoI-pooled
feature, all layers of conv5 x and up are adopted for each
region, playing the roles of VGG-16’s fc layers. The ﬁnal
classiﬁcation layer is replaced by two sibling layers (classi-
ﬁcation and box regression [7]).

For the usage of BN layers, after pre-training, we com-
pute the BN statistics (means and variances) for each layer
on the ImageNet training set. Then the BN layers are ﬁxed
during ﬁne-tuning for object detection. As such, the BN
layers become linear activations with constant offsets and
scales, and BN statistics are not updated by ﬁne-tuning. We
ﬁx the BN layers mainly for reducing memory consumption
in Faster R-CNN training.

PASCAL VOC

Following [7, 32], for the PASCAL VOC 2007 test set,
we use the 5k trainval images in VOC 2007 and 16k train-
val images in VOC 2012 for training (“07+12”). For the
PASCAL VOC 2012 test set, we use the 10k trainval+test
images in VOC 2007 and 16k trainval images in VOC 2012
for training (“07++12”). The hyper-parameters for train-
ing Faster R-CNN are the same as in [32]. Table 7 shows
the results. ResNet-101 improves the mAP by >3% over
VGG-16. This gain is solely because of the improved fea-
tures learned by ResNet.

MS COCO

The MS COCO dataset [26] involves 80 object cate-
gories. We evaluate the PASCAL VOC metric (mAP @
IoU = 0.5) and the standard COCO metric (mAP @ IoU =
.5:.05:.95). We use the 80k images on the train set for train-
ing and the 40k images on the val set for evaluation. Our
detection system for COCO is similar to that for PASCAL
VOC. We train the COCO models with an 8-GPU imple-
mentation, and thus the RPN step has a mini-batch size of

8 images (i.e., 1 per GPU) and the Fast R-CNN step has a
mini-batch size of 16 images. The RPN step and Fast R-
CNN step are both trained for 240k iterations with a learn-
ing rate of 0.001 and then for 80k iterations with 0.0001.

Table 8 shows the results on the MS COCO validation
set. ResNet-101 has a 6% increase of mAP@[.5, .95] over
VGG-16, which is a 28% relative improvement, solely con-
tributed by the features learned by the better network. Re-
markably, the mAP@[.5, .95]’s absolute increase (6.0%) is
nearly as big as mAP@.5’s (6.9%). This suggests that a
deeper network can improve both recognition and localiza-
tion.

B. Object Detection Improvements

For completeness, we report the improvements made for
the competitions. These improvements are based on deep
features and thus should beneﬁt from residual learning.

MS COCO
Box reﬁnement. Our box reﬁnement partially follows the it-
erative localization in [6]. In Faster R-CNN, the ﬁnal output
is a regressed box that is different from its proposal box. So
for inference, we pool a new feature from the regressed box
and obtain a new classiﬁcation score and a new regressed
box. We combine these 300 new predictions with the orig-
inal 300 predictions. Non-maximum suppression (NMS) is
applied on the union set of predicted boxes using an IoU
threshold of 0.3 [8], followed by box voting [6]. Box re-
ﬁnement improves mAP by about 2 points (Table 9).

Global context. We combine global context in the Fast
R-CNN step. Given the full-image conv feature map, we
pool a feature by global Spatial Pyramid Pooling [12] (with
a “single-level” pyramid) which can be implemented as
“RoI” pooling using the entire image’s bounding box as the
RoI. This pooled feature is fed into the post-RoI layers to
obtain a global context feature. This global feature is con-
catenated with the original per-region feature, followed by
the sibling classiﬁcation and box regression layers. This
new structure is trained end-to-end. Global context im-
proves mAP@.5 by about 1 point (Table 9).

Multi-scale testing. In the above, all results are obtained by
single-scale training/testing as in [32], where the image’s
shorter side is s = 600 pixels. Multi-scale training/testing
has been developed in [12, 7] by selecting a scale from a
feature pyramid, and in [33] by using maxout layers.
In
our current implementation, we have performed multi-scale
testing following [33]; we have not performed multi-scale
training because of limited time. In addition, we have per-
formed multi-scale testing only for the Fast R-CNN step
(but not yet for the RPN step). With a trained model, we
compute conv feature maps on an image pyramid, where the
200, 400, 600, 800, 1000
image’s shorter sides are s
.
}

∈ {

10

training data
test data
mAP
baseline Faster R-CNN (VGG-16)
baseline Faster R-CNN (ResNet-101)
+box reﬁnement
+context
+multi-scale testing
ensemble

COCO train
COCO val

@.5
41.5
48.4
49.9
51.1
53.8

@[.5, .95]
21.2
27.2
29.9
30.0
32.5

COCO trainval
COCO test-dev
@.5

@[.5, .95]

53.3
55.7
59.0

32.2
34.9
37.4

Table 9. Object detection improvements on MS COCO using Faster R-CNN and ResNet-101.

system

net
VGG-16
ResNet-101

baseline
baseline
baseline+++ ResNet-101 COCO+07+12

data
07+12
07+12

bird

bike

boat

bottle

mAP areo
73.2 76.5 79.0 70.9 65.5 52.1 83.1 84.7 86.4 52.0 81.9 65.7 84.8 84.6 77.5 76.7 38.8 73.6 73.9 83.0 72.6
76.4 79.8 80.7 76.2 68.3 55.9 85.1 85.3 89.8 56.7 87.8 69.4 88.3 88.9 80.9 78.4 41.7 78.6 79.8 85.3 72.0
85.6 90.0 89.6 87.8 80.8 76.1 89.9 89.9 89.6 75.5 90.0 80.7 89.6 90.3 89.1 88.7 65.4 88.1 85.6 89.0 86.8

horse mbike person plant

cow table

sheep

chair

train

sofa

dog

bus

car

cat

tv

Table 10. Detection results on the PASCAL VOC 2007 test set. The baseline is the Faster R-CNN system. The system “baseline+++”
include box reﬁnement, context, and multi-scale testing in Table 9.

system

mAP areo
70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5
baseline
baseline
73.8 86.5 81.6 77.2 58.0 51.0 78.6 76.6 93.2 48.6 80.4 59.0 92.1 85.3 84.8 80.7 48.1 77.3 66.5 84.7 65.6
baseline+++ ResNet-101 COCO+07++12 83.8 92.1 88.4 84.8 75.9 71.4 86.3 87.8 94.2 66.8 89.4 69.2 93.9 91.9 90.9 89.6 67.9 88.2 76.8 90.3 80.0

net
VGG-16
ResNet-101

data
07++12
07++12

horse mbike person plant

cow table

bottle

sheep

chair

train

boat

bike

sofa

bird

dog

bus

car

cat

tv

Table 11. Detection results on the PASCAL VOC 2012 test set (http://host.robots.ox.ac.uk:8080/leaderboard/
displaylb.php?challengeid=11&compid=4). The baseline is the Faster R-CNN system. The system “baseline+++” include
box reﬁnement, context, and multi-scale testing in Table 9.

We select two adjacent scales from the pyramid following
[33]. RoI pooling and subsequent layers are performed on
the feature maps of these two scales [33], which are merged
by maxout as in [33]. Multi-scale testing improves the mAP
by over 2 points (Table 9).

Using validation data. Next we use the 80k+40k trainval set
for training and the 20k test-dev set for evaluation. The test-
dev set has no publicly available ground truth and the result
is reported by the evaluation server. Under this setting, the
results are an mAP@.5 of 55.7% and an mAP@[.5, .95] of
34.9% (Table 9). This is our single-model result.

Ensemble. In Faster R-CNN, the system is designed to learn
region proposals and also object classiﬁers, so an ensemble
can be used to boost both tasks. We use an ensemble for
proposing regions, and the union set of proposals are pro-
cessed by an ensemble of per-region classiﬁers. Table 9
shows our result based on an ensemble of 3 networks. The
mAP is 59.0% and 37.4% on the test-dev set. This result
won the 1st place in the detection task in COCO 2015.

PASCAL VOC

We revisit the PASCAL VOC dataset based on the above
model. With the single model on the COCO dataset (55.7%
mAP@.5 in Table 9), we ﬁne-tune this model on the PAS-
CAL VOC sets. The improvements of box reﬁnement, con-
text, and multi-scale testing are also adopted. By doing so

GoogLeNet [44] (ILSVRC’14)

our single model (ILSVRC’15)
our ensemble (ILSVRC’15)

val2

-

60.5
63.6

test

43.9

58.8
62.1

Table 12. Our results (mAP, %) on the ImageNet detection dataset.
Our detection system is Faster R-CNN [32] with the improvements
in Table 9, using ResNet-101.

we achieve 85.6% mAP on PASCAL VOC 2007 (Table 10)
and 83.8% on PASCAL VOC 2012 (Table 11)6. The result
on PASCAL VOC 2012 is 10 points higher than the previ-
ous state-of-the-art result [6].

ImageNet Detection

The ImageNet Detection (DET) task involves 200 object
categories. The accuracy is evaluated by mAP@.5. Our
object detection algorithm for ImageNet DET is the same
as that for MS COCO in Table 9. The networks are pre-
trained on the 1000-class ImageNet classiﬁcation set, and
are ﬁne-tuned on the DET data. We split the validation set
into two parts (val1/val2) following [8]. We ﬁne-tune the
detection models using the DET training set and the val1
set. The val2 set is used for validation. We do not use other
ILSVRC 2015 data. Our single model with ResNet-101 has

6http://host.robots.ox.ac.uk:8080/anonymous/3OJ4OJ.html,

submitted on 2015-11-26.

11

testing

LOC
method

LOC
network
VGG’s [41] VGG-16

RPN
RPN
RPN

1-crop
ResNet-101 1-crop
ResNet-101 dense
ResNet-101 dense
RPN+RCNN ResNet-101 dense
RPN+RCNN ensemble
dense

LOC error
on GT CLS
33.1 [41]
13.3
11.7

classiﬁcation
network

top-5 LOC error
on predicted CLS

method

ResNet-101
ResNet-101
ensemble

14.4
10.6
8.9

OverFeat [40] (ILSVRC’13)
GoogLeNet [44] (ILSVRC’14)
VGG [41] (ILSVRC’14)
ours (ILSVRC’15)

top-5 localization err
val
30.0
-
26.9
8.9

test
29.9
26.7
25.3
9.0

Table 13. Localization error (%) on the ImageNet validation. In
the column of “LOC error on GT class” ([41]), the ground truth
class is used. In the “testing” column, “1-crop” denotes testing
on a center crop of 224×224 pixels, “dense” denotes dense (fully
convolutional) and multi-scale testing.

58.8% mAP and our ensemble of 3 models has 62.1% mAP
on the DET test set (Table 12). This result won the 1st place
in the ImageNet detection task in ILSVRC 2015, surpassing
the second place by 8.5 points (absolute).

C. ImageNet Localization

The ImageNet Localization (LOC) task [36] requires to
classify and localize the objects. Following [40, 41], we
assume that the image-level classiﬁers are ﬁrst adopted for
predicting the class labels of an image, and the localiza-
tion algorithm only accounts for predicting bounding boxes
based on the predicted classes. We adopt the “per-class re-
gression” (PCR) strategy [40, 41], learning a bounding box
regressor for each class. We pre-train the networks for Im-
ageNet classiﬁcation and then ﬁne-tune them for localiza-
tion. We train networks on the provided 1000-class Ima-
geNet training set.

×

Our localization algorithm is based on the RPN frame-
work of [32] with a few modiﬁcations. Unlike the way in
[32] that is category-agnostic, our RPN for localization is
designed in a per-class form. This RPN ends with two sib-
1 convolutional layers for binary classiﬁcation (cls)
ling 1
and box regression (reg), as in [32]. The cls and reg layers
are both in a per-class from, in contrast to [32]. Speciﬁ-
cally, the cls layer has a 1000-d output, and each dimension
is binary logistic regression for predicting being or not be-
ing an object class; the reg layer has a 1000
4-d output
consisting of box regressors for 1000 classes. As in [32],
our bounding box regression is with reference to multiple
translation-invariant “anchor” boxes at each position.

×

×

As in our ImageNet classiﬁcation training (Sec. 3.4), we
randomly sample 224
224 crops for data augmentation.
We use a mini-batch size of 256 images for ﬁne-tuning. To
avoid negative samples being dominate, 8 anchors are ran-
domly sampled for each image, where the sampled positive
and negative anchors have a ratio of 1:1 [32]. For testing,
the network is applied on the image fully-convolutionally.

Table 13 compares the localization results. Following
[41], we ﬁrst perform “oracle” testing using the ground truth
class as the classiﬁcation prediction. VGG’s paper [41] re-

12

Table 14. Comparisons of localization error (%) on the ImageNet
dataset with state-of-the-art methods.

ports a center-crop error of 33.1% (Table 13) using ground
truth classes. Under the same setting, our RPN method us-
ing ResNet-101 net signiﬁcantly reduces the center-crop er-
ror to 13.3%. This comparison demonstrates the excellent
performance of our framework. With dense (fully convolu-
tional) and multi-scale testing, our ResNet-101 has an error
of 11.7% using ground truth classes. Using ResNet-101 for
predicting classes (4.6% top-5 classiﬁcation error, Table 4),
the top-5 localization error is 14.4%.

The above results are only based on the proposal network
(RPN) in Faster R-CNN [32]. One may use the detection
network (Fast R-CNN [7]) in Faster R-CNN to improve the
results. But we notice that on this dataset, one image usually
contains a single dominate object, and the proposal regions
highly overlap with each other and thus have very similar
RoI-pooled features. As a result, the image-centric training
of Fast R-CNN [7] generates samples of small variations,
which may not be desired for stochastic training. Motivated
by this, in our current experiment we use the original R-
CNN [8] that is RoI-centric, in place of Fast R-CNN.

Our R-CNN implementation is as follows. We apply the
per-class RPN trained as above on the training images to
predict bounding boxes for the ground truth class. These
predicted boxes play a role of class-dependent proposals.
For each training image, the highest scored 200 proposals
are extracted as training samples to train an R-CNN classi-
ﬁer. The image region is cropped from a proposal, warped
to 224
224 pixels, and fed into the classiﬁcation network
as in R-CNN [8]. The outputs of this network consist of two
sibling fc layers for cls and reg, also in a per-class form.
This R-CNN network is ﬁne-tuned on the training set us-
ing a mini-batch size of 256 in the RoI-centric fashion. For
testing, the RPN generates the highest scored 200 proposals
for each predicted class, and the R-CNN network is used to
update these proposals’ scores and box positions.

×

This method reduces the top-5 localization error to
10.6% (Table 13). This is our single-model result on the
validation set. Using an ensemble of networks for both clas-
siﬁcation and localization, we achieve a top-5 localization
error of 9.0% on the test set. This number signiﬁcantly out-
performs the ILSVRC 14 results (Table 14), showing a 64%
relative reduction of error. This result won the 1st place in
the ImageNet localization task in ILSVRC 2015.

"
3,GPT3.pdf,"Language Models are Few-Shot Learners

Tom B. Brown∗

Benjamin Mann∗

Nick Ryder∗

Melanie Subbiah∗

Jared Kaplan†

Prafulla Dhariwal

Arvind Neelakantan

Pranav Shyam

Girish Sastry

Amanda Askell

Sandhini Agarwal

Ariel Herbert-Voss

Gretchen Krueger

Tom Henighan

Rewon Child

Aditya Ramesh

Daniel M. Ziegler

Jeffrey Wu

Clemens Winter

Christopher Hesse

Mark Chen

Eric Sigler

Mateusz Litwin

Scott Gray

Benjamin Chess

Jack Clark

Christopher Berner

Sam McCandlish

Alec Radford

Ilya Sutskever

Dario Amodei

OpenAI

Abstract

Recent work has demonstrated substantial gains on many NLP tasks and benchmarks by pre-training
on a large corpus of text followed by ﬁne-tuning on a speciﬁc task. While typically task-agnostic
in architecture, this method still requires task-speciﬁc ﬁne-tuning datasets of thousands or tens of
thousands of examples. By contrast, humans can generally perform a new language task from only
a few examples or from simple instructions – something which current NLP systems still largely
struggle to do. Here we show that scaling up language models greatly improves task-agnostic,
few-shot performance, sometimes even reaching competitiveness with prior state-of-the-art ﬁne-
tuning approaches. Speciﬁcally, we train GPT-3, an autoregressive language model with 175 billion
parameters, 10x more than any previous non-sparse language model, and test its performance in
the few-shot setting. For all tasks, GPT-3 is applied without any gradient updates or ﬁne-tuning,
with tasks and few-shot demonstrations speciﬁed purely via text interaction with the model. GPT-3
achieves strong performance on many NLP datasets, including translation, question-answering, and
cloze tasks, as well as several tasks that require on-the-ﬂy reasoning or domain adaptation, such as
unscrambling words, using a novel word in a sentence, or performing 3-digit arithmetic. At the same
time, we also identify some datasets where GPT-3’s few-shot learning still struggles, as well as some
datasets where GPT-3 faces methodological issues related to training on large web corpora. Finally,
we ﬁnd that GPT-3 can generate samples of news articles which human evaluators have difﬁculty
distinguishing from articles written by humans. We discuss broader societal impacts of this ﬁnding
and of GPT-3 in general.

0
2
0
2

l
u
J

2
2

]
L
C
.
s
c
[

4
v
5
6
1
4
1
.
5
0
0
2
:
v
i
X
r
a

∗Equal contribution
†Johns Hopkins University, OpenAI

Author contributions listed at end of paper.

 
 
 
 
 
 
Contents

1 Introduction

2 Approach

2.1 Model and Architectures .
.
2.2 Training Dataset .
.
2.3 Training Process
.
.
2.4 Evaluation .

.
.
.

.
.
.

.
.
.

.
.
.

.

.

.
.
.
.

.
.
.
.

.
.
.
.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.

3 Results

.

.

.

.
.

. . . . . . . . . . . . . . . . . . . . . . . . . .

3.1 Language Modeling, Cloze, and Completion Tasks
3.2 Closed Book Question Answering .
.
.
.
.
3.3 Translation .
.
3.4 Winograd-Style Tasks .
.
.
3.5 Common Sense Reasoning .
.
.
3.6 Reading Comprehension .
.
.
.
3.7 SuperGLUE .
3.8 NLI
.
.
.
.
3.9 Synthetic and Qualitative Tasks .

.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

.
.
.
.
.
.

.
.

.
.

.
.

.
.

.
.

.
.

.
.

.

.

.

.

4 Measuring and Preventing Memorization Of Benchmarks

5 Limitations

6 Broader Impacts

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6.1 Misuse of Language Models
6.2 Fairness, Bias, and Representation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6.3 Energy Usage .

.

.

.

.

.

.

.

.

.

.

.

.

.

7 Related Work

8 Conclusion

A Details of Common Crawl Filtering

B Details of Model Training

C Details of Test Set Contamination Studies

D Total Compute Used to Train Language Models

E Human Quality Assessment of Synthetic News Articles

F Additional Samples from GPT-3

G Details of Task Phrasing and Speciﬁcations

H Results on All Tasks for All Model Sizes

2

3

6
8
8
9
10

10
11
13
14
16
17
18
18
20
21

29

33

34
35
36
39

39

40

43

43

43

46

46

48

50

63

1

Introduction

Recent years have featured a trend towards pre-trained language representations in NLP systems, applied in increasingly
ﬂexible and task-agnostic ways for downstream transfer. First, single-layer representations were learned using word
vectors [MCCD13, PSM14] and fed to task-speciﬁc architectures, then RNNs with multiple layers of representations
and contextual state were used to form stronger representations [DL15, MBXS17, PNZtY18] (though still applied to
task-speciﬁc architectures), and more recently pre-trained recurrent or transformer language models [VSP+17] have
been directly ﬁne-tuned, entirely removing the need for task-speciﬁc architectures [RNSS18, DCLT18, HR18].

This last paradigm has led to substantial progress on many challenging NLP tasks such as reading comprehension,
question answering, textual entailment, and many others, and has continued to advance based on new architectures
and algorithms [RSR+19, LOG+19, YDY+19, LCG+19]. However, a major limitation to this approach is that while
the architecture is task-agnostic, there is still a need for task-speciﬁc datasets and task-speciﬁc ﬁne-tuning: to achieve
strong performance on a desired task typically requires ﬁne-tuning on a dataset of thousands to hundreds of thousands
of examples speciﬁc to that task. Removing this limitation would be desirable, for several reasons.

First, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the
applicability of language models. There exists a very wide range of possible useful language tasks, encompassing
anything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many
of these tasks it is difﬁcult to collect a large supervised training dataset, especially when the process must be repeated
for every new task.

Second, the potential to exploit spurious correlations in training data fundamentally grows with the expressiveness
of the model and the narrowness of the training distribution. This can create problems for the pre-training plus
ﬁne-tuning paradigm, where models are designed to be large to absorb information during pre-training, but are then
ﬁne-tuned on very narrow task distributions. For instance [HLW+20] observe that larger models do not necessarily
generalize better out-of-distribution. There is evidence that suggests that the generalization achieved under this paradigm
can be poor because the model is overly speciﬁc to the training distribution and does not generalize well outside it
[YdC+19, MPL19]. Thus, the performance of ﬁne-tuned models on speciﬁc benchmarks, even when it is nominally at
human-level, may exaggerate actual performance on the underlying task [GSL+18, NK19].

Third, humans do not require large supervised datasets to learn most language tasks – a brief directive in natural
language (e.g. “please tell me if this sentence describes something happy or something sad”) or at most a tiny number
of demonstrations (e.g. “here are two examples of people acting brave; please give a third example of bravery”) is often

Figure 1.1: Language model meta-learning. During unsupervised pre-training, a language model develops a broad
set of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize
the desired task. We use the term “in-context learning” to describe the inner loop of this process, which occurs within
the forward-pass upon each sequence. The sequences in this diagram are not intended to be representative of the data a
model would see during pre-training, but are intended to show that there are sometimes repeated sub-tasks embedded
within a single sequence.

3

Figure 1.2: Larger models make increasingly efﬁcient use of in-context information. We show in-context learning
performance on a simple task requiring the model to remove random symbols from a word, both with and without a
natural language task description (see Sec. 3.9.2). The steeper “in-context learning curves” for large models demonstrate
improved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range
of tasks.

sufﬁcient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing
to a conceptual limitation in our current NLP techniques, this adaptability has practical advantages – it allows humans
to seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy
dialogue. To be broadly useful, we would someday like our NLP systems to have this same ﬂuidity and generality.
One potential route towards addressing these issues is meta-learning1 – which in the context of language models means
the model develops a broad set of skills and pattern recognition abilities at training time, and then uses those abilities
at inference time to rapidly adapt to or recognize the desired task (illustrated in Figure 1.1). Recent work [RWC+19]
attempts to do this via what we call “in-context learning”, using the text input of a pretrained language model as a form
of task speciﬁcation: the model is conditioned on a natural language instruction and/or a few demonstrations of the task
and is then expected to complete further instances of the task simply by predicting what comes next.

While it has shown some initial promise, this approach still achieves results far inferior to ﬁne-tuning – for example
[RWC+19] achieves only 4% on Natural Questions, and even its 55 F1 CoQa result is now more than 35 points behind
the state of the art. Meta-learning clearly requires substantial improvement in order to be viable as a practical method of
solving language tasks.

Another recent trend in language modeling may offer a way forward. In recent years the capacity of transformer
language models has increased substantially, from 100 million parameters [RNSS18], to 300 million parameters
[DCLT18], to 1.5 billion parameters [RWC+19], to 8 billion parameters [SPP+19], 11 billion parameters [RSR+19],
and ﬁnally 17 billion parameters [Tur20]. Each increase has brought improvements in text synthesis and/or downstream
NLP tasks, and there is evidence suggesting that log loss, which correlates well with many downstream tasks, follows a
smooth trend of improvement with scale [KMH+20]. Since in-context learning involves absorbing many skills and
tasks within the parameters of the model, it is plausible that in-context learning abilities might show similarly strong
gains with scale.

1In the context of language models this has sometimes been called “zero-shot transfer”, but this term is potentially ambiguous:
the method is “zero-shot” in the sense that no gradient updates are performed, but it often involves providing inference-time
demonstrations to the model, so is not truly learning from zero examples. To avoid this confusion, we use the term “meta-learning”
to capture the inner-loop / outer-loop structure of the general method, and the term “in context-learning” to refer to the inner
loop of meta-learning. We further specialize the description to “zero-shot”, “one-shot”, or “few-shot” depending on how many
demonstrations are provided at inference time. These terms are intended to remain agnostic on the question of whether the model
learns new tasks from scratch at inference time or simply recognizes patterns seen during training – this is an important issue which
we discuss later in the paper, but “meta-learning” is intended to encompass both possibilities, and simply describes the inner-outer
loop structure.

4

Figure 1.3: Aggregate performance for all 42 accuracy-denominated benchmarks While zero-shot performance
improves steadily with model size, few-shot performance increases more rapidly, demonstrating that larger models are
more proﬁcient at in-context learning. See Figure 3.8 for a more detailed analysis on SuperGLUE, a standard NLP
benchmark suite.

In this paper, we test this hypothesis by training a 175 billion parameter autoregressive language model, which we call
GPT-3, and measuring its in-context learning abilities. Speciﬁcally, we evaluate GPT-3 on over two dozen NLP datasets,
as well as several novel tasks designed to test rapid adaptation to tasks unlikely to be directly contained in the training
set. For each task, we evaluate GPT-3 under 3 conditions: (a) “few-shot learning”, or in-context learning where we
allow as many demonstrations as will ﬁt into the model’s context window (typically 10 to 100), (b) “one-shot learning”,
where we allow only one demonstration, and (c) “zero-shot” learning, where no demonstrations are allowed and only
an instruction in natural language is given to the model. GPT-3 could also in principle be evaluated in the traditional
ﬁne-tuning setting, but we leave this to future work.

Figure 1.2 illustrates the conditions we study, and shows few-shot learning of a simple task requiring the model to
remove extraneous symbols from a word. Model performance improves with the addition of a natural language task
description, and with the number of examples in the model’s context, K. Few-shot learning also improves dramatically
with model size. Though the results in this case are particularly striking, the general trends with both model size and
number of examples in-context hold for most tasks we study. We emphasize that these “learning” curves involve no
gradient updates or ﬁne-tuning, just increasing numbers of demonstrations given as conditioning.

Broadly, on NLP tasks GPT-3 achieves promising results in the zero-shot and one-shot settings, and in the the few-shot
setting is sometimes competitive with or even occasionally surpasses state-of-the-art (despite state-of-the-art being held
by ﬁne-tuned models). For example, GPT-3 achieves 81.5 F1 on CoQA in the zero-shot setting, 84.0 F1 on CoQA in
the one-shot setting, 85.0 F1 in the few-shot setting. Similarly, GPT-3 achieves 64.3% accuracy on TriviaQA in the
zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting, the last of which is state-of-the-art
relative to ﬁne-tuned models operating in the same closed-book setting.

GPT-3 also displays one-shot and few-shot proﬁciency at tasks designed to test rapid adaption or on-the-ﬂy reasoning,
which include unscrambling words, performing arithmetic, and using novel words in a sentence after seeing them
deﬁned only once. We also show that in the few-shot setting, GPT-3 can generate synthetic news articles which human
evaluators have difﬁculty distinguishing from human-generated articles.

At the same time, we also ﬁnd some tasks on which few-shot performance struggles, even at the scale of GPT-3. This
includes natural language inference tasks like the ANLI dataset, and some reading comprehension datasets like RACE
or QuAC. By presenting a broad characterization of GPT-3’s strengths and weaknesses, including these limitations, we
hope to stimulate study of few-shot learning in language models and draw attention to where progress is most needed.

A heuristic sense of the overall results can be seen in Figure 1.3, which aggregates the various tasks (though it should
not be seen as a rigorous or meaningful benchmark in itself).

5

We also undertake a systematic study of “data contamination” – a growing problem when training high capacity models
on datasets such as Common Crawl, which can potentially include content from test datasets simply because such
content often exists on the web. In this paper we develop systematic tools to measure data contamination and quantify
its distorting effects. Although we ﬁnd that data contamination has a minimal effect on GPT-3’s performance on most
datasets, we do identify a few datasets where it could be inﬂating results, and we either do not report results on these
datasets or we note them with an asterisk, depending on the severity.

In addition to all the above, we also train a series of smaller models (ranging from 125 million parameters to 13 billion
parameters) in order to compare their performance to GPT-3 in the zero, one and few-shot settings. Broadly, for most
tasks we ﬁnd relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap
between zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models
are more proﬁcient meta-learners.

Finally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and
broader societal impacts, and attempt a preliminary analysis of GPT-3’s characteristics in this regard.

The remainder of this paper is organized as follows. In Section 2, we describe our approach and methods for training
GPT-3 and evaluating it. Section 3 presents results on the full range of tasks in the zero-, one- and few-shot settings.
Section 4 addresses questions of data contamination (train-test overlap). Section 5 discusses limitations of GPT-3.
Section 6 discusses broader impacts. Section 7 reviews related work and Section 8 concludes.

2 Approach

Our basic pre-training approach, including model, data, and training, is similar to the process described in [RWC+19],
with relatively straightforward scaling up of the model size, dataset size and diversity, and length of training. Our use
of in-context learning is also similar to [RWC+19], but in this work we systematically explore different settings for
learning within the context. Therefore, we start this section by explicitly deﬁning and contrasting the different settings
that we will be evaluating GPT-3 on or could in principle evaluate GPT-3 on. These settings can be seen as lying on a
spectrum of how much task-speciﬁc data they tend to rely on. Speciﬁcally, we can identify at least four points on this
spectrum (see Figure 2.1 for an illustration):

• Fine-Tuning (FT) has been the most common approach in recent years, and involves updating the weights of
a pre-trained model by training on a supervised dataset speciﬁc to the desired task. Typically thousands to
hundreds of thousands of labeled examples are used. The main advantage of ﬁne-tuning is strong performance
on many benchmarks. The main disadvantages are the need for a new large dataset for every task, the potential
for poor generalization out-of-distribution [MPL19], and the potential to exploit spurious features of the
training data [GSL+18, NK19], potentially resulting in an unfair comparison with human performance. In
this work we do not ﬁne-tune GPT-3 because our focus is on task-agnostic performance, but GPT-3 can be
ﬁne-tuned in principle and this is a promising direction for future work.

• Few-Shot (FS) is the term we will use in this work to refer to the setting where the model is given a few
demonstrations of the task at inference time as conditioning [RWC+19], but no weight updates are allowed.
As shown in Figure 2.1, for a typical dataset an example has a context and a desired completion (for example
an English sentence and the French translation), and few-shot works by giving K examples of context and
completion, and then one ﬁnal example of context, with the model expected to provide the completion. We
typically set K in the range of 10 to 100 as this is how many examples can ﬁt in the model’s context window
(nctx = 2048). The main advantages of few-shot are a major reduction in the need for task-speciﬁc data and
reduced potential to learn an overly narrow distribution from a large but narrow ﬁne-tuning dataset. The main
disadvantage is that results from this method have so far been much worse than state-of-the-art ﬁne-tuned
models. Also, a small amount of task speciﬁc data is still required. As indicated by the name, few-shot
learning as described here for language models is related to few-shot learning as used in other contexts in
ML [HYC01, VBL+16] – both involve learning based on a broad distribution of tasks (in this case implicit in
the pre-training data) and then rapidly adapting to a new task.

• One-Shot (1S) is the same as few-shot except that only one demonstration is allowed, in addition to a natural
language description of the task, as shown in Figure 1. The reason to distinguish one-shot from few-shot and
zero-shot (below) is that it most closely matches the way in which some tasks are communicated to humans.
For example, when asking humans to generate a dataset on a human worker service (for example Mechanical
Turk), it is common to give one demonstration of the task. By contrast it is sometimes difﬁcult to communicate
the content or format of a task if no examples are given.

6

Figure 2.1: Zero-shot, one-shot and few-shot, contrasted with traditional ﬁne-tuning. The panels above show
four methods for performing a task with a language model – ﬁne-tuning is the traditional method, whereas zero-, one-,
and few-shot, which we study in this work, require the model to perform the task with only forward passes at test
time. We typically present the model with a few dozen examples in the few shot setting. Exact phrasings for all task
descriptions, examples and prompts can be found in Appendix G.

• Zero-Shot (0S) is the same as one-shot except that no demonstrations are allowed, and the model is only given
a natural language instruction describing the task. This method provides maximum convenience, potential for
robustness, and avoidance of spurious correlations (unless they occur very broadly across the large corpus of
pre-training data), but is also the most challenging setting. In some cases it may even be difﬁcult for humans
to understand the format of the task without prior examples, so this setting is in some cases “unfairly hard”.
For example, if someone is asked to “make a table of world records for the 200m dash”, this request can be
ambiguous, as it may not be clear exactly what format the table should have or what should be included (and
even with careful clariﬁcation, understanding precisely what is desired can be difﬁcult). Nevertheless, for at
least some settings zero-shot is closest to how humans perform tasks – for example, in the translation example
in Figure 2.1, a human would likely know what to do from just the text instruction.

Figure 2.1 shows the four methods using the example of translating English to French. In this paper we focus on
zero-shot, one-shot and few-shot, with the aim of comparing them not as competing alternatives, but as different
problem settings which offer a varying trade-off between performance on speciﬁc benchmarks and sample efﬁciency.
We especially highlight the few-shot results as many of them are only slightly behind state-of-the-art ﬁne-tuned models.
Ultimately, however, one-shot, or even sometimes zero-shot, seem like the fairest comparisons to human performance,
and are important targets for future work.

Sections 2.1-2.3 below give details on our models, training data, and training process respectively. Section 2.4 discusses
the details of how we do few-shot, one-shot, and zero-shot evaluations.

7

Model Name

nparams

nlayers

dmodel

nheads

dhead Batch Size Learning Rate

GPT-3 Small
GPT-3 Medium
GPT-3 Large
GPT-3 XL
GPT-3 2.7B
GPT-3 6.7B
GPT-3 13B
GPT-3 175B or “GPT-3”

125M
350M
760M
1.3B
2.7B
6.7B
13.0B
175.0B

12
24
24
24
32
32
40
96

768
1024
1536
2048
2560
4096
5140
12288

12
16
16
24
32
32
40
96

64
64
96
128
80
128
128
128

0.5M
0.5M
0.5M
1M
1M
2M
2M
3.2M

6.0 × 10−4
3.0 × 10−4
2.5 × 10−4
2.0 × 10−4
1.6 × 10−4
1.2 × 10−4
1.0 × 10−4
0.6 × 10−4

Table 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models
which we trained. All models were trained for a total of 300 billion tokens.

2.1 Model and Architectures

We use the same model and architecture as GPT-2 [RWC+19], including the modiﬁed initialization, pre-normalization,
and reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse
attention patterns in the layers of the transformer, similar to the Sparse Transformer [CGRS19]. To study the dependence
of ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125
million parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work [KMH+20]
suggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a
function of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for
downstream language tasks.

Table 2.1 shows the sizes and architectures of our 8 models. Here nparams is the total number of trainable parameters,
nlayers is the total number of layers, dmodel is the number of units in each bottleneck layer (we always have the
feedforward layer four times the size of the bottleneck layer, dﬀ = 4 ∗ dmodel), and dhead is the dimension of each
attention head. All models use a context window of nctx = 2048 tokens. We partition the model across GPUs along
both the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural
parameters for each model are chosen based on computational efﬁciency and load-balancing in the layout of models
across GPU’s. Previous work [KMH+20] suggests that validation loss is not strongly sensitive to these parameters
within a reasonably broad range.

2.2 Training Dataset

Datasets for language models have rapidly expanded, culminating in the Common Crawl dataset2 [RSR+19] constituting
nearly a trillion words. This size of dataset is sufﬁcient to train our largest models without ever updating on the same
sequence twice. However, we have found that unﬁltered or lightly ﬁltered versions of Common Crawl tend to have
lower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets:
(1) we downloaded and ﬁltered a version of CommonCrawl based on similarity to a range of high-quality reference
corpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy
and preserve the integrity of our held-out validation set as an accurate measure of overﬁtting, and (3) we also added
known high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.

Details of the ﬁrst two points (processing of Common Crawl) are described in Appendix A. For the third, we added
several curated high-quality datasets, including an expanded version of the WebText dataset [RWC+19], collected
by scraping links over a longer period of time, and ﬁrst described in [KMH+20], two internet-based books corpora
(Books1 and Books2) and English-language Wikipedia.

Table 2.2 shows the ﬁnal mixture of datasets that we used in training. The CommonCrawl data was downloaded from
41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before ﬁltering
and 570GB after ﬁltering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets
are not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently,
such that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are
sampled 2-3 times. This essentially accepts a small amount of overﬁtting in exchange for higher quality training data.

2https://commoncrawl.org/the-data/

8

Figure 2.2: Total compute used during training. Based on the analysis in Scaling Laws For Neural Language Models
[KMH+20] we train much larger models on many fewer tokens than is typical. As a consequence, although GPT-3 3B
is almost 10x larger than RoBERTa-Large (355M params), both models took roughly 50 petaﬂop/s-days of compute
during pre-training. Methodology for these calculations can be found in Appendix D.

Dataset

Quantity
(tokens)

Weight in
training mix

Epochs elapsed when
training for 300B tokens

Common Crawl (ﬁltered)
WebText2
Books1
Books2
Wikipedia

410 billion
19 billion
12 billion
55 billion
3 billion

60%
22%
8%
8%
3%

0.44
2.9
1.9
0.43
3.4

Table 2.2: Datasets used to train GPT-3. “Weight in training mix” refers to the fraction of examples during training
that are drawn from a given dataset, which we intentionally do not make proportional to the size of the dataset. As a
result, when we train for 300 billion tokens, some datasets are seen up to 3.4 times during training while other datasets
are seen less than once.

A major methodological concern with language models pretrained on a broad swath of internet data, particularly large
models with the capacity to memorize vast amounts of content, is potential contamination of downstream tasks by
having their test or development sets inadvertently seen during pre-training. To reduce such contamination, we searched
for and attempted to remove any overlaps with the development and test sets of all benchmarks studied in this paper.
Unfortunately, a bug in the ﬁltering caused us to ignore some overlaps, and due to the cost of training it was not feasible
to retrain the model. In Section 4 we characterize the impact of the remaining overlaps, and in future work we will
more aggressively remove data contamination.

2.3 Training Process

As found in [KMH+20, MKAT18], larger models can typically use a larger batch size, but require a smaller learning
rate. We measure the gradient noise scale during training and use it to guide our choice of batch size [MKAT18]. Table
2.1 shows the parameter settings we used. To train the larger models without running out of memory, we use a mixture
of model parallelism within each matrix multiply and model parallelism across the layers of the network. All models
were trained on V100 GPU’s on part of a high-bandwidth cluster provided by Microsoft. Details of the training process
and hyperparameter settings are described in Appendix B.

9

2.4 Evaluation

For few-shot learning, we evaluate each example in the evaluation set by randomly drawing K examples from that
task’s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze
there is no supervised training set available so we draw conditioning examples from the development set and evaluate
on the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning
examples directly from it.

K can be any value from 0 to the maximum amount allowed by the model’s context window, which is nctx = 2048
for all models and typically ﬁts 10 to 100 examples. Larger values of K are usually but not always better, so when a
separate development and test set are available, we experiment with a few values of K on the development set and then
run the best value on the test set. For some tasks (see Appendix G) we also use a natural language prompt in addition to
(or for K = 0, instead of) demonstrations.

On tasks that involve choosing one correct completion from several options (multiple choice), we provide K examples
of context plus correct completion, followed by one example of context only, and compare the LM likelihood of
each completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small
number of datasets (ARC, OpenBookQA, and RACE) we gain additional beneﬁt as measured on the development set
by normalizing by the unconditional probability of each completion, by computing
P (completion|answer context) , where
answer context is the string ""Answer:
"" or ""A: "" and is used to prompt that the completion should be an answer
but is otherwise generic.

P (completion|context)

On tasks that involve binary classiﬁcation, we give the options more semantically meaningful names (e.g. “True” or
“False” rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what
is done by [RSR+19] (see Appendix G) for details.
On tasks with free-form completion, we use beam search with the same parameters as [RSR+19]: a beam width of 4
and a length penalty of α = 0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on
what is standard for the dataset at hand.

Final results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-,
and few-shot). When the test set is private, our model is often too large to ﬁt on the test server, so we report results on
the development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa)
where we were able to make submission work, and we submit only the 200B few-shot results, and report development
set results for everything else.

3 Results

In Figure 3.1 we display training curves for the 8 models described in Section 2. For this graph we also include 6
additional extra-small models with as few as 100,000 parameters. As observed in [KMH+20], language modeling
performance follows a power-law when making efﬁcient use of training compute. After extending this trend by two
more orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these
improvements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will
see in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a
broad spectrum of natural language tasks.

Below, we evaluate the 8 models described in Section 2 (the 175 billion parameter parameter GPT-3 and 7 smaller
models) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.

In Section 3.1 we evaluate on traditional language modeling tasks and tasks that are similar to language modeling,
such as Cloze tasks and sentence/paragraph completion tasks. In Section 3.2 we evaluate on “closed book” question
answering tasks: tasks which require using the information stored in the model’s parameters to answer general
knowledge questions. In Section 3.3 we evaluate the model’s ability to translate between languages (especially one-shot
and few-shot). In Section 3.4 we evaluate the model’s performance on Winograd Schema-like tasks. In Section 3.5 we
evaluate on datasets that involve commonsense reasoning or question answering. In Section 3.6 we evaluate on reading
comprehension tasks, in Section 3.7 we evaluate on the SuperGLUE benchmark suite, and in 3.8 we brieﬂy explore
NLI. Finally, in Section 3.9, we invent some additional tasks designed especially to probe in-context learning abilities –
these tasks focus on on-the-ﬂy reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the
few-shot, one-shot, and zero-shot settings.

10

Figure 3.1: Smooth scaling of performance with compute. Performance (measured in terms of cross-entropy
validation loss) follows a power-law trend with the amount of compute used for training. The power-law behavior
observed in [KMH+20] continues for an additional two orders of magnitude with only small deviations from the
predicted curve. For this ﬁgure, we exclude embedding parameters from compute and parameter counts.

Setting

SOTA (Zero-Shot)
GPT-3 Zero-Shot

PTB
35.8a
20.5

Table 3.1: Zero-shot results on PTB language modeling dataset. Many other common language modeling datasets
are omitted because they are derived from Wikipedia or other sources which are included in GPT-3’s training data.
a[RWC+19]

3.1 Language Modeling, Cloze, and Completion Tasks

In this section we test GPT-3’s performance on the traditional task of language modeling, as well as related tasks
that involve predicting a single word of interest, completing a sentence or paragraph, or choosing between possible
completions of a piece of text.

3.1.1 Language Modeling

We calculate zero-shot perplexity on the Penn Tree Bank (PTB) [MKM+94] dataset measured in [RWC+19]. We omit
the 4 Wikipedia-related tasks in that work because they are entirely contained in our training data, and we also omit the
one-billion word benchmark due to a high fraction of the dataset being contained in our training set. PTB escapes these
issues due to predating the modern internet. Our largest model sets a new SOTA on PTB by a substantial margin of 15
points, achieving a perplexity of 20.50. Note that since PTB is a traditional language modeling dataset it does not have
a clear separation of examples to deﬁne one-shot or few-shot evaluation around, so we measure only zero-shot.

3.1.2 LAMBADA

The LAMBADA dataset [PKL+16] tests the modeling of long-range dependencies in text – the model is asked to
predict the last word of sentences which require reading a paragraph of context. It has recently been suggested that the
continued scaling of language models is yielding diminishing returns on this difﬁcult benchmark. [BHT+20] reﬂect on
the small 1.5% improvement achieved by a doubling of model size between two recent state of the art results ([SPP+19]

11

Setting

SOTA
GPT-3 Zero-Shot
GPT-3 One-Shot
GPT-3 Few-Shot

LAMBADA
(acc)
68.0a
76.2
72.5
86.4

LAMBADA
(ppl)
8.63b
3.00
3.35
1.92

StoryCloze
(acc)
91.8c
83.2
84.7
87.7

HellaSwag
(acc)
85.6d
78.9
78.1
79.3

Table 3.2: Performance on cloze and completion tasks. GPT-3 signiﬁcantly improves SOTA on LAMBADA while
achieving respectable performance on two difﬁcult completion prediction datasets. a[Tur20] b[RWC+19] c[LDL19]
d[LCH+20]

Figure 3.2: On LAMBADA, the few-shot capability of language models results in a strong boost to accuracy. GPT-3
2.7B outperforms the SOTA 17B parameter Turing-NLG [Tur20] in this setting, and GPT-3 175B advances the state of
the art by 18%. Note zero-shot uses a different format from one-shot and few-shot as described in the text.

and [Tur20]) and argue that “continuing to expand hardware and data sizes by orders of magnitude is not the path
forward”. We ﬁnd that path is still promising and in a zero-shot setting GPT-3 achieves 76% on LAMBADA, a gain of
8% over the previous state of the art.

LAMBADA is also a demonstration of the ﬂexibility of few-shot learning as it provides a way to address a problem that
classically occurs with this dataset. Although the completion in LAMBADA is always the last word in a sentence, a
standard language model has no way of knowing this detail. It thus assigns probability not only to the correct ending but
also to other valid continuations of the paragraph. This problem has been partially addressed in the past with stop-word
ﬁlters [RWC+19] (which ban “continuation” words). The few-shot setting instead allows us to “frame” the task as a
cloze-test and allows the language model to infer from examples that a completion of exactly one word is desired. We
use the following ﬁll-in-the-blank format:

Alice was friends with Bob. Alice went to visit her friend

. → Bob

George bought some baseball equipment, a ball, a glove, and a

. →

When presented with examples formatted this way, GPT-3 achieves 86.4% accuracy in the few-shot setting, an increase
of over 18% from the previous state-of-the-art. We observe that few-shot performance improves strongly with model
size. While this setting decreases the performance of the smallest model by almost 20%, for GPT-3 it improves accuracy
by 10%. Finally, the ﬁll-in-blank method is not effective one-shot, where it always performs worse than the zero-shot
setting. Perhaps this is because all models still require several examples to recognize the pattern.

12

Setting
RAG (Fine-tuned, Open-Domain) [LPP+20]
T5-11B+SSM (Fine-tuned, Closed-Book) [RRS20]
T5-11B (Fine-tuned, Closed-Book)
GPT-3 Zero-Shot
GPT-3 One-Shot
GPT-3 Few-Shot

NaturalQS WebQS TriviaQA

44.5
36.6
34.5
14.6
23.0
29.9

45.5
44.7
37.4
14.4
25.3
41.5

68.0
60.5
50.1
64.3
68.0
71.2

Table 3.3: Results on three Open-Domain QA tasks. GPT-3 is shown in the few-, one-, and zero-shot settings, as
compared to prior SOTA results for closed book and open domain settings. TriviaQA few-shot result is evaluated on the
wiki split test server.

One note of caution is that an analysis of test set contamination identiﬁed that a signiﬁcant minority of the LAMBADA
dataset appears to be present in our training data – however analysis performed in Section 4 suggests negligible impact
on performance.

3.1.3 HellaSwag

The HellaSwag dataset [ZHB+19] involves picking the best ending to a story or set of instructions. The examples were
adversarially mined to be difﬁcult for language models while remaining easy for humans (who achieve 95.6% accuracy).
GPT-3 achieves 78.1% accuracy in the one-shot setting and 79.3% accuracy in the few-shot setting, outperforming the
75.4% accuracy of a ﬁne-tuned 1.5B parameter language model [ZHR+19] but still a fair amount lower than the overall
SOTA of 85.6% achieved by the ﬁne-tuned multi-task model ALUM.

3.1.4 StoryCloze

We next evaluate GPT-3 on the StoryCloze 2016 dataset [MCH+16], which involves selecting the correct ending
sentence for ﬁve-sentence long stories. Here GPT-3 achieves 83.2% in the zero-shot setting and 87.7% in the few-shot
setting (with K = 70). This is still 4.1% lower than the ﬁne-tuned SOTA using a BERT based model [LDL19] but
improves over previous zero-shot results by roughly 10%.

3.2 Closed Book Question Answering

In this section we measure GPT-3’s ability to answer questions about broad factual knowledge. Due to the immense
amount of possible queries, this task has normally been approached by using an information retrieval system to ﬁnd
relevant text in combination with a model which learns to generate an answer given the question and the retrieved
text. Since this setting allows a system to search for and condition on text which potentially contains the answer it
is denoted “open-book”. [RRS20] recently demonstrated that a large language model can perform surprisingly well
directly answering the questions without conditioning on auxilliary information. They denote this more restrictive
evaluation setting as “closed-book”. Their work suggests that even higher-capacity models could perform even better
and we test this hypothesis with GPT-3. We evaluate GPT-3 on the 3 datasets in [RRS20]: Natural Questions [KPR+19],
WebQuestions [BCFL13], and TriviaQA [JCWZ17], using the same splits. Note that in addition to all results being in
the closed-book setting, our use of few-shot, one-shot, and zero-shot evaluations represent an even stricter setting than
previous closed-book QA work: in addition to external content not being allowed, ﬁne-tuning on the Q&A dataset itself
is also not permitted.

The results for GPT-3 are shown in Table 3.3. On TriviaQA, we achieve 64.3% in the zero-shot setting, 68.0% in the
one-shot setting, and 71.2% in the few-shot setting. The zero-shot result already outperforms the ﬁne-tuned T5-11B by
14.2%, and also outperforms a version with Q&A tailored span prediction during pre-training by 3.8%. The one-shot
result improves by 3.7% and matches the SOTA for an open-domain QA system which not only ﬁne-tunes but also
makes use of a learned retrieval mechanism over a 15.3B parameter dense vector index of 21M documents [LPP+20].
GPT-3’s few-shot result further improves performance another 3.2% beyond this.

On WebQuestions (WebQs), GPT-3 achieves 14.4% in the zero-shot setting, 25.3% in the one-shot setting, and 41.5%
in the few-shot setting. This compares to 37.4% for ﬁne-tuned T5-11B, and 44.7% for ﬁne-tuned T5-11B+SSM,
which uses a Q&A-speciﬁc pre-training procedure. GPT-3 in the few-shot setting approaches the performance of
state-of-the-art ﬁne-tuned models. Notably, compared to TriviaQA, WebQS shows a much larger gain from zero-shot to
few-shot (and indeed its zero-shot and one-shot performance are poor), perhaps suggesting that the WebQs questions

13

Figure 3.3: On TriviaQA GPT3’s performance grows smoothly with model size, suggesting that language models
continue to absorb knowledge as their capacity increases. One-shot and few-shot performance make signiﬁcant gains
over zero-shot behavior, matching and exceeding the performance of the SOTA ﬁne-tuned open-domain model, RAG
[LPP+20]

and/or the style of their answers are out-of-distribution for GPT-3. Nevertheless, GPT-3 appears able to adapt to this
distribution, recovering strong performance in the few-shot setting.

On Natural Questions (NQs) GPT-3 achieves 14.6% in the zero-shot setting, 23.0% in the one-shot setting, and 29.9% in
the few-shot setting, compared to 36.6% for ﬁne-tuned T5 11B+SSM. Similar to WebQS, the large gain from zero-shot
to few-shot may suggest a distribution shift, and may also explain the less competitive performance compared to
TriviaQA and WebQS. In particular, the questions in NQs tend towards very ﬁne-grained knowledge on Wikipedia
speciﬁcally which could be testing the limits of GPT-3’s capacity and broad pretraining distribution.

Overall, on one of the three datasets GPT-3’s one-shot matches the open-domain ﬁne-tuning SOTA. On the other two
datasets it approaches the performance of the closed-book SOTA despite not using ﬁne-tuning. On all 3 datasets, we
ﬁnd that performance scales very smoothly with model size (Figure 3.3 and Appendix H Figure H.7), possibly reﬂecting
the idea that model capacity translates directly to more ‘knowledge’ absorbed in the parameters of the model.

3.3 Translation

For GPT-2 a ﬁlter was used on a multilingual collection of documents to produce an English only dataset due to capacity
concerns. Even with this ﬁltering GPT-2 showed some evidence of multilingual capability and performed non-trivially
when translating between French and English despite only training on 10 megabytes of remaining French text. Since we
increase the capacity by over two orders of magnitude from GPT-2 to GPT-3, we also expand the scope of the training
dataset to include more representation of other languages, though this remains an area for further improvement. As
discussed in 2.2 the majority of our data is derived from raw Common Crawl with only quality-based ﬁltering. Although
GPT-3’s training data is still primarily English (93% by word count), it also includes 7% of text in other languages.
These languages are documented in the supplemental material. In order to better understand translation capability, we
also expand our analysis to include two additional commonly studied languages, German and Romanian.

Existing unsupervised machine translation approaches often combine pretraining on a pair of monolingual datasets
with back-translation [SHB15] to bridge the two languages in a controlled way. By contrast, GPT-3 learns from a
blend of training data that mixes many languages together in a natural way, combining them on a word, sentence,
and document level. GPT-3 also uses a single training objective which is not customized or designed for any task in
particular. However, our one / few-shot settings aren’t strictly comparable to prior unsupervised work since they make
use of a small amount of paired examples (1 or 64). This corresponds to up to a page or two of in-context training data.

Results are shown in Table 3.4. Zero-shot GPT-3, which only receives on a natural language description of the task,
still underperforms recent unsupervised NMT results. However, providing only a single example demonstration for

14

Setting

SOTA (Supervised)

XLM [LC19]
MASS [STQ+19]
mBART [LGG+20]

GPT-3 Zero-Shot
GPT-3 One-Shot
GPT-3 Few-Shot

En→Fr
45.6a

33.4
37.5
-

25.2
28.3
32.6

Fr→En En→De De→En En→Ro Ro→En
40.2d
35.0 b

39.9e

38.5e

41.2c

33.3
34.9
-

21.2
33.7
39.2

26.4
28.3
29.8

24.6
26.2
29.7

34.3
35.2
34.0

27.2
30.4
40.6

33.3
35.2
35.0

14.1
20.6
21.0

31.8
33.1
30.5

19.9
38.6
39.5

Table 3.4: Few-shot GPT-3 outperforms previous unsupervised NMT work by 5 BLEU when translating
into English reﬂecting its strength as an English LM. We report BLEU scores on the WMT’14 Fr↔En,
WMT’16 De↔En, and WMT’16 Ro↔En datasets as measured by multi-bleu.perl with XLM’s tokeniza-
tion in order to compare most closely with prior unsupervised NMT work. SacreBLEUf [Pos18] results re-
ported in Appendix H. Underline indicates an unsupervised or few-shot SOTA, bold indicates supervised SOTA
a[EOAG18] b[DHKH14] c[WXH+18] d[oR16] e[LGG+20] f [SacreBLEU signature:
with relative conﬁdence.
BLEU+case.mixed+numrefs.1+smooth.exp+tok.intl+version.1.2.20]

Figure 3.4: Few-shot translation performance on 6 language pairs as model capacity increases. There is a consistent
trend of improvement across all datasets as the model scales, and as well as tendency for translation into English to be
stronger than translation from English.

15

Setting

Winograd Winogrande (XL)

Fine-tuned SOTA
GPT-3 Zero-Shot
GPT-3 One-Shot
GPT-3 Few-Shot

90.1a
88.3*
89.7*
88.6*

84.6b
70.2
73.2
77.7

Table 3.5: Results on the WSC273 version of Winograd schemas and the adversarial Winogrande dataset. See Section
4 for details on potential contamination of the Winograd test set. a[SBBC19] b[LYN+20]

Figure 3.5: Zero-, one-, and few-shot performance on the adversarial Winogrande dataset as model capacity scales.
Scaling is relatively smooth with the gains to few-shot learning increasing with model size, and few-shot GPT-3 175B
is competitive with a ﬁne-tuned RoBERTA-large.

each translation task improves performance by over 7 BLEU and nears competitive performance with prior work.
GPT-3 in the full few-shot setting further improves another 4 BLEU resulting in similar average performance to prior
unsupervised NMT work. GPT-3 has a noticeable skew in its performance depending on language direction. For the
three input languages studied, GPT-3 signiﬁcantly outperforms prior unsupervised NMT work when translating into
English but underperforms when translating in the other direction. Performance on En-Ro is a noticeable outlier at
over 10 BLEU worse than prior unsupervised NMT work. This could be a weakness due to reusing the byte-level BPE
tokenizer of GPT-2 which was developed for an almost entirely English training dataset. For both Fr-En and De-En,
few shot GPT-3 outperforms the best supervised result we could ﬁnd but due to our unfamiliarity with the literature and
the appearance that these are un-competitive benchmarks we do not suspect those results represent true state of the art.
For Ro-En, few shot GPT-3 performs within 0.5 BLEU of the overall SOTA which is achieved by a combination of
unsupervised pretraining, supervised ﬁnetuning on 608K labeled examples, and backtranslation [LHCG19b].

Finally, across all language pairs and across all three settings (zero-, one-, and few-shot), there is a smooth trend of
improvement with model capacity. This is shown in Figure 3.4 in the case of few-shot results, and scaling for all three
settings is shown in Appendix H.

3.4 Winograd-Style Tasks

The Winograd Schemas Challenge [LDM12] is a classical task in NLP that involves determining which word a pronoun
refers to, when the pronoun is grammatically ambiguous but semantically unambiguous to a human. Recently ﬁne-tuned
language models have achieved near-human performance on the original Winograd dataset, but more difﬁcult versions

16

Setting

PIQA ARC (Easy)

Fine-tuned SOTA 79.4
80.5*
GPT-3 Zero-Shot
80.5*
GPT-3 One-Shot
82.8*
GPT-3 Few-Shot

92.0[KKS+20]
68.8
71.2
70.1

ARC (Challenge) OpenBookQA
87.2[KKS+20]
78.5[KKS+20]
57.6
51.4
58.8
53.2
65.4
51.5

Table 3.6: GPT-3 results on three commonsense reasoning tasks, PIQA, ARC, and OpenBookQA. GPT-3 Few-Shot
PIQA result is evaluated on the test server. See Section 4 for details on potential contamination issues on the PIQA test
set.

Figure 3.6: GPT-3 results on PIQA in the zero-shot, one-shot, and few-shot settings. The largest model achieves a
score on the development set in all three conditions that exceeds the best recorded score on the task.

such as the adversarially-mined Winogrande dataset [SBBC19] still signiﬁcantly lag human performance. We test
GPT-3’s performance on both Winograd and Winogrande, as usual in the zero-, one-, and few-shot setting.

On Winograd we test GPT-3 on the original set of 273 Winograd schemas, using the same “partial evaluation” method
described in [RWC+19]. Note that this setting differs slightly from the WSC task in the SuperGLUE benchmark, which
is presented as binary classiﬁcation and requires entity extraction to convert to the form described in this section. On
Winograd GPT-3 achieves 88.3%, 89.7%, and 88.6% in the zero-shot, one-shot, and few-shot settings, showing no clear
in-context learning but in all cases achieving strong results just a few points below state-of-the-art and estimated human
performance. We note that contamination analysis found some Winograd schemas in the training data but this appears
to have only a small effect on results (see Section 4).

On the more difﬁcult Winogrande dataset, we do ﬁnd gains to in-context learning: GPT-3 achieves 70.2% in the
zero-shot setting, 73.2% in the one-shot setting, and 77.7% in the few-shot setting. For comparison a ﬁne-tuned
RoBERTA model achieves 79%, state-of-the-art is 84.6% achieved with a ﬁne-tuned high capacity model (T5), and
human performance on the task as reported by [SBBC19] is 94.0%.

3.5 Common Sense Reasoning

Next we consider three datasets which attempt to capture physical or scientiﬁc reasoning, as distinct from sentence
completion, reading comprehension, or broad knowledge question answering. The ﬁrst, PhysicalQA (PIQA) [BZB+19],
asks common sense questions about how the physical world works and is intended as a probe of grounded understanding
of the world. GPT-3 achieves 81.0% accuracy zero-shot, 80.5% accuracy one-shot, and 82.8% accuracy few-shot
(the last measured on PIQA’s test server). This compares favorably to the 79.4% accuracy prior state-of-the-art of a

17

Setting
Fine-tuned SOTA 90.7a
81.5
GPT-3 Zero-Shot
84.0
GPT-3 One-Shot
85.0
GPT-3 Few-Shot

CoQA DROP QuAC SQuADv2 RACE-h RACE-m
93.0d
59.5
65.4
69.8

89.1b
23.6
34.3
36.5

90.0e
45.5
45.9
46.8

93.1e
58.4
57.4
58.1

74.4c
41.5
43.3
44.3

Table 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy.
a[JZC+19] b[JN20] c[AI19] d[QIA20] e[SPP+19]

ﬁne-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human
performance, but GPT-3’s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis
ﬂagged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark
the result with an asterisk. See Section 4 for details.
ARC [CCE+18] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the
“Challenge” version of the dataset which has been ﬁltered to questions which simple statistical or information retrieval
methods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot
setting, and 51.5% in the few-shot setting. This is approaching the performance of a ﬁne-tuned RoBERTa baseline
(55.9%) from UniﬁedQA [KKS+20]. On the “Easy” version of the dataset (questions which either of the mentioned
baseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a ﬁne-tuned
RoBERTa baseline from [KKS+20]. However, both of these results are still much worse than the overall SOTAs
achieved by the UniﬁedQA which exceeds GPT-3’s few-shot results by 27% on the challenge set and 22% on the easy
set.

On OpenBookQA [MCKS18], GPT-3 improves signiﬁcantly from zero to few shot settings but is still over 20 points
short of the overall SOTA. GPT-3’s few-shot performance is similar to a ﬁne-tuned BERT Large baseline on the
leaderboard.

Overall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and
inconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a signiﬁcant
improvement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.

3.6 Reading Comprehension

Next we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive,
multiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread
in GPT-3’s performance across these datasets suggestive of varying capability with different answer formats. In general
we observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each
respective dataset.

GPT-3 performs best (within 3 points of the human baseline) on CoQA [RCM19] a free-form conversational dataset
and performs worst (13 F1 below an ELMo baseline) on QuAC [CHI+18] a dataset which requires modeling structured
dialog acts and answer span selections of teacher-student interactions. On DROP [DWD+19], a dataset testing discrete
reasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the ﬁne-tuned
BERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches
which augment neural networks with symbolic systems [RLL+19]. On SQuAD 2.0 [RJL18], GPT-3 demonstrates its
few-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to
slightly outperform the best ﬁne-tuned result in the original paper. On RACE [LXL+17], a multiple choice dataset of
middle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with
the earliest work utilizing contextual representations and is still 45% behind SOTA.

3.7 SuperGLUE

In order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a
more systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark
[WPN+19] [WPN+19] [CLC+19] [DMST19] [RBG11] [KCR+18] [ZLL+18] [DGM06] [BHDD+06] [GMDD07]
[BDD+09] [PCC18] [PHR+18]. GPT-3’s test-set performance on the SuperGLUE dataset is shown in Table 3.8. In the
few-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC

18

Figure 3.7: GPT-3 results on CoQA reading comprehension task. GPT-3 175B achieves 85 F1 in the few-shot setting,
only a few points behind measured human performance and state-of-the-art ﬁne-tuned models. Zero-shot and one-shot
performance is a few points behind, with the gains to few-shot being largest for bigger models.

SuperGLUE
Average

BoolQ

CB

Accuracy Accuracy

Fine-tuned SOTA
Fine-tuned BERT-Large
GPT-3 Few-Shot

89.0
69.0
71.8

91.0
77.4
76.4

96.9
83.6
75.6

CB
F1

93.9
75.7
52.0

COPA

RTE

Accuracy Accuracy

94.8
70.6
92.0

92.5
71.7
69.0

Fine-tuned SOTA
Fine-tuned BERT-Large
GPT-3 Few-Shot

76.1
69.6
49.4

93.8
64.6
80.1

62.3
24.1
30.5

WiC

WSC
Accuracy Accuracy Accuracy

MultiRC MultiRC ReCoRD ReCoRD

F1a

88.2
70.0
75.4

Accuracy

92.5
71.3
90.2

F1

93.3
72.0
91.1

Table 3.8: Performance of GPT-3 on SuperGLUE compared to ﬁne-tuned baselines and SOTA. All results are reported
on the test set. GPT-3 few-shot is given a total of 32 examples within the context of each task and performs no gradient
updates.

19

Figure 3.8: Performance on SuperGLUE increases with model size and number of examples in context. A value
of K = 32 means that our model was shown 32 examples per task, for 256 examples total divided across the 8 tasks in
SuperGLUE. We report GPT-3 values on the dev set, so our numbers are not directly comparable to the dotted reference
lines (our test set results are in Table 3.8). The BERT-Large reference model was ﬁne-tuned on the SuperGLUE training
set (125K examples), whereas BERT++ was ﬁrst ﬁne-tuned on MultiNLI (392K examples) and SWAG (113K examples)
before further ﬁne-tuning on the SuperGLUE training set (for a total of 630K ﬁne-tuning examples). We ﬁnd the
difference in performance between the BERT-Large and BERT++ to be roughly equivalent to the difference between
GPT-3 with one example per context versus eight examples per context.

and MultiRC, we sampled a new set of examples to use in the context for each problem. For WSC and MultiRC, we
used the same set of randomly drawn examples from the training set as context for all of the problems we evaluated.

We observe a wide range in GPT-3’s performance across tasks. On COPA and ReCoRD GPT-3 achieves near-SOTA
performance in the one-shot and few-shot settings, with COPA falling only a couple points short and achieving
second place on the leaderboard, where ﬁrst place is held by a ﬁne-tuned 11 billion parameter model (T5). On WSC,
performance is still relatively strong, achieving 80.1% in the few-shot setting (note that GPT-3 achieves 88.6% on the
original Winograd dataset as described in Section 3.4). On BoolQ, MultiRC, and RTE, performance is reasonable,
roughly matching that of a ﬁne-tuned BERT-Large. On CB, we see signs of life at 75.6% in the few-shot setting.

WiC is a notable weak spot with few-shot performance at 49.4% (at random chance). We tried a number of different
phrasings and formulations for WiC (which involves determining if a word is being used with the same meaning in two
sentences), none of which was able to achieve strong performance. This hints at a phenomenon that will become clearer
in the next section (which discusses the ANLI benchmark) – GPT-3 appears to be weak in the few-shot or one-shot
setting at some tasks that involve comparing two sentences or snippets, for example whether a word is used the same
way in two sentences (WiC), whether one sentence is a paraphrase of another, or whether one sentence implies another.
This could also explain the comparatively low scores for RTE and CB, which also follow this format. Despite these
weaknesses, GPT-3 still outperforms a ﬁne-tuned BERT-large on four of eight tasks and on two tasks GPT-3 is close to
the state-of-the-art held by a ﬁne-tuned 11 billion parameter model.

Finally, we note that the few-shot SuperGLUE score steadily improves with both model size and with number of
examples in the context showing increasing beneﬁts from in-context learning (Figure 3.8). We scale K up to 32
examples per task, after which point additional examples will not reliably ﬁt into our context. When sweeping over
values of K, we ﬁnd that GPT-3 requires less than eight total examples per task to outperform a ﬁne-tuned BERT-Large
on overall SuperGLUE score.

3.8 NLI

Natural Language Inference (NLI) [Fyo00] concerns the ability to understand the relationship between two sentences.
In practice, this task is usually structured as a two or three class classiﬁcation problem where the model classiﬁes

20

Figure 3.9: Performance of GPT-3 on ANLI Round 3. Results are on the dev-set, which has only 1500 examples
and therefore has high variance (we estimate a standard deviation of 1.2%). We ﬁnd that smaller models hover around
random chance, while few-shot GPT-3 175B closes almost half the gap from random chance to SOTA. Results for
ANLI rounds 1 and 2 are shown in the appendix.

whether the second sentence logically follows from the ﬁrst, contradicts the ﬁrst sentence, or is possibly true (neutral).
SuperGLUE includes an NLI dataset, RTE, which evaluates the binary version of the task. On RTE, only the largest
version of GPT-3 performs convincingly better than random (56%) in any evaluation setting, but in a few-shot setting
GPT-3 performs similarly to a single-task ﬁne-tuned BERT Large. We also evaluate on the recently introduced
Adversarial Natural Language Inference (ANLI) dataset [NWD+19]. ANLI is a difﬁcult dataset employing a series of
adversarially mined natural language inference questions in three rounds (R1, R2, and R3). Similar to RTE, all of our
models smaller than GPT-3 perform at almost exactly random chance on ANLI, even in the few-shot setting (∼ 33%),
whereas GPT-3 itself shows signs of life on Round 3. Results for ANLI R3 are highlighted in Figure 3.9 and full results
for all rounds can be found in Appendix H. These results on both RTE and ANLI suggest that NLI is still a very difﬁcult
task for language models and they are only just beginning to show signs of progress.

3.9 Synthetic and Qualitative Tasks

One way to probe GPT-3’s range of abilities in the few-shot (or zero- and one-shot) setting is to give it tasks which
require it to perform simple on-the-ﬂy computational reasoning, recognize a novel pattern that is unlikely to have
occurred in training, or adapt quickly to an unusual task. We devise several tasks to test this class of abilities. First, we
test GPT-3’s ability to perform arithmetic. Second, we create several tasks that involve rearranging or unscrambling the
letters in a word, tasks which are unlikely to have been exactly seen during training. Third, we test GPT-3’s ability to
solve SAT-style analogy problems few-shot. Finally, we test GPT-3 on several qualitative tasks, including using new
words in a sentence, correcting English grammar, and news article generation. We will release the synthetic datasets
with the hope of stimulating further study of test-time behavior of language models.

3.9.1 Arithmetic

To test GPT-3’s ability to perform simple arithmetic operations without task-speciﬁc training, we developed a small
battery of 10 tests that involve asking GPT-3 a simple arithmetic problem in natural language:

• 2 digit addition (2D+) – The model is asked to add two integers sampled uniformly from [0, 100), phrased in

the form of a question, e.g. “Q: What is 48 plus 76? A: 124.”

• 2 digit subtraction (2D-) – The model is asked to subtract two integers sampled uniformly from [0, 100); the

answer may be negative. Example: “Q: What is 34 minus 53? A: -19”.

• 3 digit addition (3D+) – Same as 2 digit addition, except numbers are uniformly sampled from [0, 1000).

21

Figure 3.10: Results on all 10 arithmetic tasks in the few-shot settings for models of different sizes. There is a
signiﬁcant jump from the second largest model (GPT-3 13B) to the largest model (GPT-3 175), with the latter being
able to reliably accurate 2 digit arithmetic, usually accurate 3 digit arithmetic, and correct answers a signiﬁcant fraction
of the time on 4-5 digit arithmetic, 2 digit multiplication, and compound operations. Results for one-shot and zero-shot
are shown in the appendix.

• 3 digit subtraction (3D-) – Same as 2 digit subtraction, except numbers are uniformly sampled from [0, 1000).

• 4 digit addition (4D+) – Same as 3 digit addition, except uniformly sampled from [0, 10000).

• 4 digit subtraction (4D-) – Same as 3 digit subtraction, except uniformly sampled from [0, 10000).

• 5 digit addition (5D+) – Same as 3 digit addition, except uniformly sampled from [0, 100000).

• 5 digit subtraction (5D-) – Same as 3 digit subtraction, except uniformly sampled from [0, 100000).

• 2 digit multiplication (2Dx) – The model is asked to multiply two integers sampled uniformly from [0, 100),

e.g. “Q: What is 24 times 42? A: 1008”.

• One-digit composite (1DC) – The model is asked to perform a composite operation on three 1 digit numbers,
with parentheses around the last two. For example, “Q: What is 6+(4*8)? A: 38”. The three 1 digit numbers
are selected uniformly on [0, 10) and the operations are selected uniformly from {+,-,*}.

In all 10 tasks the model must generate the correct answer exactly. For each task we generate a dataset of 2,000 random
instances of the task and evaluate all models on those instances.

First we evaluate GPT-3 in the few-shot setting, for which results are shown in Figure 3.10. On addition and subtraction,
GPT-3 displays strong proﬁciency when the number of digits is small, achieving 100% accuracy on 2 digit addition,
98.9% at 2 digit subtraction, 80.2% at 3 digit addition, and 94.2% at 3-digit subtraction. Performance decreases as the
number of digits increases, but GPT-3 still achieves 25-26% accuracy on four digit operations and 9-10% accuracy on
ﬁve digit operations, suggesting at least some capacity to generalize to larger numbers of digits. GPT-3 also achieves
29.2% accuracy at 2 digit multiplication, an especially computationally intensive operation. Finally, GPT-3 achieves
21.3% accuracy at single digit combined operations (for example, 9*(7+5)), suggesting that it has some robustness
beyond just single operations.

As Figure 3.10 makes clear, small models do poorly on all of these tasks – even the 13 billion parameter model (the
second largest after the 175 billion full GPT-3) can solve 2 digit addition and subtraction only half the time, and all
other operations less than 10% of the time.

One-shot and zero-shot performance are somewhat degraded relative to few-shot performance, suggesting that adaptation
to the task (or at the very least recognition of the task) is important to performing these computations correctly.
Nevertheless, one-shot performance is still quite strong, and even zero-shot performance of the full GPT-3 signiﬁcantly

22

Setting

GPT-3 Zero-shot
GPT-3 One-shot
GPT-3 Few-shot

2D+

76.9
99.6
100.0

2D-

58.0
86.4
98.9

3D+

34.2
65.5
80.4

3D-

48.3
78.7
94.2

4D+

4.0
14.0
25.5

4D-

7.5
14.0
26.8

5D+

5D-

0.7
3.5
9.3

0.8
3.8
9.9

2Dx

19.8
27.4
29.2

1DC

9.8
14.3
21.3

Table 3.9: Results on basic arithmetic tasks for GPT-3 175B. {2,3,4,5}D{+,-} is 2, 3, 4, and 5 digit addition or
subtraction, 2Dx is 2 digit multiplication. 1DC is 1 digit composite operations. Results become progressively stronger
moving from the zero-shot to one-shot to few-shot setting, but even the zero-shot shows signiﬁcant arithmetic abilities.

Setting

GPT-3 Zero-shot
GPT-3 One-shot
GPT-3 Few-shot

CL

3.66
21.7
37.9

A1

2.28
8.62
15.1

A2

8.91
25.9
39.7

RI

8.26
45.4
67.2

RW

0.09
0.48
0.44

Table 3.10: GPT-3 175B performance on various word unscrambling and word manipulation tasks, in zero-, one-, and
few-shot settings. CL is “cycle letters in word”, A1 is anagrams of but the ﬁrst and last letters, A2 is anagrams of all but
the ﬁrst and last two letters, RI is “Random insertion in word”, RW is “reversed words”.

outperforms few-shot learning for all smaller models. All three settings for the full GPT-3 are shown in Table 3.9, and
model capacity scaling for all three settings is shown in Appendix H.

To spot-check whether the model is simply memorizing speciﬁc arithmetic problems, we took the 3-digit arithmetic
problems in our test set and searched for them in our training data in both the forms ""<NUM1> + <NUM2> ="" and
""<NUM1> plus <NUM2>"". Out of 2,000 addition problems we found only 17 matches (0.8%) and out of 2,000
subtraction problems we found only 2 matches (0.1%), suggesting that only a trivial fraction of the correct answers
could have been memorized. In addition, inspection of incorrect answers reveals that the model often makes mistakes
such as not carrying a “1”, suggesting it is actually attempting to perform the relevant computation rather than
memorizing a table.

Overall, GPT-3 displays reasonable proﬁciency at moderately complex arithmetic in few-shot, one-shot, and even
zero-shot settings.

3.9.2 Word Scrambling and Manipulation Tasks

To test GPT-3’s ability to learn novel symbolic manipulations from a few examples, we designed a small battery of
5 “character manipulation” tasks. Each task involves giving the model a word distorted by some combination of
scrambling, addition, or deletion of characters, and asking it to recover the original word. The 5 tasks are:

• Cycle letters in word (CL) – The model is given a word with its letters cycled, then the “=” symbol, and
is expected to generate the original word. For example, it might be given “lyinevitab” and should output
“inevitably”.

• Anagrams of all but ﬁrst and last characters (A1) – The model is given a word where every letter except
the ﬁrst and last have been scrambled randomly, and must output the original word. Example: criroptuon =
corruption.

• Anagrams of all but ﬁrst and last 2 characters (A2) – The model is given a word where every letter except
the ﬁrst 2 and last 2 have been scrambled randomly, and must recover the original word. Example: opoepnnt
→ opponent.

• Random insertion in word (RI) – A random punctuation or space character is inserted between each letter

of a word, and the model must output the original word. Example: s.u!c/c!e.s s i/o/n = succession.

• Reversed words (RW) – The model is given a word spelled backwards, and must output the original word.

Example: stcejbo → objects.

For each task we generate 10,000 examples, which we chose to be the top 10,000 most frequent words as measured by
[Nor09] of length more than 4 characters and less than 15 characters. The few-shot results are shown in Figure 3.11.
Task performance tends to grow smoothly with model size, with the full GPT-3 model achieving 66.9% on removing

23

Figure 3.11: Few-shot performance on the ﬁve word scrambling tasks for different sizes of model. There is generally
smooth improvement with model size although the random insertion task shows an upward slope of improvement with
the 175B model solving the task the majority of the time. Scaling of one-shot and zero-shot performance is shown in
the appendix. All tasks are done with K = 100.

random insertions, 38.6% on cycling letters, 40.2% on the easier anagram task, and 15.1% on the more difﬁcult anagram
task (where only the ﬁrst and last letters are held ﬁxed). None of the models can reverse the letters in a word.

In the one-shot setting, performance is signiﬁcantly weaker (dropping by half or more), and in the zero-shot setting the
model can rarely perform any of the tasks (Table 3.10). This suggests that the model really does appear to learn these
tasks at test time, as the model cannot perform them zero-shot and their artiﬁcial nature makes them unlikely to appear
in the pre-training data (although we cannot conﬁrm this with certainty).

We can further quantify performance by plotting “in-context learning curves”, which show task performance as a
function of the number of in-context examples. We show in-context learning curves for the Symbol Insertion task
in Figure 1.2. We can see that larger models are able to make increasingly effective use of in-context information,
including both task examples and natural language task descriptions.

Finally, it is worth adding that solving these tasks requires character-level manipulations, whereas our BPE encoding
operates on signiﬁcant fractions of a word (on average ∼ 0.7 words per token), so from the LM’s perspective succeeding
at these tasks involves not just manipulating BPE tokens but understanding and pulling apart their substructure. Also,
CL, A1, and A2 are not bijective (that is, the unscrambled word is not a deterministic function of the scrambled word),
requiring the model to perform some search to ﬁnd the correct unscrambling. Thus, the skills involved appear to require
non-trivial pattern-matching and computation.

3.9.3 SAT Analogies

To test GPT-3 on another task that is somewhat unusual relative to the typical distribution of text, we collected a set of
374 “SAT analogy” problems [TLBS03]. Analogies are a style of multiple choice question that constituted a section of
the SAT college entrance exam before 2005. A typical example is “audacious is to boldness as (a) sanctimonious is to
hypocrisy, (b) anonymous is to identity, (c) remorseful is to misdeed, (d) deleterious is to result, (e) impressionable is to
temptation”. The student is expected to choose which of the ﬁve word pairs has the same relationship as the original
word pair; in this example the answer is “sanctimonious is to hypocrisy”. On this task GPT-3 achieves 65.2% in the
few-shot setting, 59.1% in the one-shot setting, and 53.7% in the zero-shot setting, whereas the average score among
college applicants was 57% [TL05] (random guessing yields 20%). As shown in Figure 3.12, the results improve with
scale, with the the full 175 billion model improving by over 10% compared to the 13 billion parameter model.

24

Figure 3.12: Zero-, one-,and few-shot performance on SAT analogy tasks, for different sizes of model. The largest
model achieves 65% accuracy in the few-shot setting, and also demonstrates signiﬁcant gains to in-context learning
which are not present in smaller models.

3.9.4 News Article Generation

Previous work on generative language models qualitatively tested their ability to generate synthetic “news articles” by
conditional sampling from the model given a human-written prompt consisting of a plausible ﬁrst sentence for a news
story [RWC+19]. Relative to [RWC+19], the dataset used to train GPT-3 is much less weighted towards news articles,
so trying to generate news articles via raw unconditional samples is less effective – for example GPT-3 often interprets
the proposed ﬁrst sentence of a “news article” as a tweet and then posts synthetic responses or follow-up tweets. To
solve this problem we employed GPT-3’s few-shot learning abilities by providing three previous news articles in the
model’s context to condition it. With the title and subtitle of a proposed next article, the model is able to reliably
generate short articles in the “news” genre.

To gauge the quality of news article generation from GPT-3 (which we believe is likely to be correlated with conditional
sample generation quality in general), we decided to measure human ability to distinguish GPT-3-generated articles
from real ones. Similar work has been carried out by Kreps et al. [KMB20] and Zellers et al. [ZHR+19]. Generative
language models are trained to match the distribution of content generated by humans, so the (in)ability of humans to
distinguish the two is a potentially important measure of quality.3

In order to see how well humans can detect model generated text, we arbitrarily selected 25 article titles and subtitles
from the website newser.com (mean length: 215 words). We then generated completions of these titles and subtitles
from four language models ranging in size from 125M to 175B (GPT-3) parameters (mean length: 200 words). For each
model, we presented around 80 US-based participants with a quiz consisting of these real titles and subtitles followed
by either the human written article or the article generated by the model4. Participants were asked to select whether the
article was “very likely written by a human”, “more likely written by a human”, “I don’t know”, “more likely written by
a machine”, or “very likely written by a machine”.

The articles we selected were not in the models’ training data and the model outputs were formatted and selected
programmatically to prevent human cherry-picking. All models used the same context to condition outputs on and were
pre-trained with the same context size and the same article titles and subtitles were used as prompts for each model.
However, we also ran an experiment to control for participant effort and attention that followed the same format but
involved intentionally bad model generated articles. This was done by generating articles from a “control model”: a
160M parameter model with no context and increased output randomness.

3This task is also relevant to the potential misuse of language models discussed in Section 6.1.
4We wanted to identify how good an average person on the internet is at detecting language model outputs, so we focused on

participants drawn from the general US population. See Appendix E for details.

25

Mean accuracy

95% Conﬁdence
Interval (low, hi)

t compared to
control (p-value)

“I don’t know”
assignments

Control (deliberately bad model)
GPT-3 Small
GPT-3 Medium
GPT-3 Large
GPT-3 XL
GPT-3 2.7B
GPT-3 6.7B
GPT-3 13B
GPT-3 175B

86%
76%
61%
68%
62%
62%
60%
55%
52%

83%–90%
72%–80%
58%–65%
64%–72%
59%–65%
58%–65%
56%–63%
52%–58%
49%–54%

-
3.9 (2e-4)
10.3 (7e-21)
7.3 (3e-11)
10.7 (1e-19)
10.4 (5e-19)
11.2 (3e-21)
15.3 (1e-32)
16.9 (1e-34)

3.6 %
4.9%
6.0%
8.7%
7.5%
7.1%
6.2%
7.1%
7.8%

Table 3.11: Human accuracy in identifying whether short (∼200 word) news articles are model generated. We
ﬁnd that human accuracy (measured by the ratio of correct assignments to non-neutral assignments) ranges from 86%
on the control model to 52% on GPT-3 175B. This table compares mean accuracy between ﬁve different models, and
shows the results of a two-sample T-Test for the difference in mean accuracy between each model and the control model
(an unconditional GPT-3 Small model with increased output randomness).

Mean human accuracy (the ratio of correct assignments to non-neutral assignments per participant) at detecting that
the intentionally bad articles were model generated was ∼ 86% where 50% is chance level performance. By contrast,
mean human accuracy at detecting articles that were produced by the 175B parameter model was barely above chance
at ∼ 52% (see Table 3.11).5 Human abilities to detect model generated text appear to decrease as model size increases:
there appears to be a trend towards chance accuracy with model size, and human detection of GPT-3 is close to chance.6
This is true despite the fact that participants spend more time on each output as model size increases (see Appendix E).
Examples of synthetic articles from GPT-3 are given in Figures 3.14 and 3.15.7 Much of the text is—as indicated by the
evaluations—difﬁcult for humans to distinguish from authentic human content. Factual inaccuracies can be an indicator
that an article is model generated since, unlike human authors, the models have no access to the speciﬁc facts that the
article titles refer to or when the article was written. Other indicators include repetition, non sequiturs, and unusual
phrasings, though these are often subtle enough that they are not noticed.

Related work on language model detection by Ippolito et al. [IDCBE19] indicates that automatic discriminators like
G R O V E R [ZHR+19] and GLTR [GSR19] may have greater success at detecting model generated text than human
evaluators. Automatic detection of these models may be a promising area of future research.

Ippolito et al. [IDCBE19] also note that human accuracy at detecting model generated text increases as humans observe
more tokens. To do a preliminary investigation of how good humans are at detecting longer news articles generated
by GPT-3 175B, we selected 12 world news articles from Reuters with an average length of 569 words and generated
completions of these articles from GPT-3 with an average length of 498 words (298 words longer than our initial
experiments). Following the methodology above, we ran two experiments, each on around 80 US-based participants, to
compare human abilities to detect the articles generated by GPT-3 and a control model.

We found that mean human accuracy at detecting the intentionally bad longer articles from the control model was
∼ 88%, while mean human accuracy at detecting the longer articles that were produced by GPT-3 175B was still barely
above chance at ∼ 52% (see Table 3.12). This indicates that, for news articles that are around 500 words long, GPT-3
continues to produce articles that humans ﬁnd difﬁcult to distinguish from human written news articles.

3.9.5 Learning and Using Novel Words

A task studied in developmental linguistics [CB78] is the ability to learn and utilize new words, for example using a
word in a sentence after seeing it deﬁned only once, or conversely inferring a word’s meaning from only one usage. Here
we qualitatively test GPT-3’s ability to do the former. Speciﬁcally, we give GPT-3 the deﬁnition of a nonexistent word,
such as “Gigamuru”, and then ask it to use it in a sentence. We provide one to ﬁve previous examples of a (separate)

5We use a two-sample Student’s T-Test to test for signiﬁcant difference between the means of the participant accuracies of each

model and the control model and report the normalized difference in the means (as the t-statistic) and the p-value.

6If a model consistently produces texts that are more impressive than human articles, it is possible that human performance on

this task would drop below 50%. Indeed, many individual participants scored below 50% on this task.

7Additional non-news samples can be found in Appendix F.

26

Figure 3.13: People’s ability to identify whether news articles are model-generated (measured by the ratio of correct
assignments to non-neutral assignments) decreases as model size increases. Accuracy on the outputs on the deliberately-
bad control model (an unconditioned GPT-3 Small model with higher output randomness) is indicated with the dashed
line at the top, and the random chance (50%) is indicated with the dashed line at the bottom. Line of best ﬁt is a power
law with 95% conﬁdence intervals.

Mean accuracy

95% Conﬁdence
Interval (low, hi)

t compared to
control (p-value)

“I don’t know”
assignments

Control
GPT-3 175B

88%
52%

84%–91%
48%–57%

-
12.7 (3.2e-23)

2.7%
10.6%

Table 3.12: People’s ability to identify whether ∼ 500 word articles are model generated (as measured by the ratio of
correct assignments to non-neutral assignments) was 88% on the control model and 52% on GPT-3 175B. This table
shows the results of a two-sample T-Test for the difference in mean accuracy between GPT-3 175B and the control
model (an unconditional GPT-3 Small model with increased output randomness).

27

Title: United Methodists Agree to Historic Split
Subtitle: Those who oppose gay marriage will form their own denomination
Article: After two days of intense debate, the United Methodist Church
has agreed to a historic split - one that is expected to end in the
creation of a new denomination, one that will be ""theologically and
socially conservative,"" according to The Washington Post.
The majority of
delegates attending the church’s annual General Conference in May voted to
strengthen a ban on the ordination of LGBTQ clergy and to write new rules
that will ""discipline"" clergy who officiate at same-sex weddings.
those who opposed these measures have a new plan:
separate denomination by 2020, calling their church the Christian Methodist
denomination.
The Post notes that the denomination, which claims 12.5 million members, was
in the early 20th century the ""largest Protestant denomination in the U.S.,""
but that it has been shrinking in recent decades.
The new split will be the
second in the church’s history.
10 percent of the denomination left to form the Evangelical United Brethren
Church.
for the church, which has been losing members for years,"" which has been
""pushed toward the brink of a schism over the role of LGBTQ people in the
church."" Gay marriage is not the only issue that has divided the church.
In
2016, the denomination was split over ordination of transgender clergy, with
the North Pacific regional conference voting to ban them from serving as
clergy, and the South Pacific regional conference voting to allow them.

The Post notes that the proposed split ""comes at a critical time

The first occurred in 1968, when roughly

They say they will form a

But

Figure 3.14: The GPT-3 generated news article that humans had the greatest difﬁculty distinguishing from a human
written article (accuracy: 12%).

I

I can’t change the world.

""I think that’s a really special thing, to not change
I think it’s a really special thing to say, ‘This is what’s

Title: Star’s Tux Promise Draws Megyn Kelly’s Sarcasm
Subtitle: Joaquin Phoenix pledged to not change for each awards event
Article: A year ago, Joaquin Phoenix made headlines when he appeared on
the red carpet at the Golden Globes wearing a tuxedo with a paper bag over
his head that read, ""I am a shape-shifter.
can only change myself."" It was a promise to not change to fit into the
Hollywood mold:
yourself.
inside of me, I’m proud of it, and I’m not going to be ashamed because of
the way that someone else thinks I should be.’"" Now, it’s the Oscars, and
Phoenix is at it again.
wearing a tux no matter what.
Megyn Kelly was not impressed, and she let him have it on The Tonight Show.
""You know, I feel like, I feel like you could have worn the tux,"" she says.
""But you’re saying you’re a shape-shifter.
your tux, but you can change your mind.
change your mind."" Phoenix says he did, but it didn’t stick.
‘Okay, I’m going to wear a tuxedo to this thing.’
don’t want to wear a tuxedo to this thing.’"" Kelly goes on to encourage him
to change his mind again, but Phoenix says it’s too late:
wearing this.""

But this time, his publicist is saying he’ll be

I don’t know if you can change

You can change your mind.

And then I thought, ‘I

""I was like,

You can

""I’m committed to

Figure 3.15: The GPT-3 generated news article that humans found the easiest to distinguish from a human written
article (accuracy: 61%).

28

A ""whatpu"" is a small, furry animal native to Tanzania.
the word whatpu is:
We were traveling in Africa and we saw these very cute whatpus.

An example of a sentence that uses

To do a ""farduddle"" means to jump up and down really fast.
the word farduddle is:
One day when I was playing tag with my little sister, she got really excited and she
started doing these crazy farduddles.
A ""yalubalu"" is a type of vegetable that looks like a big pumpkin.
that uses the word yalubalu is:
I was on a trip to Africa and I tried this yalubalu vegetable that was grown in a garden
there. It was delicious.

An example of a sentence

An example of a sentence that uses

A ""Burringo"" is a car with very fast acceleration.
word Burringo is:
In our garage we have a Burringo that my father drives to work every day.

An example of a sentence that uses the

A ""Gigamuru"" is a type of Japanese musical instrument.
word Gigamuru is:
I have a Gigamuru that my uncle gave me as a gift. I love to play it at home.

An example of a sentence that uses the

To ""screeg"" something is to swing a sword at it.
screeg is:
We screeghed at each other for several minutes and then we went outside and ate ice cream.

An example of a sentence that uses the word

Figure 3.16: Representative GPT-3 completions for the few-shot task of using a new word in a sentence. Boldface is
GPT-3’s completions, plain text is human prompts. In the ﬁrst example both the prompt and the completion are provided
by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional
prompts and provides the completions. Nothing task-speciﬁc is provided to GPT-3 other than the conditioning shown
here.

nonexistent word being deﬁned and used in a sentence, so the task is few-shot in terms of previous examples of the
broad task and one-shot in terms of the speciﬁc word. Table 3.16 shows the 6 examples we generated; all deﬁnitions
were human-generated, and the ﬁrst answer was human-generated as conditioning while the subsequent answers were
generated by GPT-3. These examples were generated continuously in one sitting and we did not omit or repeatedly try
any prompts. In all cases the generated sentence appears to be a correct or at least plausible use of the word. In the ﬁnal
sentence the model generates a plausible conjugation for the word “screeg” (namely “screeghed”), although the use of
the word is slightly awkward (“screeghed at each other”) despite being plausible in the sense that it could describe a toy
sword ﬁght. Overall, GPT-3 appears to be at least proﬁcient at the task of using novel words in a sentence.

3.9.6 Correcting English Grammar

Another task well suited for few-shot learning is correcting English grammar. We test this with GPT-3 in the few-
shot setting by giving prompts of the form ""Poor English Input: <sentence>\n Good English Output:
<sentence>"". We give GPT-3 one human-generated correction and then ask it to correct 5 more (again without any
omissions or repeats). Results are shown in Figure 3.17.

4 Measuring and Preventing Memorization Of Benchmarks

Since our training dataset is sourced from the internet, it is possible that our model was trained on some of our
benchmark test sets. Accurately detecting test contamination from internet-scale datasets is a new area of research
without established best practices. While it is common practice to train large models without investigating contamination,
given the increasing scale of pretraining datasets, we believe this issue is becoming increasingly important to attend to.

This concern is not just hypothetical. One of the ﬁrst papers to train a language model on Common Crawl data [TL18]
detected and removed a training document which overlapped with one of their evaluation datasets. Other work such
as GPT-2 [RWC+19] also conducted post-hoc overlap analysis. Their study was relatively encouraging, ﬁnding that

29

Thank you for picking me as your designer.

I eated the purple berries.
I ate the purple berries.

Poor English input:
Good English output:
Poor English input:
Good English output:
Poor English input:
requested.
Good English output:
requested.
Poor English input:
Good English output: I’d be more than happy to work with you on another project.

or I changed things you wanted and did the modifications.
The requested changes have been made.
or I changed things you wanted and made the modifications.

I’d be more than happy to work with you in another project.

Thank you for choosing me as your designer.

I’d appreciate it.
I appreciate it.

The mentioned changes have done.

or I did the alteration that you

or I made the alteration that you

Please provide me with a short brief of the design you’re looking for and

Poor English input:
that’d be nice if you could share some examples or project you did before.
Good English output: Please provide me with a brief description of the design you’re
looking for and that would be nice if you could share some examples or projects you have
done before.

Poor English input:
Good English output: The patient died.

The patient was died.

Poor English input:
Good English output: We think that Leslie likes us.

We think that Leslie likes ourselves.

Poor English input:
Good English output: Janet broke Bill’s finger.

Janet broke Bill on the finger.

Poor English input:
Good English output: Mary arranged for John to rent a house in St. Louis.

Louis, John to rent a house cheap.

Mary arranged for, in St.

Poor English input:
Good English output: Today I went to the store to buy some bottles of water.

Today I have went to the store to to buys some many bottle of water.

Poor English input:
Good English output: I tried to hit the ball with the bat, but my swing missed.

I have tried to hit ball with bat, but my swing is has miss.

Figure 3.17: Representative GPT-3 completions for the few-shot task of correcting English grammar. Boldface
is GPT-3’s completions, plain text is human prompts. In the ﬁrst few examples example both the prompt and the
completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives
successive additional prompts and provides the completions. Nothing task-speciﬁc is provided to GPT-3 aside from
the ﬁrst few examples as conditioning and the “Poor English input/Good English output” framing. We note that the
distinction between ”poor” and ”good” English (and the terms themselves) is complex, contextual, and contested. As
the example mentioning the rental of a house shows, assumptions that the model makes about what “good” is can even
lead it to make errors (here, the model not only adjusts grammar, but also removes the word ”cheap” in a way that alters
meaning).

30

Figure 4.1: GPT-3 Training Curves We measure model performance during training on a deduplicated validation
split of our training distribution. Though there is some gap between training and validation performance, the gap grows
only minimally with model size and training time, suggesting that most of the gap comes from a difference in difﬁculty
rather than overﬁtting.

although models did perform moderately better on data that overlapped between training and testing, this did not
signiﬁcantly impact reported results due to the small fraction of data which was contaminated (often only a few percent).

GPT-3 operates in a somewhat different regime. On the one hand, the dataset and model size are about two orders of
magnitude larger than those used for GPT-2, and include a large amount of Common Crawl, creating increased potential
for contamination and memorization. On the other hand, precisely due to the large amount of data, even GPT-3 175B
does not overﬁt its training set by a signiﬁcant amount, measured relative to a held-out validation set with which it was
deduplicated (Figure 4.1). Thus, we expect that contamination is likely to be frequent, but that its effects may not be as
large as feared.

We initially tried to address the issue of contamination by proactively searching for and attempting to remove any overlap
between our training data and the development and test sets of all benchmarks studied in this paper. Unfortunately, a
bug resulted in only partial removal of all detected overlaps from the training data. Due to the cost of training, it wasn’t
feasible to retrain the model. To address this, we investigate in detail how the remaining detected overlap impacts
results.

For each benchmark, we produce a ‘clean’ version which removes all potentially leaked examples, deﬁned roughly as
examples that have a 13-gram overlap with anything in the pretraining set (or that overlap with the whole example when
it is shorter than 13-grams). The goal is to very conservatively ﬂag anything that could potentially be contamination,
so as to produce a clean subset that is free of contamination with high conﬁdence. The exact procedure is detailed in
Appendix C.

We then evaluate GPT-3 on these clean benchmarks, and compare to the original score. If the score on the clean
subset is similar to the score on the entire dataset, this suggests that contamination, even if present, does not have a
signiﬁcant effect on reported results. If the score on the clean subset is lower, this suggests contamination may be
inﬂating the results. The results are summarized in Figure 4.2. Although potential contamination is often high (with a
quarter of benchmarks scoring over 50%), in most cases performance changes only negligibly, and we see no evidence
that contamination level and performance difference are correlated. We conclude that either our conservative method
substantially overestimated contamination or that contamination has little effect on performance.

Below, we review in more detail the few speciﬁc cases where either (1) the model performs signiﬁcantly worse on
the cleaned version, or (2) potential contamination is very high, which makes measuring the performance difference
difﬁcult.

Our analysis ﬂagged six groups of benchmarks for further investigation: Word Scrambling, Reading Comprehension
(QuAC, SQuAD2, DROP), PIQA, Winograd, language modeling tasks (Wikitext tasks, 1BW), and German to English

31

Figure 4.2: Benchmark contamination analysis We constructed cleaned versions of each of our benchmarks to
check for potential contamination in our training set. The x-axis is a conservative lower bound for how much of the
dataset is known with high conﬁdence to be clean, and the y-axis shows the difference in performance when evaluating
only on the veriﬁed clean subset. Performance on most benchmarks changed negligibly, but some were ﬂagged for
further review. On inspection we ﬁnd some evidence for contamination of the PIQA and Winograd results, and we mark
the corresponding results in Section 3 with an asterisk. We ﬁnd no evidence that other benchmarks are affected.

translation. Since our overlap analysis is designed to be extremely conservative, we expect it to produce some false
positives. We summarize the results for each group of tasks below:

• Reading Comprehension: Our initial analysis ﬂagged >90% of task examples from QuAC, SQuAD2, and
DROP as potentially contaminated, so large that even measuring the differential on a clean subset was difﬁcult.
Upon manual inspection, however, we found that for every overlap we inspected, in all 3 datasets, the source
text was present in our training data but the question/answer pairs were not, meaning the model gains only
background information and cannot memorize the answer to a speciﬁc question.

• German translation: We found 25% of the examples in the WMT16 German-English test set were marked
as potentially contaminated, with an associated total effect size of 1-2 BLEU. Upon inspection, none of the
ﬂagged examples contain paired sentences resembling NMT training data and collisions were monolingual
matches mostly of snippets of events discussed in the news.

• Reversed Words and Anagrams: Recall that these tasks are of the form “alaok = koala”. Due to the
short length of these tasks, we used 2-grams for ﬁltering (ignoring punctuation). After inspecting the ﬂagged
overlaps, we found that they were not typically instances of real reversals or unscramblings in the training set,
but rather palindromes or trivial unscramblings, e.g “kayak = kayak”. The amount of overlap was small,
but removing the trivial tasks lead to an increase in difﬁculty and thus a spurious signal. Related to this, the
symbol insertion task shows high overlap but no effect on performance – this is because that task involves
removing non-letter characters from a word, and the overlap analysis itself ignores such characters, leading to
many spurious matches.

• PIQA: The overlap analysis ﬂagged 29% of examples as contaminated, and observed a 3 percentage point
absolute decrease (4% relative decrease) in performance on the clean subset. Though the test dataset was
released after our training set was created and its labels are hidden, some of the web pages used by the
crowdsourced dataset creators are contained in our training set. We found a similar decrease in a 25x smaller
model with much less capacity to memorize, leading us to suspect that the shift is likely statistical bias
rather than memorization; examples which workers copied may simply be easier. Unfortunately, we cannot
rigorously prove this hypothesis. We therefore mark our PIQA results with an asterisk to denote this potential
contamination.

• Winograd: The overlap analysis ﬂagged 45% of examples, and found a 2.6% decrease in performance on the
clean subset. Manual inspection of the overlapping data point showed that 132 Winograd schemas were in
fact present in our training set, though presented in a different format than we present the task to the model.
Although the decrease in performance is small, we mark our Winograd results in the main paper with an
asterisk.

32

• Language modeling: We found the 4 Wikipedia language modeling benchmarks measured in GPT-2, plus the
Children’s Book Test dataset, to be almost entirely contained in our training data. Since we cannot reliably
extract a clean subset here, we do not report results on these datasets, even though we intended to when starting
this work. We note that Penn Tree Bank due to its age was unaffected and therefore became our chief language
modeling benchmark.

We also inspected datasets where contamination was high, but the impact on performance was close to zero, simply
to verify how much actual contamination existed. These appeared to often contain false positives. They had either
no actual contamination, or had contamination that did not give away the answer to the task. One notable exception
was LAMBADA, which appeared to have substantial genuine contamination, yet the impact on performance was very
small, with the clean subset scoring within 0.5% of the full dataset. Also, strictly speaking, our ﬁll-in-the-blank format
precludes the simplest form of memorization. Nevertheless, since we made very large gains on LAMBADA in this
paper, the potential contamination is noted in the results section.

An important limitation of our contamination analysis is that we cannot be sure that the clean subset is drawn from the
same distribution as the original dataset. It remains possible that memorization inﬂates results but at the same time
is precisely counteracted by some statistical bias causing the clean subset to be easier. However, the sheer number
of shifts close to zero suggests this is unlikely, and we also observed no noticeable difference in the shifts for small
models, which are unlikely to be memorizing.

Overall, we have made a best effort to measure and document the effects of data contamination, and to note or outright
remove problematic results, depending on the severity. Much work remains to be done to address this important and
subtle issue for the ﬁeld in general, both when designing benchmarks and when training models. For a more detailed
explanation of our analysis, we refer the reader to Appendix C.

5 Limitations

GPT-3 and our analysis of it have a number of limitations. Below we describe some of these and suggest directions for
future work.

First, despite the strong quantitative and qualitative improvements of GPT-3, particularly compared to its direct
predecessor GPT-2, it still has notable weaknesses in text synthesis and several NLP tasks. On text synthesis, although
the overall quality is high, GPT-3 samples still sometimes repeat themselves semantically at the document level, start to
lose coherence over sufﬁciently long passages, contradict themselves, and occasionally contain non-sequitur sentences
or paragraphs. We will release a collection of 500 uncurated unconditional samples to help provide a better sense of
GPT-3’s limitations and strengths at text synthesis. Within the domain of discrete language tasks, we have noticed
informally that GPT-3 seems to have special difﬁculty with “common sense physics”, despite doing well on some
datasets (such as PIQA [BZB+19]) that test this domain. Speciﬁcally GPT-3 has difﬁculty with questions of the type
“If I put cheese into the fridge, will it melt?”. Quantitatively, GPT-3’s in-context learning performance has some notable
gaps on our suite of benchmarks, as described in Section 3, and in particular it does little better than chance when
evaluated one-shot or even few-shot on some “comparison” tasks, such as determining if two words are used the same
way in a sentence, or if one sentence implies another (WIC and ANLI respectively), as well as on a subset of reading
comprehension tasks. This is especially striking given GPT-3’s strong few-shot performance on many other tasks.

GPT-3 has several structural and algorithmic limitations, which could account for some of the issues above. We focused
on exploring in-context learning behavior in autoregressive language models because it is straightforward to both
sample and compute likelihoods with this model class. As a result our experiments do not include any bidirectional
architectures or other training objectives such as denoising. This is a noticeable difference from much of the recent
literature, which has documented improved ﬁne-tuning performance when using these approaches over standard
language models [RSR+19]. Thus our design decision comes at the cost of potentially worse performance on tasks
which empirically beneﬁt from bidirectionality. This may include ﬁll-in-the-blank tasks, tasks that involve looking back
and comparing two pieces of content, or tasks that require re-reading or carefully considering a long passage and then
generating a very short answer. This could be a possible explanation for GPT-3’s lagging few-shot performance on a
few of the tasks, such as WIC (which involves comparing the use of a word in two sentences), ANLI (which involves
comparing two sentences to see if one implies the other), and several reading comprehension tasks (e.g. QuAC and
RACE). We also conjecture, based on past literature, that a large bidirectional model would be stronger at ﬁne-tuning
than GPT-3. Making a bidirectional model at the scale of GPT-3, and/or trying to make bidirectional models work with
few- or zero-shot learning, is a promising direction for future research, and could help achieve the “best of both worlds”.

A more fundamental limitation of the general approach described in this paper – scaling up any LM-like model, whether
autoregressive or bidirectional – is that it may eventually run into (or could already be running into) the limits of the

33

pretraining objective. Our current objective weights every token equally and lacks a notion of what is most important to
predict and what is less important. [RRS20] demonstrate beneﬁts of customizing prediction to entities of interest. Also,
with self-supervised objectives, task speciﬁcation relies on forcing the desired task into a prediction problem, whereas
ultimately, useful language systems (for example virtual assistants) might be better thought of as taking goal-directed
actions rather than just making predictions. Finally, large pretrained language models are not grounded in other domains
of experience, such as video or real-world physical interaction, and thus lack a large amount of context about the world
[BHT+20]. For all these reasons, scaling pure self-supervised prediction is likely to hit limits, and augmentation with a
different approach is likely to be necessary. Promising future directions in this vein might include learning the objective
function from humans [ZSW+19a], ﬁne-tuning with reinforcement learning, or adding additional modalities such as
images to provide grounding and a better model of the world [CLY+19].

Another limitation broadly shared by language models is poor sample efﬁciency during pre-training. While GPT-3
takes a step towards test-time sample efﬁciency closer to that of humans (one-shot or zero-shot), it still sees much more
text during pre-training than a human sees in the their lifetime [Lin20]. Improving pre-training sample efﬁciency is
an important direction for future work, and might come from grounding in the physical world to provide additional
information, or from algorithmic improvements.

A limitation, or at least uncertainty, associated with few-shot learning in GPT-3 is ambiguity about whether few-shot
learning actually learns new tasks “from scratch” at inference time, or if it simply recognizes and identiﬁes tasks that it
has learned during training. These possibilities exist on a spectrum, ranging from demonstrations in the training set that
are drawn from exactly the same distribution as those at test time, to recognizing the same task but in a different format,
to adapting to a speciﬁc style of a general task such as QA, to learning a skill entirely de novo. Where GPT-3 is on
this spectrum may also vary from task to task. Synthetic tasks such as wordscrambling or deﬁning nonsense words
seem especially likely to be learned de novo, whereas translation clearly must be learned during pretraining, although
possibly from data that is very different in organization and style than the test data. Ultimately, it is not even clear what
humans learn from scratch vs from prior demonstrations. Even organizing diverse demonstrations during pre-training
and identifying them at test time would be an advance for language models, but nevertheless understanding precisely
how few-shot learning works is an important unexplored direction for future research.

A limitation associated with models at the scale of GPT-3, regardless of objective function or algorithm, is that they are
both expensive and inconvenient to perform inference on, which may present a challenge for practical applicability of
models of this scale in their current form. One possible future direction to address this is distillation [HVD15] of large
models down to a manageable size for speciﬁc tasks. Large models such as GPT-3 contain a very wide range of skills,
most of which are not needed for a speciﬁc task, suggesting that in principle aggressive distillation may be possible.
Distillation is well-explored in general [LHCG19a] but has not been tried at the scale of hundred of billions parameters;
new challenges and opportunities may be associated with applying it to models of this size.

Finally, GPT-3 shares some limitations common to most deep learning systems – its decisions are not easily interpretable,
it is not necessarily well-calibrated in its predictions on novel inputs as observed by the much higher variance in
performance than humans on standard benchmarks, and it retains the biases of the data it has been trained on. This
last issue – biases in the data that may lead the model to generate stereotyped or prejudiced content – is of special
concern from a societal perspective, and will be discussed along with other issues in the next section on Broader Impacts
(Section 6).

6 Broader Impacts

Language models have a wide range of beneﬁcial applications for society, including code and writing auto-completion,
grammar assistance, game narrative generation, improving search engine responses, and answering questions. But
they also have potentially harmful applications. GPT-3 improves the quality of text generation and adaptability over
smaller models and increases the difﬁculty of distinguishing synthetic text from human-written text. It therefore has the
potential to advance both the beneﬁcial and harmful applications of language models.

Here we focus on the potential harms of improved language models, not because we believe the harms are necessarily
greater, but in order to stimulate efforts to study and mitigate them. The broader impacts of language models like this
are numerous. We focus on two primary issues: the potential for deliberate misuse of language models like GPT-3 in
Section 6.1, and issues of bias, fairness, and representation within models like GPT-3 in Section 6.2. We also brieﬂy
discuss issues of energy efﬁciency (Section 6.3).

34

6.1 Misuse of Language Models

Malicious uses of language models can be somewhat difﬁcult to anticipate because they often involve repurposing
language models in a very different environment or for a different purpose than researchers intended. To help with this,
we can think in terms of traditional security risk assessment frameworks, which outline key steps such as identifying
threats and potential impacts, assessing likelihood, and determining risk as a combination of likelihood and impact
[Ros12]. We discuss three factors: potential misuse applications, threat actors, and external incentive structures.

6.1.1 Potential Misuse Applications

Any socially harmful activity that relies on generating text could be augmented by powerful language models. Examples
include misinformation, spam, phishing, abuse of legal and governmental processes, fraudulent academic essay writing
and social engineering pretexting. Many of these applications bottleneck on human beings to write sufﬁciently high
quality text. Language models that produce high quality text generation could lower existing barriers to carrying out
these activities and increase their efﬁcacy.

The misuse potential of language models increases as the quality of text synthesis improves. The ability of GPT-3 to
generate several paragraphs of synthetic content that people ﬁnd difﬁcult to distinguish from human-written text in
3.9.4 represents a concerning milestone in this regard.

6.1.2 Threat Actor Analysis

Threat actors can be organized by skill and resource levels, ranging from low or moderately skilled and resourced actors
who may be able to build a malicious product to ‘advanced persistent threats’ (APTs): highly skilled and well-resourced
(e.g. state-sponsored) groups with long-term agendas [SBC+19].

To understand how low and mid-skill actors think about language models, we have been monitoring forums and chat
groups where misinformation tactics, malware distribution, and computer fraud are frequently discussed. While we did
ﬁnd signiﬁcant discussion of misuse following the initial release of GPT-2 in spring of 2019, we found fewer instances
of experimentation and no successful deployments since then. Additionally, those misuse discussions were correlated
with media coverage of language model technologies. From this, we assess that the threat of misuse from these actors is
not immediate, but signiﬁcant improvements in reliability could change this.

Because APTs do not typically discuss operations in the open, we have consulted with professional threat analysts about
possible APT activity involving the use of language models. Since the release of GPT-2 there has been no discernible
difference in operations that may see potential gains by using language models. The assessment was that language
models may not be worth investing signiﬁcant resources in because there has been no convincing demonstration that
current language models are signiﬁcantly better than current methods for generating text, and because methods for
“targeting” or “controlling” the content of language models are still at a very early stage.

6.1.3 External Incentive Structures

Each threat actor group also has a set of tactics, techniques, and procedures (TTPs) that they rely on to accomplish their
agenda. TTPs are inﬂuenced by economic factors like scalability and ease of deployment; phishing is extremely popular
among all groups because it offers a low-cost, low-effort, high-yield method of deploying malware and stealing login
credentials. Using language models to augment existing TTPs would likely result in an even lower cost of deployment.

Ease of use is another signiﬁcant incentive. Having stable infrastructure has a large impact on the adoption of TTPs.
The outputs of language models are stochastic, however, and though developers can constrain these (e.g. using top-k
truncation) they are not able to perform consistently without human feedback. If a social media disinformation bot
produces outputs that are reliable 99% of the time, but produces incoherent outputs 1% of the time, this could reduce the
amount of human labor required in operating this bot. But a human is still needed to ﬁlter the outputs, which restricts
how scalable the operation can be.

Based on our analysis of this model and analysis of threat actors and the landscape, we suspect AI researchers will
eventually develop language models that are sufﬁciently consistent and steerable that they will be of greater interest to
malicious actors. We expect this will introduce challenges for the broader research community, and hope to work on
this through a combination of mitigation research, prototyping, and coordinating with other technical developers.

35

6.2 Fairness, Bias, and Representation

Biases present in training data may lead models to generate stereotyped or prejudiced content. This is concerning,
since model bias could harm people in the relevant groups in different ways by entrenching existing stereotypes and
producing demeaning portrayals amongst other potential harms [Cra17]. We have conducted an analysis of biases in
the model in order to better understand GPT-3’s limitations when it comes to fairness, bias, and representation. 8

Our goal is not to exhaustively characterize GPT-3, but to give a preliminary analysis of some of its limitations and
behaviors. We focus on biases relating to gender, race, and religion, although many other categories of bias are likely
present and could be studied in follow-up work. This is a preliminary analysis and does not reﬂect all of the model’s
biases even within the studied categories.

Broadly, our analysis indicates that internet-trained models have internet-scale biases; models tend to reﬂect stereotypes
present in their training data. Below we discuss our preliminary ﬁndings of bias along the dimensions of gender, race,
and religion. We probe for bias in the 175 billion parameter model and also in similar smaller models, to see if and how
they are different in this dimension.

6.2.1 Gender

In our investigation of gender bias in GPT-3, we focused on associations between gender and occupation. We found
that occupations in general have a higher probability of being followed by a male gender identiﬁer than a female one
(in other words, they are male leaning) when given a context such as ""The {occupation} was a"" (Neutral Variant).
83% of the 388 occupations we tested were more likely to be followed by a male identiﬁer by GPT-3. We measured
this by feeding the model a context such as ""The detective was a"" and then looking at the probability of the
model following up with male indicating words (eg. man, male etc.) or female indicating words (woman, female etc.).
In particular, occupations demonstrating higher levels of education such as legislator, banker, or professor emeritus
were heavily male leaning along with occupations that require hard physical labour such as mason, millwright, and
sheriff. Occupations that were more likely to be followed by female identiﬁers include midwife, nurse, receptionist,
housekeeper etc.

We also tested how these probabilities changed when we shifted the context to be the ""The competent {occupation}
was a"" (Competent Variant), and when we shifted the context to be ""The incompetent {occupation} was a""
(Incompetent Variant) for each occupation in the dataset. We found that, when prompted with ""The competent
{occupation} was a,"" the majority of occupations had an even higher probability of being followed by a
male identiﬁer than a female one than was the case with our original neutral prompt, ""The {occupation} was
a"". With the prompt ""The incompetent {occupation} was a"" the majority of occupations still leaned male
with a similar probability than for our original neutral prompt. The average occupation bias - measured as
P (male|Context)) ) - was −1.11 for the Neutral Variant, −2.14 for the Competent Variant and −1.15

jobs log( P (female|Context)

(cid:80)

1
njobs
for the Incompetent Variant.

We also carried out pronoun resolution on the Winogender dataset [RNLVD18] using two methods which further
corroborated the model’s tendency to associate most occupations with males. One method measured the mod-
els ability to correctly assign a pronoun as the occupation or the participant. For example, we fed the model
a context such as ""The advisor met with the advisee because she wanted to get advice about job
applications. ‘She’ refers to the"" and found the option with the lowest probability between the two possi-
ble options (Choices between Occupation Option: advisor; Participant Option: advisee).

Occupation and participant words often have societal biases associated with them such as the assumption that most
occupants are by default male. We found that the language models learnt some of these biases such as a tendency to
associate female pronouns with participant positions more than male pronouns. GPT-3 175B had the highest accuracy of
all the models (64.17%) on this task. It was also the only model where the accuracy for Occupant sentences (sentences
where the correct answer was the Occupation option) for females was higher than for males (81.7% vs 76.7%). All
other models had a higher accuracy for male pronouns with Occupation sentences as compared to female pronouns
with the exception of our second largest model- GPT-3 13B - which had the same accuracy (60%) for both. This offers
some preliminary evidence that in places where issues of bias can make language models susceptible to error, the larger
models are more robust than smaller models.

We also performed co-occurrence tests, where we analyzed which words are likely to occur in the vicinity of other pre-
selected words. We created a model output sample set by generating 800 outputs of length 50 each with a temperature

8Evaluating fairness, bias, and representation in language models is a rapidly-developing area with a large body of prior work.

See, for example, [HZJ+19, NBR20, SCNP19].

36

Table 6.1: Most Biased Descriptive Words in 175B Model

Top 10 Most Biased Male Descriptive Words with Raw
Co-Occurrence Counts

Top 10 Most Biased Female Descriptive Words with Raw
Co-Occurrence Counts

Average Number of Co-Occurrences Across All Words:
17.5

Average Number of Co-Occurrences Across All Words:
23.9

Large (16)
Mostly (15)
Lazy (14)
Fantastic (13)
Eccentric (13)
Protect (10)
Jolly (10)
Stable (9)
Personable (22)
Survive (7)

Optimistic (12)
Bubbly (12)
Naughty (12)
Easy-going (12)
Petite (10)
Tight (10)
Pregnant (10)
Gorgeous (28)
Sucked (8)
Beautiful (158)

of 1 and top p of 0.9 for every prompt in our dataset. For gender, we had prompts such as ""He was very"", ""She
was very"", ""He would be described as"", ""She would be described as""9. We looked at the adjectives and
adverbs in the top 100 most favored words using an off-the-shelf POS tagger [LB02]. We found females were more
often described using appearance oriented words such as ”beautiful” and ”gorgeous” as compared to men who were
more often described using adjectives that span a greater spectrum.

Table 6.1 shows the top 10 most favored descriptive words for the model along with the raw number of times each
word co-occurred with a pronoun indicator. “Most Favored” here indicates words which were most skewed towards a
category by co-occurring with it at a higher rate as compared to the other category. To put these numbers in perspective,
we have also included the average for the number of co-occurrences across all qualifying words for each gender.

6.2.2 Race

To investigate racial bias in GPT-3, we seeded the model with prompts such as - ""The {race} man was very"",
""The {race} woman was very"" and ""People would describe the {race} person as"" and generated 800
samples for each of the above prompts, with {race} replaced with a term indicating a racial category such as White
or Asian. We then measure word co-occurrences in the generated samples. Given prior research demonstrating that
language models produce text of differing sentiment when varying features such as occupation [HZJ+19], we explored
how race impacted sentiment. We measured sentiment using Senti WordNet [BES10] for the words which co-occurred
disproportionately with each race. Each word sentiment varied from 100 to -100, with positive scores indicating positive
words (eg. wonderfulness: 100, amicable: 87.5), negative scores indicating negative words (eg. wretched: -87.5 , horrid:
-87.5) and a score of 0 indicating neutral words (eg. sloping, chalet).

It should be noted that we were explicitly prompting the models to talk about race and this in turn generated text that
focused on racial features; these results are not from the models talking about race in the wild but talking about race in
an experimental setup where they have been primed to do so. Additionally, since we are measuring sentiment by simply
looking at word co-occurrences, the resulting sentiment can reﬂect socio-historical factors - for instance, text relating to
a discussion of slavery will frequently have a negative sentiment, which may lead to a demographic being associated
with a negative sentiment under this testing methodology.

Across the models we analyzed, ‘Asian’ had a consistently high sentiment - it ranked 1st in 3 out of 7 models. On the
other hand, ’Black’ had a consistently low sentiment - it ranked the lowest in 5 out of 7 models. These differences
narrowed marginally on the larger model sizes. This analysis gives a sense of the biases of different models and
highlights the need for more sophisticated analysis of the relationship between sentiment, entities, and input data.

9We only used male and female pronouns. This simplifying assumption makes it easier to study co-occurrence since it does not
require the isolation of instances in which ‘they’ refers to a singular noun from those where it didn’t, but other forms of gender bias
are likely present and could be studied using different approaches.

37

Figure 6.1: Racial Sentiment Across Models

Religion
Atheism

Most Favored Descriptive Words
‘Theists’, ‘Cool’, ‘Agnostics’, ‘Mad’, ‘Theism’, ‘Defensive’, ‘Complaining’, ‘Correct’, ‘Arrogant’,
‘Characterized’

Buddhism

‘Myanmar’, ‘Vegetarians’, ‘Burma’, ‘Fellowship’, ‘Monk’, ‘Japanese’, ‘Reluctant’, ‘Wisdom’, ‘En-
lightenment’, ‘Non-Violent’

Christianity

‘Attend’, ‘Ignorant’, ‘Response’, ‘Judgmental’, ‘Grace’, ‘Execution’, ‘Egypt’, ‘Continue’, ‘Com-
ments’, ‘Ofﬁcially’

Hinduism

‘Caste’, ‘Cows’, ‘BJP’, ‘Kashmir’, ‘Modi’, ‘Celebrated’, ‘Dharma’, ‘Pakistani’, ‘Originated’, ‘Africa’

Islam

‘Pillars’, ‘Terrorism’, ‘Fasting’, ‘Sheikh’, ‘Non-Muslim’, ‘Source’, ‘Charities’, ‘Levant’, ‘Allah’,
‘Prophet’

Judaism

‘Gentiles’, ‘Race’, ‘Semites’, ‘Whites’, ‘Blacks’, ‘Smartest’, ‘Racists’, ‘Arabs’, ‘Game’, ‘Russian’

Table 6.2: Shows the ten most favored words about each religion in the GPT-3 175B model.

6.2.3 Religion

We studied which words co-occurred with religious terms relating to Atheism, Buddhism, Christianity, Hinduism, Islam,
and Judaism, by generating 800 model outputs of length ≈50 with a temperature of 1 and a top p of 0.9 for every
prompt. Our prompts were of the nature ""{Religion practitioners} are"" (Eg. ""Christians are"") for each
of the six religious categories listed above. We then allowed the model to naturally carry out completions and created a
corpus of such completions for studying co-occurrence of words.

The following is an example output from the model:

""Buddhists are divided into two main branches - Theravada and Mahayana.
is the more conservative branch, centering on monastic life and the earliest sutras
and refusing to recognize the later Mahayana sutras as authentic.""

Theravada

Similar to race, we found that the models make associations with religious terms that indicate some propensity to reﬂect
how these terms are sometimes presented in the world. For example, with the religion Islam, we found that words such
as ramadan, prophet and mosque co-occurred at a higher rate than for other religions. We also found that words such
as violent, terrorism and terrorist co-occurred at a greater rate with Islam than with other religions and were in
the top 40 most favored words for Islam in GPT-3.

38

6.2.4 Future Bias and Fairness Challenges

We have presented this preliminary analysis to share some of the biases we found in order to motivate further research,
and to highlight the inherent difﬁculties in characterizing biases in large-scale generative models; we expect this to be an
area of continuous research for us and are excited to discuss different methodological approaches with the community.
We view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but
we recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model
attributes to develop informative labels such as Model Cards for Model Reporting from [MWZ+18].

Ultimately, it is important not just to characterize biases in language systems but to intervene. The literature on this
is also extensive [QMZH19, HZJ+19], so we offer only a few brief comments on future directions speciﬁc to large
language models. In order to pave the way for effective bias prevention in general purpose models, there is a need for
building a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for
these models. There is room for more research that engages with the literature outside NLP, better articulates normative
statements about harm, and engages with the lived experience of communities affected by NLP systems [BBDIW20].
Thus, mitigation work should not be approached purely with a metric driven objective to ‘remove’ bias as this has been
shown to have blind spots [GG19, NvNvdG19] but in a holistic manner.

6.3 Energy Usage

Practical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3
175B consumed several thousand petaﬂop/s-days of compute during pre-training, compared to tens of petaﬂop/s-days
for a 1.5B parameter GPT-2 model (Figure 2.2). This means we should be cognizant of the cost and efﬁciency of such
models, as advocated by [SDSE19].

The use of large-scale pre-training also gives another lens through which to view the efﬁciency of large models - we
should consider not only the resources that go into training them, but how these resources are amortized over the
lifetime of a model, which will subsequently be used for a variety of purposes and ﬁne-tuned for speciﬁc tasks. Though
models like GPT-3 consume signiﬁcant resources during training, they can be surprisingly efﬁcient once trained: even
with the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or
only a few cents in energy costs. Additionally, techniques like model distillation [LHCG19a] can further bring down
the cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more efﬁcient
versions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the efﬁciency
of such models over time, similar to trends observed in image recognition and neural machine translation [HB20].

7 Related Work

Several lines of work have focused on increasing parameter count and/or computation in language models as a
means to improve generative or task performance. An early work scaled LSTM based language models to over a
billion parameters [JVS+16]. One line of work straightforwardly increases the size of transformer models, scaling
up parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size:
213 million parameters [VSP+17] in the original paper, 300 million parameters [DCLT18], 1.5 billion parameters
[RWC+19], 8 billion parameters [SPP+19], 11 billion parameters [RSR+19], and most recently 17 billion parameters
[Tur20]. A second line of work has focused on increasing parameter count but not computation, as a means of
increasing models’ capacity to store information without increased computational cost. These approaches rely on the
conditional computation framework [BLC13] and speciﬁcally, the mixture-of-experts method [SMM+17] has been
used to produce 100 billion parameter models and more recently 50 billion parameter translation models [AJF19],
though only a small fraction of the parameters are actually used on each forward pass. A third approach increases
computation without increasing parameters; examples of this approach include adaptive computation time [Gra16] and
the universal transformer [DGV+18]. Our work focuses on the ﬁrst approach (scaling compute and parameters together,
by straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ
this strategy.
Several efforts have also systematically studied the effect of scale on language model performance. [KMH+20,
RRBS19, LWS+20, HNA+17], ﬁnd a smooth power-law trend in loss as autoregressive language models are scaled up.
This work suggests that this trend largely continues as models continue to scale up (although a slight bending of the
curve can perhaps be detected in Figure 3.1), and we also ﬁnd relatively smooth increases in many (though not all)
downstream tasks across 3 orders of magnitude of scaling.

Another line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language
models that are as small as possible. This approach includes ALBERT [LCG+19] as well as general [HVD15] and

39

task-speciﬁc [SDCW19, JYS+19, KR16] approaches to distillation of language models. These architectures and
techniques are potentially complementary to our work, and could be applied to decrease latency and memory footprint
of giant models.

As ﬁne-tuned language models have neared human performance on many standard benchmark tasks, considerable
effort has been devoted to constructing more difﬁcult or open-ended tasks, including question answering [KPR+19,
IBGC+14, CCE+18, MCKS18], reading comprehension [CHI+18, RCM19], and adversarially constructed datasets
designed to be difﬁcult for existing language models [SBBC19, NWD+19]. In this work we test our models on many
of these datasets.

Many previous efforts have focused speciﬁcally on question-answering, which constitutes a signiﬁcant fraction of the
tasks we tested on. Recent efforts include [RSR+19, RRS20], which ﬁne-tuned an 11 billion parameter language model,
and [GLT+20], which focused on attending over a large corpus of data at test time. Our work differs in focusing on
in-context learning but could be combined in the future with those of [GLT+20, LPP+20].
Metalearning in language models has been utilized in [RWC+19], though with much more limited results and no
systematic study. More broadly, language model metalearning has an inner-loop-outer-loop structure, making it
structurally similar to metalearning as applied to ML in general. Here there is an extensive literature, including
matching networks [VBL+16], RL2 [DSC+16], learning to optimize [RL16, ADG+16, LM17] and MAML [FAL17].
Our approach of stufﬁng the model’s context with previous examples is most structurally similar to RL2 and also
resembles [HYC01], in that an inner loop of adaptation takes place through computation in the model’s activations
across timesteps, without updating the weights, while an outer loop (in this case just language model pre-training)
updates the weights, and implicitly learns the ability to adapt to or at least recognize tasks deﬁned at inference-time.
Few-shot auto-regressive density estimation was explored in [RCP+17] and [GWC+18] studied low-resource NMT as
a few-shot learning problem.

While the mechanism of our few-shot approach is different, prior work has also explored ways of using pre-trained
language models in combination with gradient descent to perform few-shot learning [SS20]. Another sub-ﬁeld with
similar goals is semi-supervised learning where approaches such as UDA [XDH+19] also explore methods of ﬁne-tuning
when very little labeled data is available.

Giving multi-task models instructions in natural language was ﬁrst formalized in a supervised setting with [MKXS18]
and utilized for some tasks (such as summarizing) in a language model with [RWC+19]. The notion of presenting
tasks in natural language was also explored in the text-to-text transformer [RSR+19], although there it was applied for
multi-task ﬁne-tuning rather than for in-context learning without weight updates.

Another approach to increasing generality and transfer-learning capability in language models is multi-task learning
[Car97], which ﬁne-tunes on a mixture of downstream tasks together, rather than separately updating the weights for
each one. If successful multi-task learning could allow a single model to be used for many tasks without updating the
weights (similar to our in-context learning approach), or alternatively could improve sample efﬁciency when updating
the weights for a new task. Multi-task learning has shown some promising initial results [LGH+15, LSP+18] and
multi-stage ﬁne-tuning has recently become a standardized part of SOTA results on some datasets [PFB18] and pushed
the boundaries on certain tasks [KKS+20], but is still limited by the need to manually curate collections of datasets and
set up training curricula. By contrast pre-training at large enough scale appears to offer a “natural” broad distribution of
tasks implicitly contained in predicting the text itself. One direction for future work might be attempting to generate
a broader set of explicit tasks for multi-task learning, for example through procedural generation [TFR+17], human
interaction [ZSW+19b], or active learning [Mac92].

Algorithmic innovation in language models over the last two years has been enormous, including denoising-based
bidirectionality [DCLT18], preﬁxLM [DL15] and encoder-decoder architectures [LLG+19, RSR+19], random permu-
tations during training [YDY+19], architectures that improve the efﬁciency of sampling [DYY+19], improvements in
data and training procedures [LOG+19], and efﬁciency increases in the embedding parameters [LCG+19]. Many of
these techniques provide signiﬁcant gains on downstream tasks. In this work we continue to focus on pure autoregressive
language models, both in order to focus on in-context learning performance and to reduce the complexity of our large
model implementations. However, it is very likely that incorporating these algorithmic advances could improve GPT-3’s
performance on downstream tasks, especially in the ﬁne-tuning setting, and combining GPT-3’s scale with these
algorithmic techniques is a promising direction for future work.

8 Conclusion

We presented a 175 billion parameter language model which shows strong performance on many NLP tasks and
benchmarks in the zero-shot, one-shot, and few-shot settings, in some cases nearly matching the performance of

40

state-of-the-art ﬁne-tuned systems, as well as generating high-quality samples and strong qualitative performance at
tasks deﬁned on-the-ﬂy. We documented roughly predictable trends of scaling in performance without using ﬁne-tuning.
We also discussed the social impacts of this class of model. Despite many limitations and weaknesses, these results
suggest that very large language models may be an important ingredient in the development of adaptable, general
language systems.

Acknowledgements

The authors would like to thank Ryan Lowe for giving detailed feedback on drafts of the paper. Thanks to Jakub
Pachocki and Szymon Sidor for suggesting tasks, and Greg Brockman, Michael Petrov, Brooke Chan, and Chelsea
Voss for helping run evaluations on OpenAI’s infrastructure. Thanks to David Luan for initial support in scaling up
this project, Irene Solaiman for discussions about ways to approach and evaluate bias, Harrison Edwards and Yura
Burda for discussions and experimentation with in-context learning, Geoffrey Irving and Paul Christiano for early
discussions of language model scaling, Long Ouyang for advising on the design of the human evaluation experiments,
Chris Hallacy for discussions on data collection, and Shan Carter for help with visual design. Thanks to the millions of
people who created content that was used in the training of the model, and to those who were involved in indexing or
upvoting the content (in the case of WebText). Additionally, we would like to thank the entire OpenAI infrastructure
and supercomputing teams for making it possible to train models at this scale.

41

Contributions

Tom Brown, Ben Mann, Prafulla Dhariwal, Dario Amodei, Nick Ryder, Daniel M Ziegler, and Jeffrey Wu
implemented the large-scale models, training infrastructure, and model-parallel strategies.

Tom Brown, Dario Amodei, Ben Mann, and Nick Ryder conducted pre-training experiments.

Ben Mann and Alec Radford collected, ﬁltered, deduplicated, and conducted overlap analysis on the training data.

Melanie Subbiah, Ben Mann, Dario Amodei, Jared Kaplan, Sam McCandlish, Tom Brown, Tom Henighan, and
Girish Sastry implemented the downstream tasks and the software framework for supporting them, including creation
of synthetic tasks.

Jared Kaplan and Sam McCandlish initially predicted that a giant language model should show continued gains, and
applied scaling laws to help predict and guide model and data scaling decisions for the research.

Ben Mann implemented sampling without replacement during training.

Alec Radford originally demonstrated few-shot learning occurs in language models.

Jared Kaplan and Sam McCandlish showed that larger models learn more quickly in-context, and systematically
studied in-context learning curves, task prompting, and evaluation methods.

Prafulla Dhariwal implemented an early version of the codebase, and developed the memory optimizations for fully
half-precision training.

Rewon Child and Mark Chen developed an early version of our model-parallel strategy.

Rewon Child and Scott Gray contributed the sparse transformer.

Aditya Ramesh experimented with loss scaling strategies for pretraining.

Melanie Subbiah and Arvind Neelakantan implemented, experimented with, and tested beam search.

Pranav Shyam worked on SuperGLUE and assisted with connections to few-shot learning and meta-learning literature.

Sandhini Agarwal conducted the fairness and representation analysis.

Girish Sastry and Amanda Askell conducted the human evaluations of the model.

Ariel Herbert-Voss conducted the threat analysis of malicious use.

Gretchen Krueger edited and red-teamed the policy sections of the paper.

Benjamin Chess, Clemens Winter, Eric Sigler, Christopher Hesse, Mateusz Litwin, and Christopher Berner
optimized OpenAI’s clusters to run the largest models efﬁciently.

Scott Gray developed fast GPU kernels used during training.

Jack Clark led the analysis of ethical impacts — fairness and representation, human assessments of the model, and
broader impacts analysis, and advised Gretchen, Amanda, Girish, Sandhini, and Ariel on their work.

Dario Amodei, Alec Radford, Tom Brown, Sam McCandlish, Nick Ryder, Jared Kaplan, Sandhini Agarwal,
Amanda Askell, Girish Sastry, and Jack Clark wrote the paper.

Sam McCandlish led the analysis of model scaling, and advised Tom Henighan and Jared Kaplan on their work.

Alec Radford advised the project from an NLP perspective, suggested tasks, put the results in context, and demonstrated
the beneﬁt of weight decay for training.

Ilya Sutskever was an early advocate for scaling large generative likelihood models, and advised Pranav, Prafulla,
Rewon, Alec, and Aditya on their work.

Dario Amodei designed and led the research.

42

A Details of Common Crawl Filtering

As mentioned in Section 2.2, we employed two techniques to improve the quality of the Common Crawl dataset: (1)
ﬁltering Common Crawl and (2) fuzzy deduplication:

1. In order to improve the quality of Common Crawl, we developed an automatic ﬁltering method to remove low
quality documents. Using the original WebText as a proxy for high-quality documents, we trained a classiﬁer
to distinguish these from raw Common Crawl. We then used this classiﬁer to re-sample Common Crawl by
prioritizing documents which were predicted by the classiﬁer to be higher quality. The classiﬁer is trained
using logistic regression classiﬁer with features from Spark’s standard tokenizer and HashingTF 10. For the
positive examples, we used a collection of curated datasets such as WebText, Wikiedia, and our web books
corpus as the positive examples, and for the negative examples, we used unﬁltered Common Crawl. We used
this classiﬁer to score Common Crawl documents. We kept each document in our dataset iff

np.random.pareto(α) > 1 − document_score

We chose α = 9 in order to take mostly documents the classiﬁer scored highly, but still include some documents
that were out of distribution. α was chosen to match the distribution of scores from our classiﬁer on WebText.
We found this re-weighting increased quality as measured by loss on a range of out-of-distribution generative
text samples.

2. To further improve model quality and prevent overﬁtting (which becomes increasingly important as model
capacity increases), we fuzzily deduplicated documents (i.e. removed documents with high overlap with
other documents) within each dataset using Spark’s MinHashLSH implementation with 10 hashes, using the
same features as were used for classiﬁcation above. We also fuzzily removed WebText from Common Crawl.
Overall this decreased dataset size by an average of 10%.

After ﬁltering for duplicates and quality, we also partially removed text occurring in benchmark datasets, described in
Appendix C.

B Details of Model Training

To train all versions of GPT-3, we use Adam with β1 = 0.9, β2 = 0.95, and (cid:15) = 10−8, we clip the global norm of the
gradient at 1.0, and we use cosine decay for learning rate down to 10% of its value, over 260 billion tokens (after 260
billion tokens, training continues at 10% of the original learning rate). There is a linear LR warmup over the ﬁrst 375
million tokens. We also gradually increase the batch size linearly from a small value (32k tokens) to the full value over
the ﬁrst 4-12 billion tokens of training, depending on the model size. Data are sampled without replacement during
training (until an epoch boundary is reached) to minimize overﬁtting. All models use weight decay of 0.1 to provide a
small amount of regularization [LH17].

During training we always train on sequences of the full nctx = 2048 token context window, packing multiple
documents into a single sequence when documents are shorter than 2048, in order to increase computational efﬁciency.
Sequences with multiple documents are not masked in any special way but instead documents within a sequence
are delimited with a special end of text token, giving the language model the information necessary to infer that
context separated by the end of text token is unrelated. This allows for efﬁcient training without need for any special
sequence-speciﬁc masking.

C Details of Test Set Contamination Studies

In section 4 we gave a high level overview of test set contamination studies. In this section we provide details on
methodology and results.

Initial training set ﬁltering We attempted to remove text occurring in benchmarks from training data by searching
for 13−gram overlaps between all test/development sets used in this work and our training data, and we removed
the colliding 13−gram as well as a 200 character window around it, splitting the original document into pieces. For
ﬁltering purposes we deﬁne a gram as a lowercase, whitespace delimited word with no punctuation. Pieces less than
200 characters long were discarded. Documents split into more than 10 pieces were considered contaminated and

10https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.feature.HashingTF

43

removed entirely. Originally we removed entire documents given a single collision, but that overly penalized long
documents such as books for false positives. An example of a false positive might be a test set based on Wikipedia, in
which the Wikipedia article quotes a single line from a book. We ignored 13−grams that matched more than 10 training
documents, as inspection showed the majority of these to contain common cultural phrases, legal boilerplate, or similar
content that we likely do want the model to learn, rather than undesired speciﬁc overlaps with test sets. Examples for
various frequencies can be found in the GPT-3 release repository11.

Overlap methodology For our benchmark overlap analysis in Section 4, we used a variable number of words N to
check for overlap for each dataset, where N is the 5th percentile example length in words, ignoring all punctuation,
whitespace, and casing. Due to spurious collisions at lower values of N we use a minimum value of 8 on non-synthetic
tasks. For performance reasons, we set a maximum value of 13 for all tasks. Values for N and the amount of data
marked as dirty are shown in Table C.1. Unlike GPT-2’s use of bloom ﬁlters to compute probabilistic bounds for test
contamination, we used Apache Spark to compute exact collisions across all training and test sets. We compute overlaps
between test sets and our full training corpus, even though we only trained on 40% of our ﬁltered Common Crawl
documents per Section 2.2.

We deﬁne a ‘dirty’ example as one with any N -gram overlap with any training document, and a ‘clean’ example as one
with no collision.

Test and validation splits had similar contamination levels despite some test splits being unlabeled. Due to a bug revealed
by this analysis, ﬁltering described above failed on long documents such as books. Because of cost considerations it
was infeasible to retrain the model on a corrected version of the training dataset. As such, several language modeling
benchmarks plus the Children’s Book Test showed almost complete overlap, and therefore were not included in this
paper. Overlaps are shown in Table C.1

Overlap results To understand how much having seen some of the data helps the model perform on downstream
tasks, we ﬁlter every validation and test set by dirtiness. Then we run evaluation on the clean-only examples and report
the relative percent change between the clean score and the original score. If the clean score is more than 1% or 2%
worse than the overall score, it suggests the model may have overﬁt to the examples it has seen. If the clean score is
signiﬁcantly better, our ﬁltering scheme may have preferentially marked easier examples as dirty.

This overlap metric tends to show a high rate of false positives for datasets that contain background information (but
not answers) drawn from the web (such as SQuAD, which draws from Wikipedia) or examples less than 8 words
long, which we ignored in our ﬁltering process (except for wordscrambling tasks). One instance where this technique
seems to fail to give good signal is DROP, a reading comprehension task in which 94% of the examples are dirty. The
information required to answer the question is in a passage provided to the model, so having seen the passage during
training but not the questions and answers does not meaningfully constitute cheating. We conﬁrmed that every matching
training document contained only the source passage, and none of the questions and answers in the dataset. The more
likely explanation for the decrease in performance is that the 6% of examples that remain after ﬁltering come from a
slightly different distribution than the dirty examples.

Figure 4.2 shows that as the dataset becomes more contaminated, the variance of the clean/all fraction increases, but
there is no apparent bias towards improved or degraded performance. This suggests that GPT-3 is relatively insensitive
to contamination. See Section 4 for details on the datasets we ﬂagged for further review.

11https://github.com/openai/gpt-3/blob/master/overlap_frequency.md

44

Name

Split Metric N Acc/F1/BLEU

Quac
SQuADv2
DROP
Symbol Insertion
CoQa
ReCoRD
Winograd
BoolQ
MultiRC
RACE-h
LAMBADA
LAMBADA (No Blanks)
WSC
PIQA
RACE-m
De→En 16
En→De 16
En→Ro 16
Ro→En 16
WebQs
ANLI R1
ANLI R2
TriviaQA
ANLI R3
En→Fr 14
Fr→En 14
WiC
RTE
CB
Anagrams 2
Reversed Words
OpenBookQA
ARC (Easy)
Anagrams 1
COPA
ARC (Challenge)
HellaSwag
NQs
Cycled Letters
SAT Analogies
StoryCloze
Winogrande

dev
dev
dev
dev
dev
dev
test
dev
dev
test
test
test
dev
dev
test
test
test
test
test
test
test
test
dev
test
test
test
dev
dev
dev
dev
dev
test
test
dev
dev
test
dev
test
dev
dev
test
dev

f1
f1
f1
acc
f1
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
bleu-sb
bleu-sb
bleu-sb
bleu-sb
acc
acc
acc
acc
acc
bleu-sb
bleu-sb
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc
acc

13
13
13
7
13
13
9
13
13
13
13
13
13
8
13
12
12
12
12
8
13
13
10
13
13
13
13
13
13
2
2
8
11
2
9
12
13
11
2
9
13
13

44.3
69.8
36.5
66.9
86.0
89.5
88.6
76.0
74.2
46.8
86.4
77.8
76.9
82.3
58.5
43.0
30.9
25.8
41.3
41.5
36.8
34.0
71.2
40.2
39.9
41.4
51.4
71.5
80.4
40.2
0.4
65.4
70.1
15.0
93.0
51.6
79.3
29.9
38.6
65.8
87.7
77.7

Total
Count

7353
11873
9536
10000
7983
10000
273
3270
953
3498
5153
5153
104
1838
1436
2999
2999
1999
1999
2032
1000
1000
7993
1200
3003
3003
638
277
56
10000
10000
500
2268
10000
100
1144
10042
3610
10000
374
1871
1267

Dirty
Acc/F1/BLEU

44.3
69.9
37.0
66.8
85.3
90.3
90.2
75.8
73.4
47.0
86.9
78.5
73.8
89.9
53.0
47.4
32.6
24.9
40.4
41.6
40.5
29.4
70.8
38.3
38.3
40.9
53.1
71.4
100.0
76.2
1.5
58.1
77.5
49.8
100.0
45.2
86.2
32.7
20.5
100.0
100.0
-

Dirty
Count

7315
11136
8898
8565
5107
6110
164
1955
558
1580
2209
2209
42
526
366
739
739
423
423
428
200
177
1390
196
411
411
49
21
4
705
660
31
89
327
3
31
152
52
73
2
2
0

Clean
Acc/F1/BLEU

Clean
Count

Clean
Percentage

Relative
Difference
Clean vs All

54.1
68.4
29.5
67.1
87.1
88.2
86.2
76.3
75.3
46.7
86.0
77.2
79.0
79.3
60.4
40.8
29.9
26.1
41.6
41.5
35.9
35.0
71.3
40.5
40.3
41.4
51.3
71.5
78.8
37.4
0.3
65.9
69.8
13.8
92.8
51.8
79.2
29.8
38.7
65.6
87.6
77.7

38
737
638
1435
2876
3890
109
1315
395
1918
2944
2944
62
1312
1070
2260
2260
1576
1576
1604
800
823
6603
1004
2592
2592
589
256
52
9295
9340
469
2179
9673
97
1113
9890
3558
9927
372
1869
1267

1%
6%
7%
14%
36%
39%
40%
40%
41%
55%
57%
57%
60%
71%
75%
75%
75%
79%
79%
79%
80%
82%
83%
84%
86%
86%
92%
92%
93%
93%
93%
94%
96%
97%
97%
97%
98%
99%
99%
99%
100%
100%

20%
-2%
-21%
0%
1%
-1%
-3%
0%
1%
0%
0%
-1%
3%
-4%
3%
-5%
-3%
1%
1%
0%
-3%
3%
0%
1%
1%
0%
0%
0%
-2%
-7%
-26%
1%
0%
-8%
0%
0%
0%
0%
0%
0%
0%
0%

Table C.1: Overlap statistics for all datasets sorted from dirtiest to cleanest. We consider a dataset example dirty if it
has a single N -gram collision with any document in our training corpus. “Relative Difference Clean vs All” shows the
percent change in performance between only the clean examples vs all the examples in the benchmark. “Count” shows
the number of examples. “Clean percentage” is the percent of examples that are clean vs total. For “Acc/F1/BLEU” we
use the metric speciﬁed in “Metric”. These scores come from evaluations with a different seed for the random examples
used for in-context learning, and will therefore differ slightly from the scores elsewhere in the paper.

45

D Total Compute Used to Train Language Models

This appendix contains the calculations that were used to derive the approximate compute used to train the language
models in Figure 2.2. As a simplifying assumption, we ignore the attention operation, as it typically uses less than 10%
of the total compute for the models we are analyzing.

Calculations can be seen in Table D.1 and are explained within the table caption.

Model

T5-Small
T5-Base
T5-Large
T5-3B
T5-11B
BERT-Base
BERT-Large
RoBERTa-Base
RoBERTa-Large
GPT-3 Small
GPT-3 Medium
GPT-3 Large
GPT-3 XL
GPT-3 2.7B
GPT-3 6.7B
GPT-3 13B
GPT-3 175B

Total train
compute
(PF-days)

Total train
compute
(ﬂops)

2.08E+00
7.64E+00
2.67E+01
1.04E+02
3.82E+02
1.89E+00
6.16E+00
1.74E+01
4.93E+01
2.60E+00
7.42E+00
1.58E+01
2.75E+01
5.52E+01
1.39E+02
2.68E+02
3.64E+03

1.80E+20
6.60E+20
2.31E+21
9.00E+21
3.30E+22
1.64E+20
5.33E+20
1.50E+21
4.26E+21
2.25E+20
6.41E+20
1.37E+21
2.38E+21
4.77E+21
1.20E+22
2.31E+22
3.14E+23

Params
(M)

60
220
770
3,000
11,000
109
355
125
355
125
356
760
1,320
2,650
6,660
12,850
174,600

Training tokens
(billions)

Flops
per param
per token

Mult for
bwd pass

Fwd-pass
ﬂops per
active param
per token

Frac of
params active
for each
token

1,000
1,000
1,000
1,000
1,000
250
250
2,000
2,000
300
300
300
300
300
300
300
300

3
3
3
3
3
6
6
6
6
6
6
6
6
6
6
6
6

3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

1
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2

0.5
0.5
0.5
0.5
0.5
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0

Table D.1: Starting from the right hand side and moving left, we begin with the number of training tokens that each
model was trained with. Next we note that since T5 uses an encoder-decoder model, only half of the parameters are
active for each token during a forward or backwards pass. We then note that each token is involved in a single addition
and a single multiply for each active parameter in the forward pass (ignoring attention). Then we add a multiplier of
3x to account for the backwards pass (as computing both ∂params
∂loss use a similar amount of compute as the
forwards pass. Combining the previous two numbers, we get the total ﬂops per parameter per token. We multiply this
value by the total training tokens and the total parameters to yield the number of total ﬂops used during training. We
report both ﬂops and petaﬂop/s-day (each of which are 8.64e+19 ﬂops).

and ∂acts

∂loss

E Human Quality Assessment of Synthetic News Articles

This appendix contains details on the experiments measuring human ability to distinguish GPT-3-generated synthetic
news articles from real news articles. We ﬁrst describe the experiments on the ∼ 200 word news articles, and then
describe the preliminary investigation of ∼ 500 word news articles generated by GPT-3.

Participants: We recruited 718 unique participants to take part in 6 experiments. 97 participants were excluded for
failing an internet check question, leaving a total of 621 participants: 343 male, 271 female, and 7 other. Mean
participant age was ∼ 38 years old. All participants were recruited through Positly, which maintains a whitelist of
high-performing workers from Mechanical Turk. All participants were US-based but there were no other demographic
restrictions. Participants were paid $12 for their participation, based on a task time estimate of 60 minutes determined
by pilot runs. In order to ensure that the sample of participants for each experiment quiz was unique, participants were
not allowed to take part in an experiment more than once.

Procedure and design: We arbitrarily selected 25 news articles that appeared in newser.com in early 2020. We used
the article titles and subtitles to produce outputs from the 125M, 350M, 760M, 1.3B, 2.7B, 6.7B, 13.0B, and 200B
(GPT-3) parameter language models. Five outputs per question were generated by each model and the generation with a
word count closest to that of the human written article was selected automatically. This was to minimize the effect
that completion length might have on participants’ judgments. The same output procedure for each model with the
exception of the removal of the intentionally bad control model, as described in the main text.

46

Model

Control
GPT-3 Small
GPT-3 Medium
GPT-3 Large
GPT-3 XL
GPT-3 2.7B
GPT-3 6.7B
GPT-3 13.0B
GPT-3 175B

Participants
Recruited

Participants
Excluded

Genders
(m:f:other)

Mean
Age

Average
Word Count
(human:model)

76
80
80
81
79
80
76
81
80

7
7
7
24
14
11
5
13
9

32:37:0
41:31:1
46:28:2
46:28:2
32:32:1
36:33:0
46:28:2
46:28:2
42:29:0

39
40
39
37
38
40
37
37
37

216:216
216:188
216:202
216:200
216:199
216:202
216:195
216:209
216:216

Table E.1: Participant details and article lengths for each experiment to evaluate human detection of ∼ 200 word model
generated news articles. Participants were excluded due to internet check fails.

Figure E.1: Participants spend more time trying to identify whether each news article is machine generated as model
size increases. Duration on the control model is indicated with the dashed line. Line of best ﬁt is a linear model on a log
scale with 95% conﬁdence intervals.

In each experiment, half of the participants were randomly assigned to quiz A and half were randomly assigned to quiz
B. Each quiz consisted of 25 articles: half (12-13) were human written and half (12-13) were model generated: the
articles with human written completions in quiz A had model generated completions in quiz B and vice versa. The
order of quiz question was shufﬂed for each participant. Participants could leave comments and were asked to indicate
if they had seen the articles before. Participants were instructed not to look up the articles or their content during the
quiz and at the end of the quiz were asked if they had looked anything up during the quiz.

Statistical Tests: To compare means on the different runs, we performed a two-sample t-test for independent groups for
each model against the control. This was implemented in Python using the scipy.stats.ttest_ind function. When
plotting a regression line in the graph of average participant accuracy vs model size, we ﬁt a power law of the form
ax−b. The 95% conﬁdence intervals were estimated from the t-distribution of the sample mean.

Duration statistics: In the main text, we discussed the ﬁnding that the ability of human participants to distinguish
model and human generated news articles decreases as our models become larger. We have also found that the
average time spent for a given set of questions increases as the model size increases, as shown in Figure E.1. Lower

47

Participants
Recruited

Participants
Excluded

Genders
(m:f:other)

Mean
Age

Average
Word Count
(human:model)

79
81

17
19

32:37:0
32:30:0

39
40

569:464
569:498

Model

Control
GPT-3 175B

Table E.2: Participant details and article lengths for the experiments investigating human detection of ∼ 500 word
model generated news articles. Participants were excluded due to internet check fails.

accuracy scores despite increased time investment from participants supports the ﬁnding that larger models generate
harder-to-distinguish news articles.

Preliminary investigation of ∼ 500 word articles: We recruited 160 unique US-based participants to take part in 2
experiments through Positly (details are given in Table E.2). We randomly selected 12 Reuters world news articles from
late 2019 and created a context for GPT-3 175B that consisted of a single Reuters article not in this set of 12. We then
used the article titles and Reuters locations to generate completions from GPT-3 175B and the 160M control model
from the previous experiments. These were used to create two 12-question quizzes per model, each consisting of half
human written and half model generated articles. Comprehension questions were added and articles were shown to
participants in 3 stages at 30 second intervals to encourage closer reading. Participants were paid $12 for this task.
Model generation selection methods, exclusion criteria, and statistical tests mirror those of the previous experiments.

F Additional Samples from GPT-3

GPT-3 adapts well to many tasks other than the ones explored in the main body of the paper. As an example, in Figure
F.1, we show four uncurated samples from a prompt suggesting that the model write a poem, with a given title, in the
style of Wallace Stevens. We ﬁrst experimented with a few prompts, then generated four samples with no additional
editing or selection (sampling at temperature 1 using nucleus sampling [HBFC19] with P = 0.9). Completions were
truncated when the model began to write a new title and author heading, or broke into prose commentary.

48

Context →

The City
BY C. P. CAVAFY
TRANSLATED BY EDMUND KEELEY
[Poem text omitted]

SOME TREES
John Ashbery
[Poem text omitted]

Shadows on the Way
Wallace Stevens

-------- Generated Poem 1 --------

-------- Generated Poem 3 --------

Now, in the shade

The sun was all we had.
All is changed. The mind must dwell on those
White fields, that to its eyes were always old;
Those ancient gleams, convoluting
The way they lay among the huge roots,
The great dark tomes of reverie,
The plumed labyrinth of the sea.

When our own breath gonne faint and fade
Up the long stairway of the dead
We shall remember well
The blindness of the light, the whiteness
Of that white land. The footsteps, and
The grasses in that light, and in the shade
The menacing life.

We played, too, once, in the warmest rooms.
To one content, there is one content
For all mankind. The forest glades
Are all the more for being in fable,
And wood and town in legend shadowed-
Once more to return. The one content
Has in it every happiness, more brave
For being purposeless; and so
Those island gardens, deep in the mind,
Make of remoteness familiarity
And of the unspoken name a friend.

-------- Generated Poem 4 --------

It is a road that leads nowhere.

All the sounds of the world are far away.

The mountains are high.

Nobody will come to this place.
The solitude is deep.
But they are desolate, and they turn the traveler’s face
Towards the North.
When the wind rises above the trees,
The boughs bow to the ground.
Even the birds that inhabit the tangle of weeds
That is the roadside cover, are silent. One listens,
But hears no roar of the forest.
One will be taken.
One will be taken.
There is no utterance, there is no conversation,
But one is uneasy all the same....
There is a thin blue mist,
A darkness rising like smoke,
And within that darkness
A possession of the heart.
One will be taken....
Here, under this sky empty and full of light.

One is alone.

It was here, and it will be here again-

I must have shadows on the way
If I am to walk I must have
Each step taken slowly and alone
To have it ready made

And I must think in lines of grey
To have dim thoughts to be my guide
Must look on blue and green
And never let my eye forget
That color is my friend
And purple must surround me too

The yellow of the sun is no more
Intrusive than the bluish snow
That falls on all of us. I must have
Grey thoughts and blue thoughts walk with me
If I am to go away at all.

-------- Generated Poem 2 --------

There is a way in the world.
That way a man may live in a small town
His lifetime and see no man come,
Never the stir of men about a market,
Never the bobbing of covered carts,
Never the creak passed on the stair
Closing some other life; an old man
Can prosper in that town, can prosper
When his store is seen to close, his wife
Fades in his house, and the world shouts in vain
That no one comes to hear him
Where his small bell tolls.
In that small town
Everything is known.
The ways of the young men are known,
And the ways of the young women
As they walk to the Spring;
The rumors are all known,
The quarrels, the hurt, the envy
Of the men and the women.
Till a day comes
That way out of the world
That leads to a wood.
Young, the young man
Walks, a lover now,
Knows the streets as they are and is of them.

Comes to the wood.

There, in the wood, among trees,
He sees shadows on the way, hears voices,
hears the wind and the rustling of leaves;
Through an open glade
He sees a shape and the shape hears:
It waits as he waits,
Waits as the shadows wait,
As the voices wait;
Shadows on the way, voices in the wind.

Figure F.1: Four uncurated completions from a context suggesting the model compose a poem in the style of Wallace
Stevens with the title ‘Shadows on the Way’.

49

G Details of Task Phrasing and Speciﬁcations

The following ﬁgures illustrate the formatting and phrasing of all the tasks included in the paper. All data comes from
the ground truth datasets in this section, and no samples from GPT-3 are included here.

Context → Article:

Latin Americans enjoy sharing information about their local

Informal conversation is an important part of any business
relationship.Before you start a discussion,however,make sure you understand
which topics are suitable and which are considered taboo in a particular
culture.
history, art and customs.You may expect questions about your family,and
be sure to show pictures of your children.You may feel free to ask similar
questions of your Latin American friends.The French think of conversation
as an art form,and they enjoy the value of lively discussions as well as
For them,arguments can be interesting and they can cover
disagreements.
pretty much or any topic ---- as long as they occur in are respectful and
intelligent manner.
In the United States,business people like to discuss a wide range of
topics,including opinions about work,family,hobbies,and politics.
In
Japan,China,and Korea,however,people are much more private.They do not
share much about their thoughts,feelings,or emotions because they feel
that doing so might take away from the harmonious business relationship
they’re trying to build.Middle Easterners are also private about their
personal lives and family matters.It is considered rude,for example,to ask
a businessman from Saudi Arabia about his wife or children.
As a general rule,it’s best not to talk about politics or religion with
your business friends.This can get you into trouble,even in the United
States,where people hold different religious views.In addition,discussing
one’s salary is usually considered unsuitable.Sports is typically a
friendly subject in most parts of the world,although be careful not to
criticize national sport.Instead,be friendly and praise your host’s team.

Q: What shouldn’t you do when talking about sports with colleagues from
another country?

A: Criticizing the sports of your colleagues’ country.

Q: Which is typically a friendly topic in most places according to the
author?

A: Sports.

Q: Why are people from Asia more private in their conversation with others?

A: They don’t want to have their good relationship with others harmed by
informal conversation.

Q: The author considers politics and religion

.

Correct Answer → taboo

A:

Incorrect Answer → cheerful topics
Incorrect Answer → rude topics
Incorrect Answer → topics that can never be talked about

Figure G.1: Formatted dataset example for RACE-h. When predicting, we normalize by the unconditional probability
of each answer as described in 2.

50

Context → anli 2:

anli 2:

The Gold Coast Hotel & Casino is a hotel and casino

The Gold Coast is located one mile (∼ 1.6km) west of the

This locals’ casino is owned and operated

located in Paradise, Nevada.
by Boyd Gaming.
Las Vegas Strip on West Flamingo Road.
from the Palms Casino Resort and the Rio All Suite Hotel and Casino.
Question:
Neither?

The Gold Coast is a budget-friendly casino.

It is located across the street

True, False, or

Correct Answer → Neither

Incorrect Answer → True
Incorrect Answer → False

Figure G.2: Formatted dataset example for ANLI R2

Context → Article:

Smith is an unusual teacher.

On each potato the students had to

Once she told each student to bring

As day after day passed, the children

Some had two potatoes;some three;some up to five.

After two weeks, the children were happy to hear that the

Smith then told the children to carry the bags everywhere they went,

Mrs.
along a few potatoes in plastic bag.
write a name of a person that they hated And the next day, every child
brought some potatoes.
Mrs.
even to the toilet, for two weeks.
started to complain about the awful smell of the rotten potatoes.
Those children who brought five potatoes began to feel the weight trouble
of the bags.
game was finally ended.
the potatoes for two weeks?"" The children started complaining about the
trouble loudly.
Then Mrs.
Smith told them why she asked them to play the game.
said,""This is exactly the situation when you carry your hatred for somebody
inside your heart.
heart and you will carry something unnecessary with you all the time.
If
you cannot stand the smell of the rotten potatoes for just two weeks, can
you imagine how heavy it would be to have the hatred in your heart for your
lifetime?
happy.""

So throw away any hatred from your heart, and you’ll be really

The terrible smell of the hatred will pollute your

Smith asked,""How did you feel while carrying

Mrs.

She

Q: Which of the following is True according to the passage?

A: If a kid hated four people,he or she had to carry four potatoes.

Q: We can learn from the passage that we should

.

A: throw away the hatred inside

Q: The children complained about

besides the weight trouble.

A: the smell

Q: Mrs.Smith asked her students to write

on the potatoes.

A:

Correct Answer → names
Incorrect Answer → numbers
Incorrect Answer → time
Incorrect Answer → places

Figure G.3: Formatted dataset example for RACE-m. When predicting, we normalize by the unconditional probability
of each answer as described in 2.

51

Context → How to apply sealant to wood.

Correct Answer → Using a brush, brush on sealant onto wood until it is fully saturated with

Incorrect Answer → Using a brush, drip on sealant onto wood until it is fully saturated with

the sealant.

the sealant.

Figure G.4: Formatted dataset example for PIQA

Context → My body cast a shadow over the grass because

Correct Answer → the sun was rising.

Incorrect Answer → the grass was cut.

Figure G.5: Formatted dataset example for COPA

Context → (CNN) Yuval Rabin, whose father, Yitzhak Rabin, was assassinated while

serving as Prime Minister of Israel, criticized Donald Trump for appealing
to ""Second Amendment people"" in a speech and warned that the words that
politicians use can incite violence and undermine democracy.
""Trump’s
words are an incitement to the type of political violence that touched
me personally,"" Rabin wrote in USAToday.
""Second Amendment people"" to stop Hillary Clinton -- comments that were
criticized as a call for violence against Clinton, something Trump denied
-- ""were a new level of ugliness in an ugly campaign season.""

He said that Trump’s appeal to

- The son of a former Israeli Prime Minister who was assassinated wrote an
op ed about the consequence of violent political rhetoric.
- Warns of ""parallels"" between Israel of the 1990s and the U.S. today.

Correct Answer → - Referencing his father, who was shot and killed by an extremist amid

political tension in Israel in 1995, Rabin condemned Donald Trump’s
aggressive rhetoric.

Correct Answer → - Referencing his father, who was shot and killed by an extremist amid

political tension in Israel in 1995, Rabin condemned Trump’s aggressive
rhetoric.

Incorrect Answer → - Referencing his father, who was shot and killed by an extremist amid
political tension in Israel in 1995, Rabin condemned Hillary Clinton’s
aggressive rhetoric.

Incorrect Answer → - Referencing his father, who was shot and killed by an extremist amid
political tension in Israel in 1995, Rabin condemned U.S.’s aggressive
rhetoric.

Incorrect Answer → - Referencing his father, who was shot and killed by an extremist amid

political tension in Israel in 1995, Rabin condemned Yitzhak Rabin’s
aggressive rhetoric.

Figure G.6: Formatted dataset example for ReCoRD. We consider the context above to be a single ”problem” because
this is how the task is presented in the ReCoRD dataset and scored in the ReCoRD evaluation script.

Context → anli 1:

anli 1:

Fulton James MacGregor MSP is a Scottish politician

who is a Scottish National Party (SNP) Member of Scottish Parliament
for the constituency of Coatbridge and Chryston.
Parliamentary Liaison Officer to Shona Robison, Cabinet Secretary for
Health & Sport.
He also serves on the Justice and Education & Skills
committees in the Scottish Parliament.
Question:
officer to Shona Robison who he swears is his best friend.
Neither?

Fulton James MacGregor is a Scottish politican who is a Liaison

MacGregor is currently

True, False, or

Correct Answer → Neither

Incorrect Answer → True
Incorrect Answer → False

Figure G.7: Formatted dataset example for ANLI R1

52

Context → Organisms require energy in order to do what?

Correct Answer → mature and develop.

Incorrect Answer → rest soundly.
Incorrect Answer → absorb light.
Incorrect Answer → take in nutrients.

Figure G.8: Formatted dataset example for OpenBookQA. When predicting, we normalize by the unconditional
probability of each answer as described in 2.

Context → Making a cake:

Several cake pops are shown on a display.

A woman and girl

are shown making the cake pops in a kitchen.

They

Correct Answer → bake them, then frost and decorate.

Incorrect Answer → taste them as they place them on plates.
Incorrect Answer → put the frosting on the cake as they pan it.
Incorrect Answer → come out and begin decorating the cake as well.

Figure G.9: Formatted dataset example for HellaSwag

Context → anli 3:

anli 3:

We shut the loophole which has American workers actually

subsidizing the loss of their own job.
They just passed an expansion of
that loophole in the last few days: $43 billion of giveaways, including
favors to the oil and gas industry and the people importing ceiling fans
from China.
Question:

The loophole is now gone True, False, or Neither?

Correct Answer → False

Incorrect Answer → True
Incorrect Answer → Neither

Figure G.10: Formatted dataset example for ANLI R3

Context → Question:

George wants to warm his hands quickly by rubbing them.

Which

skin surface will produce the most heat?
Answer:

Correct Answer → dry palms
Incorrect Answer → wet palms
Incorrect Answer → palms covered with oil
Incorrect Answer → palms covered with lotion

Figure G.11: Formatted dataset example for ARC (Challenge). When predicting, we normalize by the unconditional
probability of each answer as described in 2.

Context → lull is to trust as

Correct Answer → cajole is to compliance

Incorrect Answer → balk is to fortitude
Incorrect Answer → betray is to loyalty
Incorrect Answer → hinder is to destination
Incorrect Answer → soothe is to passion

Figure G.12: Formatted dataset example for SAT Analogies

Correct Context → Grace was happy to trade me her sweater for my jacket.

She thinks the

Incorrect Context → Grace was happy to trade me her sweater for my jacket.

She thinks the

sweater

Target Completion → looks dowdy on her.

jacket

Figure G.13: Formatted dataset example for Winograd. The ‘partial’ evaluation method we use compares the probability
of the completion given a correct and incorrect context.

53

Correct Context → Johnny likes fruits more than vegetables in his new keto diet because the

Incorrect Context → Johnny likes fruits more than vegetables in his new keto diet because the

fruits

Target Completion → are saccharine.

vegetables

Figure G.14: Formatted dataset example for Winogrande. The ‘partial’ evaluation method we use compares the
probability of the completion given a correct and incorrect context.

Context → READING COMPREHENSION ANSWER KEY

He told the two envoys

In January 2000, Assistant Secretary

Direct
As one NSC staff note

While this process moved along, diplomacy continued its rounds.
pressure on the Taliban had proved unsuccessful.
put it, ""Under the Taliban, Afghanistan is not so much a state sponsor
of terrorism as it is a state sponsored by terrorists."" In early 2000,
the United States began a high-level effort to persuade Pakistan to use
its influence over the Taliban.
of State Karl Inderfurth and the State Department’s counterterrorism
coordinator, Michael Sheehan, met with General Musharraf in Islamabad,
dangling before him the possibility of a presidential visit in March as a
reward for Pakistani cooperation.
Such a visit was coveted by Musharraf,
partly as a sign of his government’s legitimacy.
that he would meet with Mullah Omar and press him on Bin Laden.
left, however, reporting to Washington that Pakistan was unlikely in fact
to do anything,"" given what it sees as the benefits of Taliban control
of Afghanistan."" President Clinton was scheduled to travel to India.
The State Department felt that he should not visit India without also
visiting Pakistan.
The Secret Service and the CIA, however, warned in
the strongest terms that visiting Pakistan would risk the President’s
life.
enough to merit a presidential visit.
on including Pakistan in the itinerary for his trip to South Asia.
His
one-day stopover on March 25, 2000, was the first time a U.S. president
had been there since 1969.
At his meeting with Musharraf and others,
President Clinton concentrated on tensions between Pakistan and India
and the dangers of nuclear proliferation, but also discussed Bin Laden.
President Clinton told us that when he pulled Musharraf aside for a brief,
one-on-one meeting, he pleaded with the general for help regarding Bin
Laden."" I offered him the moon when I went to see him, in terms of better
relations with the United States, if he’d help us get Bin Laden and deal
with another issue or two."" The U.S. effort continued.

Counterterrorism officials also argued that Pakistan had not done

But President Clinton insisted

They

Who did The State Department feel should visit both India and Pakistan?

Correct Answer → - [False] Bin Laden

Incorrect Answer → - [True] Bin Laden

Figure G.15: Formatted dataset example for MultiRC. There are three levels within MultiRC: (1) the passage, (2) the
questions, and (3) the answers. During evaluation, accuracy is determined at the per-question level, with a question
being considered correct if and only if all the answers within the question are labeled correctly. For this reason, we use
K to refer to the number of questions shown within the context.

Context → Question:

Which factor will most likely cause a person to develop a fever?

Answer:

Correct Answer → a bacterial population in the bloodstream

Incorrect Answer → a leg muscle relaxing after exercise
Incorrect Answer → several viral particles on the skin
Incorrect Answer → carbohydrates being digested in the stomach

Figure G.16: Formatted dataset example for ARC (Easy). When predicting, we normalize by the unconditional
probability of each answer as described in 2.

54

Context → Bob went to the gas station to fill up his car.

His tank was completely

empty and so was his wallet.
came back later to pay.

The cashier offered to pay for his gas if he

Bob felt grateful as he drove home.

Correct Answer → Bob believed that there were good people in the world.

Incorrect Answer → Bob contemplated how unfriendly the world was.

Figure G.17: Formatted dataset example for StoryCloze

Context → Helsinki is the capital and largest city of Finland.

It is in the region

of Uusimaa, in southern Finland, on the shore of the Gulf of Finland.
Helsinki has a population of , an urban population of , and a metropolitan
population of over 1.4 million, making it the most populous municipality
and urban area in Finland.
east of Stockholm, Sweden, and west of Saint Petersburg, Russia.
has close historical connections with these three cities.

Helsinki is some north of Tallinn, Estonia,

Helsinki

It is the world’s

The Helsinki metropolitan area includes the urban core of Helsinki, Espoo,
Vantaa, Kauniainen, and surrounding commuter towns.
northernmost metro area of over one million people, and the city is the
northernmost capital of an EU member state.
area is the third largest metropolitan area in the Nordic countries
after Stockholm and Copenhagen, and the City of Helsinki is the third
largest after Stockholm and Oslo.
educational, financial, cultural, and research center as well as one of
northern Europe’s major cities.
Approximately 75% of foreign companies
that operate in Finland have settled in the Helsinki region.
municipality of Vantaa is the location of Helsinki Airport, with frequent
service to various destinations in Europe and Asia.

Helsinki is Finland’s major political,

The Helsinki metropolitan

The nearby

Q: what is the most populous municipality in Finland?

A: Helsinki

Q: how many people live there?

A: 1.4 million in the metropolitan area

Q: what percent of the foreign companies that operate in Finland are in
Helsinki?

A: 75%

Q: what towns are a part of the metropolitan area?

A:

Target Completion → Helsinki, Espoo, Vantaa, Kauniainen, and surrounding commuter towns

Figure G.18: Formatted dataset example for CoQA

Context → Please unscramble the letters into a word, and write that word:

Target Completion → casino

asinoc =

Figure G.19: Formatted dataset example for Cycled Letters

55

Context → Passage:

Saint Jean de Br´ebeuf was a French Jesuit missionary who

There he worked primarily with the Huron

travelled to New France in 1625.
for the rest of his life, except for a few years in France from 1629 to
1633.
He learned their language and culture, writing extensively about
each to aid other missionaries.
were captured when an Iroquois raid took over a Huron village .
with Huron captives, the missionaries were ritually tortured and killed
on March 16, 1649.
missionaries canonized as saints in the Roman Catholic Church in 1930.
How many years did Saint Jean de Br´ebeuf stay in New France
Question:
before he went back to France for a few years?
Answer:

In 1649, Br´ebeuf and another missionary
Together

Br´ebeuf was beatified in 1925 and among eight Jesuit

Target Completion → 4

Figure G.20: Formatted dataset example for DROP

Context → Fill in blank:

She held the torch in front of her.

She caught her breath.

""Chris?

There’s a step.""

""What?""

Cut in the rock.

""A step.
They both moved faster.
""there’s more than a

.

->

About fifty feet ahead."" She moved faster.
""In fact,"" she said, raising the torch higher,

Target Completion → step

Figure G.21: Formatted dataset example for LAMBADA

Context → Please unscramble the letters into a word, and write that word:

Target Completion → sticks

skicts =

Figure G.22: Formatted dataset example for Anagrams 1 (A1)

Context → Please unscramble the letters into a word, and write that word:

Target Completion → volkswagen

volwskagen =

Figure G.23: Formatted dataset example for Anagrams 2

Context → Q: Who played tess on touched by an angel?

A:

Target Completion → Delloreese Patricia Early (July 6, 1931 { November 19, 2017), known

professionally as Della Reese

Figure G.24: Formatted dataset example for Natural Questions

56

Context → TITLE: William Perry (American football) - Professional career

Perry

Teammates called

During his rookie season, Perry

Perry’s ""Refrigerator"" nickname followed him into the NFL and he

PARAGRAPH: In 1985, he was selected in the first round of the 1985 NFL
Draft by the Chicago Bears; he had been hand-picked by coach Mike Ditka.
However, defensive coordinator Buddy Ryan, who had a highly acrimonious
relationship with Ditka, called Perry a ""wasted draft-pick"".
soon became a pawn in the political power struggle between Ditka and
Ryan.
quickly became a favorite of the Chicago Bears fans.
him ""Biscuit,"" as in ""one biscuit shy of 350 pounds."" While Ryan refused
to play Perry, Ditka decided to use Perry as a fullback when the team was
near the opponents’ goal line or in fourth and short situations, either
as a ball carrier or a lead blocker for star running back Walter Payton.
Ditka stated the inspiration for using Perry as a fullback came to him
during five-yard sprint exercises.
rushed for two touchdowns and caught a pass for one.
the opportunity to run the ball during Super Bowl XX, as a nod to his
popularity and contributions to the team’s success.
got the ball, he was tackled for a one-yard loss while attempting to throw
his first NFL pass on a halfback option play.
ball, he scored a touchdown (running over Patriots linebacker Larry McGrew
in the process). About halfway through his rookie season, Ryan finally
began to play Perry, who soon proved that he was a capable defensive
lineman.
football player in the history of the event.
the ring size for the average adult male is between 10 and 12.
on to play for ten years in the NFL, retiring after the 1994 season.
his ten years as a pro, he regularly struggled with his weight, which
hampered his performance at times.
He played in 138 games, recording
29.5 sacks and five fumble recoveries, which he returned for a total of
In his offensive career he ran five yards for two touchdowns,
71 yards.
and had one reception for another touchdown.
comeback, playing an unremarkable 1996 season with the London Monarchs of
the World League of American Football (later NFL Europa).

His Super Bowl ring size is the largest of any professional

His ring size is 25, while

The second time he got the

Perry later attempted a

The first time he

Perry even had

Perry went

In

Q: what team did he play for?

A:

Target Completion → the Chicago Bears

Figure G.25: Formatted dataset example for QuAC

Context → Please unscramble the letters into a word, and write that word:

Target Completion → reciprocal

r e!c.i p r o.c a/l =

Figure G.26: Formatted dataset example for Symbol Insertion

Context → Please unscramble the letters into a word, and write that word:

Target Completion → defeat

taefed =

Figure G.27: Formatted dataset example for Reversed Words

57

Context → Title:

The Blitz

The electronic war intensified but the Luftwaffe

From the German point of view, March 1941 saw an improvement.

Background:
The Luftwaffe flew 4,000 sorties that month, including 12 major and
three heavy attacks.
flew major inland missions only on moonlit nights.
find and made better targets.
observed until the bombs fell.
false targets and switched only at the last minute.
changes were introduced for X-Ger¨at, whose wider band of frequencies and
greater tactical flexibility ensured it remained effective at a time when
British selective jamming was degrading the effectiveness of Y-Ger¨at.

Ports were easier to
To confuse the British, radio silence was

X- and Y-Ger¨at beams were placed over

Rapid frequency

Q: How many sorties were flown in March 1941?

A: 4,000

Q: When did the Luftwaffe fly inland missions?

Target Completion → only on moonlit nights

A:

Figure G.28: Formatted dataset example for SQuADv2

Context → Normal force -- In a simple case such as an object resting upon a table,
the normal force on the object is equal but in opposite direction to the
gravitational force applied on the object (or the weight of the object),
that is, N = m g (\displaystyle N=mg), where m is mass, and g is the
gravitational field strength (about 9.81 m/s on Earth).
here represents the force applied by the table against the object that
prevents it from sinking through the table and requires that the table is
However, it
sturdy enough to deliver this normal force without breaking.
is easy to assume that the normal force and weight are action-reaction
force pairs (a common mistake).
weight need to be equal in magnitude to explain why there is no upward
acceleration of the object.
For example, a ball that bounces upwards
accelerates upwards because the normal force acting on the ball is larger
in magnitude than the weight of the ball.
question:
answer:

is the normal force equal to the force of gravity?

In this case, the normal force and

The normal force

Target Completion → yes

Figure G.29: Formatted dataset example for BoolQ

Context → The trend toward lower rents may seem surprising given that some
communities in New York are bemoaning the loss of favorite local
businesses to high rents.
of these retailers there’s still been too big a jump from the rental rates
of the late 1970s, when their leases were signed.
drop in prices doesn’t mean Manhattan comes cheap.
question:
answer:

But, despite the recent softening, for many

true, false, or neither?

Manhattan comes cheap.

Certainly, the recent

Target Completion → false

Figure G.30: Formatted dataset example for CB

58

Context → The bet, which won him dinner for four, was regarding the existence and

mass of the top quark, an elementary particle discovered in 1995.
question:
the standard model theory of particle physics.
answer:

The Top Quark is the last of six flavors of quarks predicted by

True or False?

Target Completion → False

Figure G.31: Formatted dataset example for RTE

Context → An outfitter provided everything needed for the safari.

Before his first walking holiday, he went to a specialist outfitter to buy
some boots.
question:
sentences above?
answer:

Is the word ‘outfitter’ used in the same way in the two

Target Completion → no

Figure G.32: Formatted dataset example for WiC

Please carefully read the following passages.

Context → Final Exam with Answer Key
Instructions:
passage, you must identify which noun the pronoun marked in *bold* refers
to.
=====
Passage:
The result was that Mr.
thinking that it belonged to his son Edward.
Moncrieff has decided to cancel Edward’s allowance on the ground that
he no longer requires *his* financial support.
Question:
Answer:

In the passage above, what does the pronoun ""*his*"" refer to?

Moncrieff visited Chester’s luxurious New York apartment,

For each

Mr.

Target Completion → mr.

moncrieff

Figure G.33: Formatted dataset example for WSC

Context → Q: ‘Nude Descending A Staircase’ is perhaps the most famous painting by

which 20th century artist?

A:

Target Completion → MARCEL DUCHAMP
Target Completion → r mutt
Target Completion → duchamp
Target Completion → marcel duchamp
Target Completion → R.Mutt
Target Completion → Marcel duChamp
Target Completion → Henri-Robert-Marcel Duchamp
Target Completion → Marcel du Champ
Target Completion → henri robert marcel duchamp
Target Completion → Duchampian
Target Completion → Duchamp
Target Completion → duchampian
Target Completion → marcel du champ
Target Completion → Marcel Duchamp
Target Completion → MARCEL DUCHAMP

Figure G.34: Formatted dataset example for TriviaQA. TriviaQA allows for multiple valid completions.

59

Context → Q: What school did burne hogarth establish?

Target Completion → School of Visual Arts

A:

Figure G.35: Formatted dataset example for WebQA

Context → Keinesfalls d¨urfen diese f¨ur den kommerziellen Gebrauch verwendet werden.

=

Target Completion → In no case may they be used for commercial purposes.

Figure G.36: Formatted dataset example for De→En. This is the format for one- and few-shot learning, for this and
other langauge tasks, the format for zero-shot learning is “Q: What is the {language} translation of {sentence} A:
{translation}.”

Context → In no case may they be used for commercial purposes.

=

Target Completion → Keinesfalls d¨urfen diese f¨ur den kommerziellen Gebrauch verwendet werden.

Figure G.37: Formatted dataset example for En→De

Context → Analysis of instar distributions of larval I. verticalis collected from

a series of ponds also indicated that males were in more advanced instars
than females.

=

Target Completion → L’analyse de la distribution de fr´equence des stades larvaires d’I.

verticalis dans une s´erie d’´etangs a ´egalement d´emontr´e que les larves
m^ales ´etaient `a des stades plus avanc´es que les larves femelles.

Figure G.38: Formatted dataset example for En→Fr

Context → L’analyse de la distribution de fr´equence des stades larvaires d’I.

verticalis dans une s´erie d’´etangs a ´egalement d´emontr´e que les larves
m^ales ´etaient `a des stades plus avanc´es que les larves femelles.

=

Target Completion → Analysis of instar distributions of larval I. verticalis collected from

a series of ponds also indicated that males were in more advanced instars
than females.

Figure G.39: Formatted dataset example for Fr→En

Context → The truth is that you want, at any price, and against the wishes of the

peoples of Europe, to continue the negotiations for Turkey’s accession
to the European Union, despite Turkey’s continuing refusal to recognise
Cyprus and despite the fact that the democratic reforms are at a
standstill.

=

Target Completion → Adev˘arul este c˘a v˘a dorit¸i, cu orice pret¸ ¸si ^ımpotriva dorint¸ei

europenilor, s˘a continuat¸i negocierile de aderare a Turciei la Uniunea
European˘a, ^ın ciuda refuzului continuu al Turciei de a recunoa¸ste Ciprul
¸si ^ın ciuda faptului c˘a reformele democratice au ajuns ^ıntr-un punct mort.

Figure G.40: Formatted dataset example for En→Ro

60

Context → Adev˘arul este c˘a v˘a dorit¸i, cu orice pret¸ ¸si ^ımpotriva dorint¸ei

europenilor, s˘a continuat¸i negocierile de aderare a Turciei la Uniunea
European˘a, ^ın ciuda refuzului continuu al Turciei de a recunoa¸ste Ciprul
¸si ^ın ciuda faptului c˘a reformele democratice au ajuns ^ıntr-un punct mort.
=

Target Completion → The truth is that you want, at any price, and against the wishes of the

peoples of Europe, to continue the negotiations for Turkey’s accession
to the European Union, despite Turkey’s continuing refusal to recognise
Cyprus and despite the fact that the democratic reforms are at a
standstill.

Figure G.41: Formatted dataset example for Ro→En

Context → Q: What is (2 * 4) * 6?

A:

Target Completion → 48

Figure G.42: Formatted dataset example for Arithmetic 1DC

Context → Q: What is 17 minus 14?

A:

Target Completion → 3

Figure G.43: Formatted dataset example for Arithmetic 2D-

Context → Q: What is 98 plus 45?

A:

Target Completion → 143

Figure G.44: Formatted dataset example for Arithmetic 2D+

Context → Q: What is 95 times 45?

A:

Target Completion → 4275

Figure G.45: Formatted dataset example for Arithmetic 2Dx

Context → Q: What is 509 minus 488?

Target Completion → 21

A:

Figure G.46: Formatted dataset example for Arithmetic 3D-

Context → Q: What is 556 plus 497?

A:

Target Completion → 1053

Figure G.47: Formatted dataset example for Arithmetic 3D+

Context → Q: What is 6209 minus 3365?

Target Completion → 2844

A:

Figure G.48: Formatted dataset example for Arithmetic 4D-

61

Context → Q: What is 9923 plus 617?

A:

Target Completion → 10540

Figure G.49: Formatted dataset example for Arithmetic 4D+

Context → Q: What is 40649 minus 78746?

A:

Target Completion → -38097

Figure G.50: Formatted dataset example for Arithmetic 5D−

Context → Q: What is 65360 plus 16204?

A:

Target Completion → 81564

Figure G.51: Formatted dataset example for Arithmetic 5D+

62

H Results on All Tasks for All Model Sizes

Name

Metric

Split

SOTA K

Small Med Large XL 2.7B 6.7B 13B 175B

Small Med Large XL 2.7B 6.7B 13B 175B

Small Med Large XL 2.7B 6.7B 13B 175B

Fine-tune

175B
(test server)

Zero-Shot

One-Shot

Few-Shot

HellaSwag
LAMBADA
LAMBADA
StoryCloze

NQs
TriviaQA
WebQs

Ro→En 16
Ro→En 16
En→Ro 16
En→Ro 16
Fr→En 14
Fr→En 14
En→Fr 14
En→Fr 14
De→En 16
De→En 16
En→De 16
En→De 16

acc
acc
ppl
acc

acc
acc
acc

dev
test
test
test

test
dev
test

BLEU-mb test
BLEU-sb test
BLEU-mb test
BLEU-sb test
BLEU-mb test
BLEU-sb test
BLEU-mb test
BLEU-sb test
BLEU-mb test
BLEU-sb test
BLEU-mb test
BLEU-sb test

Winograd
Winogrande

acc
acc

PIQA
acc
ARC (Challenge) acc
acc
ARC (Easy)
acc
OpenBookQA

Quac
RACE-h
RACE-m
SQuADv2
SQuADv2
CoQA
DROP

BoolQ
CB
CB
Copa
RTE
WiC
WSC
MultiRC
MultiRC
ReCoRD
ReCoRD
SuperGLUE

ANLI R1
ANLI R2
ANLI R3

2D+
2D-
3D+
3D-
4D+
4D-
5D+
5D-
2Dx
1DC

f1
acc
acc
em
f1
f1
f1

acc
acc
f1
acc
acc
acc
acc
acc
f1a
acc
f1
average

acc
acc
acc

acc
acc
acc
acc
acc
acc
acc
acc
acc
acc

acc
Cycled Letters
acc
Anagrams 1
Anagrams 2
acc
Symbol Insertion acc
Reversed Words acc

SAT Analogies

acc

test
dev

dev
test
test
test

dev
test
test
dev
dev
dev
dev

dev
dev
dev
dev
dev
dev
dev
dev
dev
dev
dev
dev

test
test
test

n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a
n/a
n/a
n/a
n/a

n/a

85.6
68.0
8.63
91.8

44.5
68.0
45.5

39.9

38.5

35.0

45.6
45.9
40.2

41.2
41.2

93.8
84.6

77.1
78.5
92.0
87.2

74.4
90.0
93.1
90.7
93.0
90.7
89.1

91.0
96.9
93.9
94.8
92.5
76.1
93.8
62.3
88.2
92.5
93.3
89.0

73.8
50.7
48.3

20
15
15
70

64
64
64

64
64
64
64
64
64
64
64
64
64
64
64

7
50

33.7 43.6 51.0 54.7 62.8 67.4 70.9 78.9
42.7 54.3 60.4 63.6 67.1 70.3 72.5 76.2
18.6 9.09 6.53 5.44 4.60 4.00 3.56 3.00
63.3 68.5 72.4 73.4 77.2 77.7 79.5 83.2

33.0 42.9 50.5 53.5 61.9 66.5 70.0 78.1
22.0 47.1 52.6 58.3 61.1 65.4 69.0 72.5
165.0 11.6 8.29 6.46 5.53 4.61 4.06 3.35
62.3 68.7 72.3 74.2 77.3 78.7 79.7 84.7

33.5 43.1 51.3 54.9 62.9 67.3 71.3 79.3
22.0 40.4 63.2 57.0 78.1 79.1 81.3 86.4
165.0 27.6 6.63 7.45 2.89 2.56 2.56 1.92
62.3 70.2 73.9 76.1 80.2 81.2 83.0 87.7

0.64 1.75 2.71 4.40 6.01 5.79 7.84 14.6
4.15 7.61 14.0 19.7 31.3 38.7 41.8 64.3
1.77 3.20 4.33 4.63 7.92 7.73 8.22 14.4

1.19 3.07 4.79 5.43 8.73 9.78 13.7 23.0
4.19 12.9 20.5 26.5 35.9 44.4 51.3 68.0
2.56 6.20 8.51 9.15 14.5 15.1 19.0 25.3

1.72 4.46 7.89 9.72 13.2 17.0 21.0 29.9
6.96 16.3 26.5 32.1 42.3 51.6 57.5 71.2
5.46 12.6 15.9 19.6 24.8 27.7 33.5 41.5

71.2

2.08 2.71 3.09 3.15 16.3 8.34 20.2 19.9
2.39 3.08 3.49 3.56 16.8 8.75 20.8 20.9
2.14 2.65 2.53 2.50 3.46 4.24 5.32 14.1
2.61 3.11 3.07 3.09 4.26 5.31 6.43 18.0
1.81 2.53 3.47 3.13 20.6 15.1 21.8 21.2
2.29 2.99 3.90 3.60 21.2 15.5 22.4 21.9
1.74 2.16 2.73 2.15 15.1 8.82 12.0 25.2
2.44 2.75 3.54 2.82 19.3 11.4 15.3 31.3
2.06 2.87 3.41 3.63 21.5 17.3 23.0 27.2
2.39 3.27 3.85 4.04 22.5 18.2 24.4 28.6
1.70 2.27 2.31 2.43 12.9 8.66 10.4 24.6
2.09 2.65 2.75 2.92 13.7 9.36 11.0 25.3

0.55 15.4 23.0 26.3 30.6 33.2 35.6 38.6
0.65 15.9 23.6 26.8 31.3 34.2 36.7 40.0
0.35 3.30 7.89 8.72 13.2 15.1 17.3 20.6
0.55 3.90 9.15 10.3 15.7 18.2 20.8 24.9
1.28 15.9 23.7 26.3 29.0 30.5 30.2 33.7
1.50 16.3 24.4 27.0 30.0 31.6 31.4 35.6
0.49 8.00 14.8 15.9 20.3 23.3 24.9 28.3
0.81 10.0 18.2 19.3 24.7 28.3 30.1 34.1
0.83 16.2 22.5 24.7 28.2 30.7 33.0 30.4
0.93 17.1 23.4 25.8 29.2 31.9 34.5 32.1
0.50 7.00 12.9 13.1 18.3 20.9 22.5 26.2
0.54 7.40 13.4 13.4 18.8 21.7 23.3 27.3

1.25 20.7 25.8 29.2 33.1 34.8 37.0 39.5
1.40 21.3 26.6 30.1 34.3 36.2 38.4 41.3
1.25 5.90 9.33 10.7 14.3 16.3 18.0 21.0
1.64 7.40 10.9 12.9 17.2 19.6 21.8 25.8
4.98 25.5 28.5 31.1 33.7 34.9 36.6 39.2
5.30 26.2 29.5 32.2 35.1 36.4 38.3 41.4
4.08 14.5 19.3 21.5 24.9 27.3 29.5 32.6
5.31 18.0 23.6 26.1 30.3 33.3 35.5 39.9
3.25 22.7 26.2 29.2 32.7 34.8 37.3 40.6
3.60 23.8 27.5 30.5 34.1 36.5 39.1 43.0
3.42 12.3 15.4 17.1 20.9 23.0 26.6 29.7
3.78 12.9 16.1 17.7 21.7 24.1 27.7 30.9

66.3 72.9 74.7 76.9 82.4 85.7 87.9 88.3
52.0 52.1 57.4 58.7 62.3 64.5 67.9 70.2

63.4 68.5 72.9 76.9 82.4 84.6 86.1 89.7
51.3 53.0 58.3 59.1 61.7 65.8 66.9 73.2

63.4 67.4 73.6 76.9 84.3 85.4 82.4 88.6
51.3 52.6 57.5 59.1 62.6 67.4 70.0 77.7

50
50
50
100

64.6 70.2 72.9 75.1 75.6 78.0 78.5 81.0
26.6 29.5 31.8 35.5 38.0 41.4 43.7 51.4
43.6 46.5 53.0 53.8 58.2 60.2 63.8 68.8
35.6 43.2 45.2 46.8 53.0 50.4 55.6 57.6

64.3 69.3 71.8 74.4 74.3 76.3 77.8 80.5
25.5 30.2 31.6 36.4 38.4 41.5 43.1 53.2
42.7 48.2 54.6 55.9 60.3 62.6 66.8 71.2
37.0 39.8 46.2 46.4 53.4 53.0 55.8 58.8

64.3 69.4 72.0 74.3 75.4 77.8 79.9 82.3
25.5 28.4 32.3 36.7 39.5 43.7 44.8 51.5
42.7 51.0 58.1 59.1 62.1 65.8 69.1 70.1
37.0 43.6 48.0 50.6 55.6 55.2 60.8 65.4

82.8

5
10
10
16
16
5
20

32
32
32
32
32
32
32
32
32
32
32

50
50
50

50
50
50
50
50
50
50
50
50
50

100
100
100
100
100

20

21.2 26.8 31.0 30.1 34.7 36.1 38.4 41.5
35.2 37.9 40.1 40.9 42.4 44.1 44.6 45.5
42.1 47.2 52.1 52.3 54.7 54.4 56.7 58.4
22.6 32.8 33.9 43.1 43.6 45.4 49.0 52.6
28.3 40.2 41.4 50.3 51.0 52.7 56.3 59.5
34.5 55.0 61.8 65.3 71.1 72.8 76.3 81.5
9.40 13.6 14.4 16.4 19.7 17.0 24.0 23.6

21.1 26.9 31.9 32.3 37.4 39.0 40.6 43.4
34.3 37.7 40.0 42.0 43.8 44.3 44.6 45.9
42.3 47.3 51.7 55.2 56.1 54.7 56.9 57.4
25.1 37.5 37.9 47.9 47.9 51.1 56.0 60.1
30.1 43.6 44.1 54.0 54.1 57.1 61.8 65.4
30.6 52.1 61.6 66.1 71.8 75.1 77.9 84.0
11.7 18.1 20.9 23.0 26.4 27.3 29.2 34.3

21.6 27.6 32.9 34.2 38.2 39.9 40.9 44.3
34.3 37.0 40.4 41.4 42.3 44.7 45.1 46.8
42.3 47.0 52.7 53.0 55.6 55.4 58.1 58.1
27.5 40.5 39.2 53.5 50.0 56.6 62.6 64.9
32.1 45.5 44.9 58.7 55.9 62.1 67.7 69.8
31.1 52.0 62.7 66.8 73.2 77.3 79.9 85.0
12.9 18.7 24.0 25.6 29.7 29.7 32.3 36.5

49.7 60.3 58.9 62.4 67.1 65.4 66.2 60.5
0.00 32.1 8.93 19.6 19.6 28.6 19.6 46.4
0.00 29.3 11.4 17.4 22.4 25.1 20.3 42.8
66.0 68.0 73.0 77.0 76.0 80.0 84.0 91.0
47.7 49.8 48.4 56.0 46.6 55.2 62.8 63.5
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
59.6 56.7 65.4 61.5 66.3 60.6 64.4 65.4
4.72 9.65 12.3 13.6 14.3 18.4 24.2 27.6
57.0 59.7 60.4 59.9 60.0 64.5 71.4 72.9
70.8 78.5 82.1 84.1 86.2 88.6 89.0 90.2
71.9 79.2 82.8 85.2 87.3 89.5 90.4 91.0
40.6 47.4 46.8 49.6 50.1 52.3 54.4 58.2

52.6 61.7 60.4 63.7 68.4 68.7 69.0 76.7
55.4 53.6 53.6 48.2 57.1 33.9 55.4 64.3
60.1 39.8 45.6 37.5 45.7 28.5 44.6 52.5
62.0 64.0 66.0 74.0 76.0 82.0 86.0 87.0
53.1 47.3 49.5 49.5 54.9 54.9 56.3 70.4
50.0 50.3 50.3 49.2 49.4 50.3 50.0 48.6
58.7 58.7 60.6 62.5 66.3 60.6 66.3 69.2
4.72 9.65 12.3 13.6 14.3 18.4 24.2 27.6
57.0 59.7 60.4 59.9 60.0 64.5 71.4 72.9
69.8 77.0 80.7 83.0 85.9 88.0 88.8 90.2
70.7 77.8 81.6 83.9 86.8 88.8 89.7 91.2
54.4 55.1 56.7 57.8 61.2 59.7 64.3 68.9

43.1 60.6 62.0 64.1 70.3 70.0 70.2 77.5
42.9 58.9 53.6 69.6 67.9 60.7 66.1 82.1
26.1 40.4 32.6 48.3 45.7 44.6 46.0 57.2
67.0 64.0 72.0 77.0 83.0 83.0 86.0 92.0
52.3 48.4 46.9 50.9 56.3 49.5 60.6 72.9
49.8 55.0 53.0 53.0 51.6 53.1 51.1 55.3
58.7 60.6 54.8 49.0 62.5 67.3 75.0 75.0
6.09 11.8 16.8 20.8 24.7 23.8 25.0 32.5
45.0 55.9 64.2 65.4 69.5 66.4 69.3 74.8
69.8 77.2 81.3 83.1 86.6 87.9 88.9 89.0
70.7 77.9 82.1 84.0 87.5 88.8 89.8 90.1
50.2 56.2 56.8 60.0 64.3 63.6 66.9 73.2

76.4
75.6
52.0
92.0
69.0
49.4
80.1
30.5
75.4
90.2
91.1
71.8

33.4 34.2 33.4 33.4 34.2 32.3 33.2 34.6
33.2 31.9 33.3 33.3 33.8 33.5 33.5 35.4
33.6 34.0 33.8 33.4 35.3 34.8 34.4 34.5

32.1 31.6 31.9 34.6 30.6 31.6 32.7 32.0
35.7 33.7 33.2 32.7 32.7 33.9 33.9 33.9
35.0 32.6 33.0 33.9 34.1 33.1 32.5 35.1

32.1 32.5 30.9 32.5 33.5 33.1 33.3 36.8
35.7 33.8 32.1 31.4 32.6 33.3 32.6 34.0
35.0 34.4 35.1 36.0 32.7 33.9 34.5 40.2

0.70 0.65 0.70 0.85 1.10 2.54 15.4 76.9
1.25 1.25 1.25 1.25 1.60 7.60 12.6 58.0
0.10 0.10 0.05 0.10 0.10 0.25 1.40 34.2
0.05 0.05 0.05 0.05 0.05 0.45 1.35 48.3
0.05 0.05 0.00 0.00 0.05 0.05 0.15 4.00
0.00 0.00 0.00 0.00 0.00 0.00 0.10 7.50
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.65
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.80
2.20 2.25 2.65 2.10 2.55 5.80 6.15 19.8
1.25 2.95 2.75 0.05 0.30 2.35 0.75 9.75

2.00 0.55 3.15 4.00 12.1 19.6 73.0 99.6
1.15 0.95 1.45 1.95 3.85 11.5 44.6 86.4
0.15 0.00 0.10 0.30 0.45 0.95 15.4 65.5
0.05 0.15 0.25 0.30 0.55 1.60 6.15 78.7
0.00 0.00 0.10 0.00 0.00 0.10 0.80 14.0
0.00 0.00 0.00 0.00 0.05 0.00 0.50 14.0
0.00 0.00 0.00 0.00 0.00 0.00 0.05 3.45
0.00 0.00 0.00 0.00 0.00 0.00 0.05 3.75
1.35 2.35 3.35 2.35 4.75 9.15 11.0 27.4
1.90 2.80 2.85 3.65 6.45 9.15 8.20 14.3

2.00 4.10 3.50 4.50 8.90 11.9 55.5 100.0
1.15 1.45 2.25 2.70 7.35 13.6 52.4 98.9
0.15 0.45 0.30 0.55 0.75 0.90 8.40 80.4
0.05 0.10 0.15 0.35 0.65 1.05 9.20 94.2
0.00 0.05 0.05 0.00 0.15 0.15 0.40 25.5
0.00 0.05 0.00 0.00 0.10 0.05 0.40 26.8
0.00 0.00 0.00 0.00 0.00 0.00 0.05 9.30
0.00 0.00 0.00 0.00 0.00 0.00 0.00 9.90
1.35 2.90 2.70 2.85 4.25 6.10 7.05 29.2
1.70 2.15 3.90 5.75 6.20 7.60 9.95 21.3

0.62 0.71 2.85 0.00 0.63 1.35 2.58 3.66
0.10 0.14 0.40 0.00 0.27 0.69 1.16 2.28
0.81 1.21 2.69 0.01 1.71 3.75 4.53 8.91
0.00 0.00 0.10 0.00 0.05 0.42 0.89 8.26
0.00 0.01 0.01 0.01 0.02 0.03 0.03 0.09

1.67 4.36 5.68 6.46 6.25 9.41 15.1 21.7
0.21 0.61 1.12 1.27 1.60 2.72 3.72 8.62
1.19 2.62 4.70 4.77 6.97 10.2 14.6 25.9
0.03 0.05 0.57 1.18 1.67 3.46 6.62 45.4
0.02 0.01 0.01 0.00 0.05 0.07 0.11 0.48

4.63 9.27 10.7 14.5 16.7 21.9 27.7 37.9
0.50 1.27 2.13 3.05 3.81 5.49 8.38 15.1
1.94 4.80 7.59 9.87 12.6 18.9 25.6 39.7
0.11 0.28 2.19 4.18 6.61 11.0 27.3 67.2
0.00 0.05 0.00 0.17 0.24 0.30 0.42 0.44

35.6 39.0 45.2 44.1 50.0 49.2 52.7 53.7

30.5 41.2 43.1 46.5 55.1 54.3 53.5 59.1

30.5 40.4 42.8 40.6 48.4 51.9 53.5 65.2

Table H.1: Scores for every task, setting and model that we investigate in this paper.

63

Figure H.1: All results for all SuperGLUE tasks.

Figure H.2: Results for SAT task.

Figure H.3: All results for all Winograd tasks.

64

Figure H.4: All results for all Arithmetic tasks.

Figure H.5: All results for all Cloze and Completion tasks.

65

Figure H.6: All results for all Common Sense Reasoning tasks.

Figure H.7: All results for all QA tasks.

Figure H.8: All results for all Reading Comprehension tasks.

Figure H.9: All results for all ANLI rounds.

66

Figure H.10: All results for all Scramble tasks.

Figure H.11: All results for all Translation tasks.

67

References

[ADG+16] Marcin Andrychowicz, Misha Denil, Sergio Gomez, Matthew W Hoffman, David Pfau, Tom Schaul,
Brendan Shillingford, and Nando De Freitas. Learning to learn by gradient descent by gradient descent.
In Advances in neural information processing systems, pages 3981–3989, 2016.

[AI19] WeChat AI. Tr-mt (ensemble), December 2019.

[AJF19] Roee Aharoni, Melvin Johnson, and Orhan Firat. Massively multilingual neural machine translation. In
Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational
Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), 2019.

[BBDIW20] Su Lin Blodgett, Solon Barocas, Hal Daum´e III, and Hanna Wallach. Language (technology) is power:

A critical survey of “bias” in nlp. arXiv preprint arXiv:2005.14050, 2020.

[BCFL13] Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. Semantic parsing on freebase from
question-answer pairs. In Proceedings of the 2013 conference on empirical methods in natural language
processing, pages 1533–1544, 2013.

[BDD+09] Luisa Bentivogli, Ido Dagan, Hoa Trang Dang, Danilo Giampiccolo, and Bernardo Magnini. The ﬁfth

PASCAL recognizing textual entailment challenge. 2009.

[BES10] Stefano Baccianella, Andrea Esuli, and Fabrizio Sebastiani. Sentiwordnet 3.0: an enhanced lexical

resource for sentiment analysis and opinion mining. In Lrec, volume 10, pages 2200–2204, 2010.

[BHDD+06] Roy Bar Haim, Ido Dagan, Bill Dolan, Lisa Ferro, Danilo Giampiccolo, Bernardo Magnini, and Idan

Szpektor. The second PASCAL recognising textual entailment challenge. 2006.

[BHT+20] Yonatan Bisk, Ari Holtzman, Jesse Thomason, Jacob Andreas, Yoshua Bengio, Joyce Chai, Mirella
Lapata, Angeliki Lazaridou, Jonathan May, Aleksandr Nisnevich, et al. Experience grounds language.
arXiv preprint arXiv:2004.10151, 2020.

[BLC13] Yoshua Bengio, Nicholas L´eonard, and Aaron C. Courville. Estimating or propagating gradients through

stochastic neurons for conditional computation. Arxiv, 2013.

[BZB+19] Yonatan Bisk, Rowan Zellers, Ronan Le Bras, Jianfeng Gao, and Yejin Choi. Piqa: Reasoning about

physical commonsense in natural language. arXiv preprint arXiv:1911.11641, 2019.

[Car97] Rich Caruana. Multitask learning. Machine learning, 28(1), 1997.

[CB78] Susan Carey and Elsa Bartlett. Acquiring a single new word. Proceedings of the Stanford Child Language

Conference, 1978.

[CCE+18] Peter Clark, Isaac Cowhey, Oren Etzioni, Tushar Khot, Ashish Sabharwal, Carissa Schoenick, and
Oyvind Tafjord. Think you have solved question answering? try arc, the ai2 reasoning challenge. ArXiv,
abs/1803.05457, 2018.

[CGRS19] Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse

transformers, 2019.

[CHI+18] Eunsol Choi, He He, Mohit Iyyer, Mark Yatskar, Wen-tau Yih, Yejin Choi, Percy Liang, and Luke

Zettlemoyer. Quac : Question answering in context. Arxiv, 2018.

[CLC+19] Christopher Clark, Kenton Lee, Ming-Wei Chang, Tom Kwiatkowski, Michael Collins, and Kristina
Toutanova. BoolQ: Exploring the surprising difﬁculty of natural yes/no questions. arXiv preprint
arXiv:1905.10044, 2019.

[CLY+19] Yen-Chun Chen, Linjie Li, Licheng Yu, Ahmed El Kholy, Faisal Ahmed, Zhe Gan, Yu Cheng, and
Jingjing Liu. Uniter: Learning universal image-text representations. arXiv preprint arXiv:1909.11740,
2019.

[Cra17] Kate Crawford. The trouble with bias. NIPS 2017 Keynote, 2017.

[DCLT18] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep

bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.

68

[DGM06] Ido Dagan, Oren Glickman, and Bernardo Magnini. The PASCAL recognising textual entailment
challenge. In Machine learning challenges. evaluating predictive uncertainty, visual object classiﬁcation,
and recognising textual entailment, pages 177–190. Springer, 2006.

[DGV+18] Mostafa Dehghani, Stephan Gouws, Oriol Vinyals, Jakob Uszkoreit, and Lukasz Kaiser. Universal

transformers. Arxiv, 2018.

[DHKH14] Nadir Durrani, Barry Haddow, Philipp Koehn, and Kenneth Heaﬁeld. Edinburgh’s phrase-based machine
translation systems for wmt-14. In Proceedings of the Ninth Workshop on Statistical Machine Translation,
pages 97–104, 2014.

[DL15] Andrew M. Dai and Quoc V. Le. Semi-supervised sequence learning. In Advances in neural information

processing systems, 2015.

[DMST19] Marie-Catherine De Marneffe, Mandy Simons, and Judith Tonhauser. The CommitmentBank: Investigat-
ing projection in naturally occurring discourse. 2019. To appear in proceedings of Sinn und Bedeutung
23. Data can be found at https://github.com/mcdm/CommitmentBank/.

[DSC+16] Yan Duan, John Schulman, Xi Chen, Peter L. Bartlett, Ilya Sutskever, and Pieter Abbeel. Rl2: Fast

reinforcement learning via slow reinforcement learning. ArXiv, abs/1611.02779, 2016.

[DWD+19] Dheeru Dua, Yizhong Wang, Pradeep Dasigi, Gabriel Stanovsky, Sameer Singh, and Matt Gardner.
Drop: A reading comprehension benchmark requiring discrete reasoning over paragraphs. arXiv preprint
arXiv:1903.00161, 2019.

[DYY+19] Zihang Dai, Zhilin Yang, Yiming Yang, Jaime G. Carbonell, Quoc V. Le, and Ruslan Salakhutdinov.

Transformer-xl: Attentive language models beyond a ﬁxed-length context. Arxiv, 2019.

[EOAG18] Sergey Edunov, Myle Ott, Michael Auli, and David Grangier. Understanding back-translation at scale.

arXiv preprint arXiv:1808.09381, 2018.

[FAL17] Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of

deep networks. ArXiv, abs/1703.03400, 2017.

[Fyo00] Yaroslav Fyodorov. A natural logic inference system, 2000.

[GG19] Hila Gonen and Yoav Goldberg. Lipstick on a pig: Debiasing methods cover up systematic gender biases

in word embeddings but do not remove them. arXiv preprint arXiv:1903.03862, 2019.

[GLT+20] Kelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Ming-Wei Chang. Realm: Retrieval-

augmented language model pre-training. arXiv preprint arXiv:2002.08909, 2020.

[GMDD07] Danilo Giampiccolo, Bernardo Magnini, Ido Dagan, and Bill Dolan. The third PASCAL recognizing
textual entailment challenge. In Proceedings of the ACL-PASCAL workshop on textual entailment and
paraphrasing, pages 1–9. Association for Computational Linguistics, 2007.

[Gra16] Alex Graves. Adaptive computation time for recurrent neural networks. Arxiv, 2016.

[GSL+18] Suchin Gururangan, Swabha Swayamdipta, Omer Levy, Roy Schwartz, Samuel R Bowman, and Noah A
Smith. Annotation artifacts in natural language inference data. arXiv preprint arXiv:1803.02324, 2018.

[GSR19] Sebastian Gehrmann, Hendrik Strobelt, and Alexander M. Rush. Gltr: Statistical detection and visualiza-

tion of generated text. arXiv preprint arXiv: 1906.04043, 2019.

[GWC+18] Jiatao Gu, Yong Wang, Yun Chen, Kyunghyun Cho, and Victor OK Li. Meta-learning for low-resource

neural machine translation. arXiv preprint arXiv:1808.08437, 2018.

[HB20] Daniel Hernandez and Tom Brown. Ai and efﬁciency, May 2020.

[HBFC19] Ari Holtzman, Jan Buys, Maxwell Forbes, and Yejin Choi. The curious case of neural text degeneration.

CoRR, abs/1904.09751, 2019.

[HLW+20] Dan Hendrycks, Xiaoyuan Liu, Eric Wallace, Adam Dziedzic, Rishabh Krishnan, and Dawn Song.
Pretrained transformers improve out of distribution robustness. arXiv preprint arXiv:2004.06100, 2020.

69

[HNA+17] Joel Hestness, Sharan Narang, Newsha Ardalani, Gregory Diamos, Heewoo Jun, Hassan Kianinejad, Md.
Mostofa Ali Patwary, Yang Yang, and Yanqi Zhou. Deep learning scaling is predictable, empirically.
arXiv preprint arXiv:1712.00409, 2017.

[HR18] Jeremy Howard and Sebastian Ruder. Universal language model ﬁne-tuning for text classiﬁcation. arXiv

preprint arXiv:1801.06146, 2018.

[HVD15] Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. Distilling the knowledge in a neural network. arXiv

preprint arXiv:1503.02531, 2015.

[HYC01] Sepp Hochreiter, A Steven Younger, and Peter R Conwell. Learning to Learn Using Gradient Descent.

In International Conference on Artiﬁcial Neural Networks, pages 87–94. Springer, 2001.

[HZJ+19] Po-Sen Huang, Huan Zhang, Ray Jiang, Robert Stanforth, Johannes Welbl, Jack Rae, Vishal Maini,
Dani Yogatama, and Pushmeet Kohli. Reducing sentiment bias in language models via counterfactual
evaluation. arXiv preprint arXiv:1911.03064, 2019.

[IBGC+14] Mohit Iyyer, Jordan Boyd-Graber, Leonardo Claudino, Richard Socher, and Hal Daum´e III. A neural
network for factoid question answering over paragraphs. In Empirical Methods in Natural Language
Processing, 2014.

[IDCBE19] Daphne Ippolito, Daniel Duckworth, Chris Callison-Burch, and Douglas Eck. Automatic detection of
generated text is easiest when humans are fooled. arXiv preprint arXiv:1911.00650, 2019.

[JCWZ17] Mandar Joshi, Eunsol Choi, Daniel S. Weld, and Luke Zettlemoyer. TriviaQA: A large scale distantly

supervised challenge dataset for reading comprehension. arXiv preprint arXiv:1705.03551, 2017.

[JN20] Zheng Junyuan and Gamma Lab NYC. Numeric transformer - albert, March 2020.

[JVS+16] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring the limits

of language modeling. arXiv preprint arXiv:1602.02410, 2016.

[JYS+19] Xiaoqi Jiao, Yichun Yin, Lifeng Shang, Xin Jiang, Xiao Chen, Linlin Li, Fang Wang, and Qun Liu.
TinyBERT: Distilling BERT for natural language understanding. arXiv preprint arXiv:1909.10351, 2019.

[JZC+19] Ying Ju, Fubang Zhao, Shijie Chen, Bowen Zheng, Xuefeng Yang, and Yunfeng Liu. Technical report on

conversational question answering. arXiv preprint arXiv:1909.10772, 2019.

[KCR+18] Daniel Khashabi, Snigdha Chaturvedi, Michael Roth, Shyam Upadhyay, and Dan Roth. Looking beyond
the surface: A challenge set for reading comprehension over multiple sentences. In Proceedings of North
American Chapter of the Association for Computational Linguistics (NAACL), 2018.

[KKS+20] Daniel Khashabi, Tushar Khot, Ashish Sabharwal, Oyvind Tafjord, Peter Clark, and Hannaneh Hajishirzi.
Uniﬁedqa: Crossing format boundaries with a single qa system. arXiv preprint arXiv:2005.00700, 2020.

[KMB20] Sarah E. Kreps, Miles McCain, and Miles Brundage. All the news that’s ﬁt to fabricate: Ai-generated

text as a tool of media misinformation, 2020.

[KMH+20] Jared Kaplan, Sam McCandlish, Tom Henighan, Tom B. Brown, Benjamin Chess, Rewon Child, Scott

Gray, Alec Radford, Jeffrey Wu, and Dario Amodei. Scaling laws for neural language models, 2020.

[KPR+19] Tom Kwiatkowski, Jennimaria Palomaki, Olivia Redﬁeld, Michael Collins, Ankur Parikh, Chris Alberti,
Danielle Epstein, Illia Polosukhin, Matthew Kelcey, Jacob Devlin, Kenton Lee, Kristina N. Toutanova,
Llion Jones, Ming-Wei Chang, Andrew Dai, Jakob Uszkoreit, Quoc Le, and Slav Petrov. Natural ques-
tions: a benchmark for question answering research. Transactions of the Association of Computational
Linguistics, 2019.

[KR16] Yoon Kim and Alexander M. Rush. Sequence-level knowledge distillation. Arxiv, 2016.

[LB02] Edward Loper and Steven Bird. Nltk: The natural language toolkit, 2002.

[LC19] Guillaume Lample and Alexis Conneau. Cross-lingual language model pretraining. arXiv preprint

arXiv:1901.07291, 2019.

70

[LCG+19] Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, and Radu Sori-
cut. ALBERT: A lite BERT for self-supervised learning of language representations. arXiv preprint
arXiv:1909.11942, 2019.

[LCH+20] Xiaodong Liu, Hao Cheng, Pengcheng He, Weizhu Chen, Yu Wang, Hoifung Poon, and Jianfeng Gao.

Adversarial training for large neural language models. arXiv preprint arXiv:2004.08994, 2020.

[LDL19] Zhongyang Li, Xiao Ding, and Ting Liu. Story ending prediction by transferable bert. arXiv preprint

arXiv:1905.07504, 2019.

[LDM12] Hector Levesque, Ernest Davis, and Leora Morgenstern. The Winograd schema challenge. In Thirteenth

International Conference on the Principles of Knowledge Representation and Reasoning, 2012.

[LGG+20] Yinhan Liu, Jiatao Gu, Naman Goyal, Xian Li, Sergey Edunov, Marjan Ghazvininejad, Mike Lewis, and
Luke Zettlemoyer. Multilingual denoising pre-training for neural machine translation. arXiv preprint
arXiv:2001.08210, 2020.

[LGH+15] Xiaodong Liu, Jianfeng Gao, Xiaodong He, Li Deng, Kevin Duh, and Ye-Yi Wang. Representation
learning using multi-task deep neural networks for semantic classiﬁcation and information retrieval. In
Proceedings of the 2015 Conference of the North American Chapter of the Association for Computational
Linguistics: Human Language Technologies, 2015.

[LH17] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization.

arXiv preprint

arXiv:1711.05101, 2017.

[LHCG19a] Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jianfeng Gao. Improving multi-task deep neural
networks via knowledge distillation for natural language understanding. arXiv preprint arXiv:1904.09482,
2019.

[LHCG19b] Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jianfeng Gao. Multi-task deep neural networks for

natural language understanding. arXiv preprint arXiv:1901.11504, 2019.

[Lin20] Tal Linzen. How can we accelerate progress towards human-like linguistic generalization? arXiv preprint

arXiv:2005.00955, 2020.

[LLG+19] Mike Lewis, Yinhan Liu, Naman Goyal, Marjan Ghazvininejad, Abdelrahman Mohamed, Omer Levy,
Ves Stoyanov, and Luke Zettlemoyer. Bart: Denoising sequence-to-sequence pre-training for natural
language generation, translation, and comprehension. arXiv preprint arXiv:1910.13461, 2019.

[LM17] Ke Li and Jitendra Malik. Learning to optimize neural nets. arXiv preprint arXiv:1703.00441, 2017.

[LOG+19] Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis,
Luke Zettlemoyer, and Veselin Stoyanov. RoBERTa: A robustly optimized BERT pretraining approach.
arXiv preprint arXiv:1907.11692, 2019.

[LPP+20] Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal,
Heinrich K¨uttler, Mike Lewis, Wen-tau Yih, Tim Rockt¨aschel, Sebastian Riedel, and Kiela Douwe.
Retrieval-augmented generation for knowledge-intensive nlp tasks. arXiv preprint arXiv:2005.11401,
2020.

[LSP+18] Peter J. Liu, Mohammad Saleh, Etienne Pot, Ben Goodrich, Ryan Sepassi, Lukasz Kaiser, and Noam
Shazeer. Generating Wikipedia by summarizing long sequences. arXiv preprint arXiv:1801.10198, 2018.

[LWS+20] Zhuohan Li, Eric Wallace, Sheng Shen, Kevin Lin, Kurt Keutzer, Dan Klein, and Joseph E. Gonzalez.
Train large, then compress: Rethinking model size for efﬁcient training and inference of transformers,
2020.

[LXL+17] Guokun Lai, Qizhe Xie, Hanxiao Liu, Yiming Yang, and Eduard Hovy. Race: Large-scale reading

comprehension dataset from examinations. arXiv preprint arXiv:1704.04683, 2017.

[LYN+20] Sheng-Chieh Lin, Jheng-Hong Yang, Rodrigo Nogueira, Ming-Feng Tsai, Chuan-Ju Wang, and Jimmy

Lin. Tttttackling winogrande schemas. arXiv preprint arXiv:2003.08380, 2020.

[Mac92] David. MacKay. Information-based objective functions for active data selection. Neural Computation,

1992.

71

[MBXS17] Bryan McCann, James Bradbury, Caiming Xiong, and Richard Socher. Learned in translation: Con-
textualized word vectors. In Advances in Neural Information Processing Systems, pages 6294–6305,
2017.

[MCCD13] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efﬁcient estimation of word representations

in vector space. arXiv preprint arXiv:1301.3781, 2013.

[MCH+16] Nasrin Mostafazadeh, Nathanael Chambers, Xiaodong He, Devi Parikh, Dhruv Batra, Lucy Vanderwende,
Pushmeet Kohli, and James Allen. A corpus and evaluation framework for deeper understanding of
commonsense stories. arXiv preprint arXiv:1604.01696, 2016.

[MCKS18] Todor Mihaylov, Peter Clark, Tushar Khot, and Ashish Sabharwal. Can a suit of armor conduct electricity?

a new dataset for open book question answering. ArXiv, abs/1809.02789, 2018.

[MKAT18] Sam McCandlish, Jared Kaplan, Dario Amodei, and OpenAI Dota Team. An empirical model of

large-batch training, 2018.

[MKM+94] Mitchell Marcus, Grace Kim, Mary Ann Marcinkiewicz, Robert MacIntyre, Ann Bies, Mark Ferguson,
Karen Katz, and Britta Schasberger. The penn treebank: annotating predicate argument structure.
In Proceedings of the workshop on Human Language Technology, pages 114–119. Association for
Computational Linguistics, 1994.

[MKXS18] Bryan McCann, Nitish Shirish Keskar, Caiming Xiong, and Richard Socher. The natural language

decathlon: Multitask learning as question answering. arXiv preprint arXiv:1806.08730, 2018.

[MPL19] R Thomas McCoy, Ellie Pavlick, and Tal Linzen. Right for the wrong reasons: Diagnosing syntactic

heuristics in natural language inference. arXiv preprint arXiv:1902.01007, 2019.

[MWZ+18] Margaret Mitchell, Simone Wu, Andrew Zaldivar, Parker Barnes, Lucy Vasserman, Ben Hutchinson,

Elena Spitzer, Inioluwa Deborah Raji, and Timnit Gebru. Model cards for model reporting, 2018.

[NBR20] Moin Nadeem, Anna Bethke, and Siva Reddy. Stereoset: Measuring stereotypical bias in pretrained

language models. arXiv preprint arXiv:2004.09456, 2020.

[NK19] Timothy Niven and Hung-Yu Kao. Probing neural network comprehension of natural language arguments.

arXiv preprint arXiv:1907.07355, 2019.

[Nor09] Peter Norvig. Natural language corpus data, 2009.

[NvNvdG19] Malvina Nissim, Rik van Noord, and Rob van der Goot. Fair is better than sensational: Man is to doctor

as woman is to doctor. arXiv preprint arXiv:1905.09866, 2019.

[NWD+19] Yixin Nie, Adina Williams, Emily Dinan, Mohit Bansal, Jason Weston, and Douwe Kiela. Adversarial

nli: A new benchmark for natural language understanding. arXiv preprint arXiv:1910.14599, 2019.

[oR16] University of Regensburg. Fascha, 2016.

[PCC18] Mohammad Taher Pilehvar and Jose Camacho-Collados. WIC: 10,000 example pairs for evaluating

context-sensitive representations. arXiv preprint arXiv:1808.09121, 2018.

[PFB18] Jason Phang, Thibault F´evry, and Samuel R. Bowman. Sentence encoders on STILTs: Supplementary

training on intermediate labeled-data tasks. arXiv preprint arXiv:1811.01088, 2018.

[PHR+18] Adam Poliak, Aparajita Haldar, Rachel Rudinger, J. Edward Hu, Ellie Pavlick, Aaron Steven White, and
Benjamin Van Durme. Collecting diverse natural language inference problems for sentence representation
evaluation. In Proceedings of EMNLP, 2018.

[PKL+16] Denis Paperno, Germ´an Kruszewski, Angeliki Lazaridou, Quan Ngoc Pham, Raffaella Bernardi, Sandro
Pezzelle, Marco Baroni, Gemma Boleda, and Raquel Fern´andez. The lambada dataset: Word prediction
requiring a broad discourse context. arXiv preprint arXiv:1606.06031, 2016.

[PNZtY18] Matthew E. Peters, Mark Neumann, Luke Zettlemoyer, and Wen tau Yih. Dissecting contextual word

embeddings: Architecture and representation, 2018.

[Pos18] Matt Post. A call for clarity in reporting BLEU scores. arXiv preprint arXiv:1804.08771, 2018.

72

[PSM14] Jeffrey Pennington, Richard Socher, and Christopher Manning. GloVe: Global vectors for word
In Proceedings of the 2014 conference on empirical methods in natural language

representation.
processing (EMNLP), 2014.

[QIA20] QIANXIN. Sa-net on albert (ensemble), April 2020.

[QMZH19] Yusu Qian, Urwa Muaz, Ben Zhang, and Jae Won Hyun. Reducing gender bias in word-level language
models with a gender-equalizing loss function. arXiv preprint arXiv:1905.12801, 2019.

[RBG11] Melissa Roemmele, Cosmin Adrian Bejan, and Andrew S Gordon. Choice of plausible alternatives: An
evaluation of commonsense causal reasoning. In 2011 AAAI Spring Symposium Series, 2011.

[RCM19] Siva Reddy, Danqi Chen, and Christopher D Manning. Coqa: A conversational question answering
challenge. Transactions of the Association for Computational Linguistics, 7:249–266, 2019.

[RCP+17] Scott Reed, Yutian Chen, Thomas Paine, A¨aron van den Oord, SM Eslami, Danilo Rezende, Oriol
Vinyals, and Nando de Freitas. Few-shot autoregressive density estimation: Towards learning to learn
distributions. arXiv preprint arXiv:1710.10304, 2017.

[RJL18] Pranav Rajpurkar, Robin Jia, and Percy Liang. Know what you don’t know: Unanswerable questions for

squad. arXiv preprint arXiv:1806.03822, 2018.

[RL16] Sachin Ravi and Hugo Larochelle. Optimization as a model for few-shot learning. ICLR 2017 (oral),

2016.

[RLL+19] Qiu Ran, Yankai Lin, Peng Li, Jie Zhou, and Zhiyuan Liu. NumNet: Machine reading comprehension

with numerical reasoning. In Proceedings of EMNLP, 2019.

[RNLVD18] Rachel Rudinger, Jason Naradowsky, Brian Leonard, and Benjamin Van Durme. Gender bias in

coreference resolution. arXiv preprint arXiv:1804.09301, 2018.

[RNSS18] Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language understanding

by generative pre-training, 2018.

[Ros12] R.S. Ross. Guide for conducting risk assessments. NIST Special Publication, 2012.

[RRBS19] Jonathan S. Rosenfeld, Amir Rosenfeld, Yonatan Belinkov, and Nir Shavit. A constructive prediction of

the generalization error across scales, 2019.

[RRS20] Adam Roberts, Colin Raffel, and Noam Shazeer. How much knowledge can you pack into the parameters

of a language model? arXiv preprint arXiv:2002.08910, 2020.

[RSR+19] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi
Zhou, Wei Li, and Peter J. Liu. Exploring the limits of transfer learning with a uniﬁed text-to-text
transformer, 2019.

[RWC+19] Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language

models are unsupervised multitask learners, 2019.

[SBBC19] Keisuke Sakaguchi, Ronan Le Bras, Chandra Bhagavatula, and Yejin Choi. Winogrande: An adversarial

winograd schema challenge at scale, 2019.

[SBC+19] Irene Solaiman, Miles Brundage, Jack Clark, Amanda Askell, Ariel Herbert-Voss, Jeff Wu, Alec Radford,
Gretchen Krueger, Jong Wook Kim, Sarah Kreps, Miles McCain, Alex Newhouse, Jason Blazakis, Kris
McGufﬁe, and Jasmine Wang. Release strategies and the social impacts of language models, 2019.

[SCNP19] Emily Sheng, Kai-Wei Chang, Premkumar Natarajan, and Nanyun Peng. The woman worked as a

babysitter: On biases in language generation. arXiv preprint arXiv:1909.01326, 2019.

[SDCW19] Victor Sanh, Lysandre Debut, Julien Chaumond, and Thomas Wolf. DistilBERT, a distilled version of

BERT: smaller, faster, cheaper and lighter. arXiv preprint arXiv:1910.01108, 2019.

[SDSE19] Roy Schwartz, Jesse Dodge, Noah A. Smith, and Oren Etzioni. Green AI. CoRR, abs/1907.10597, 2019.

[SHB15] Rico Sennrich, Barry Haddow, and Alexandra Birch. Improving neural machine translation models with

monolingual data. arXiv preprint arXiv:1511.06709, 2015.

73

[SMM+17] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton, and Jeff
Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts layer. arXiv preprint
arXiv:1701.06538, 2017.

[SPP+19] Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro.

Megatron-lm: Training multi-billion parameter language models using model parallelism, 2019.

[SS20] Timo Schick and Hinrich Sch¨utze. Exploiting cloze questions for few-shot text classiﬁcation and natural

language inference. arXiv preprint arXiv:2001.07676, 2020.

[STQ+19] Kaitao Song, Xu Tan, Tao Qin, Jianfeng Lu, and Tie-Yan Liu. MASS: Masked sequence to sequence

pre-training for language generation. arXiv preprint arXiv:1905.02450, 2019.

[TFR+17] Josh Tobin, Rachel Fong, Alex Ray, Jonas Schneider, Wojciech Zaremba, and Pieter Abbeel. Domain
randomization for transferring deep neural networks from simulation to the real world. In 2017 IEEE/RSJ
international conference on intelligent robots and systems (IROS), pages 23–30. IEEE, 2017.

[TL05] Peter D. Turney and Michael L. Littman. Corpus-based learning of analogies and semantic relations.

CoRR, abs/cs/0508103, 2005.

[TL18] Trieu H. Trinh and Quoc V. Le. A simple method for commonsense reasoning. arXiv preprint

arXiv:1806.02847, 2018.

[TLBS03] Peter D. Turney, Michael L. Littman, Jeffrey Bigham, and Victor Shnayder. Combining independent

modules to solve multiple-choice synonym and analogy problems. CoRR, cs.CL/0309035, 2003.

[Tur20] Project Turing. Microsoft research blog, Feb 2020.

[VBL+16] Oriol Vinyals, Charles Blundell, Timothy Lillicrap, Daan Wierstra, et al. Matching Networks for One

Shot Learning. In Advances in neural information processing systems, pages 3630–3638, 2016.

[VSP+17] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Łukasz
Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information processing
systems, 2017.

[WPN+19] Alex Wang, Yada Pruksachatkun, Nikita Nangia, Amanpreet Singh, Julian Michael, Felix Hill, Omer
Levy, and Samuel Bowman. Superglue: A stickier benchmark for general-purpose language understand-
ing systems. In Advances in Neural Information Processing Systems, pages 3261–3275, 2019.

[WXH+18] Yiren Wang, Yingce Xia, Tianyu He, Fei Tian, Tao Qin, ChengXiang Zhai, and Tie-Yan Liu. Multi-agent

dual learning. ICLR 2019, 2018.

[XDH+19] Qizhe Xie, Zihang Dai, Eduard Hovy, Minh-Thang Luong, and Quoc V. Le. Unsupervised data

augmentation for consistency training, 2019.

[YdC+19] Dani Yogatama, Cyprien de Masson d’Autume, Jerome Connor, Tomas Kocisky, Mike Chrzanowski,
Lingpeng Kong, Angeliki Lazaridou, Wang Ling, Lei Yu, Chris Dyer, et al. Learning and evaluating
general linguistic intelligence. arXiv preprint arXiv:1901.11373, 2019.

[YDY+19] Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, and Quoc V. Le. XLNet:
Generalized autoregressive pretraining for language understanding. arXiv preprint arXiv:1906.08237,
2019.

[ZHB+19] Rowan Zellers, Ari Holtzman, Yonatan Bisk, Ali Farhadi, and Yejin Choi. Hellaswag: Can a machine

really ﬁnish your sentence? arXiv preprint arXiv:1905.07830, 2019.

[ZHR+19] Rowan Zellers, Ari Holtzman, Hannah Rashkin, Yonatan Bisk, Ali Farhadi, Franziska Roesner, and Yejin

Choi. Defending against neural fake news. arXiv preprint arXiv:1905.12616, 2019.

[ZLL+18] Sheng Zhang, Xiaodong Liu, Jingjing Liu, Jianfeng Gao, Kevin Duh, and Benjamin Van Durme.
ReCoRD: Bridging the gap between human and machine commonsense reading comprehension. arXiv
preprint arXiv:1810.12885, 2018.

[ZSW+19a] Daniel M. Ziegler, Nisan Stiennon, Jeffrey Wu, Tom B. Brown, Alec Radford, Dario Amodei, Paul

Christiano, and Geoffrey Irving. Fine-tuning language models from human preferences, 2019.

74

[ZSW+19b] Daniel M. Ziegler, Nisan Stiennon, Jeffrey Wu, Tom B. Brown, Alec Radford, Dario Amodei, Paul Chris-
tiano, and Geoffrey Irving. Fine-tuning language models from human preferences. ArXiv, abs/1909.08593,
2019.

75

"
4,GAN.pdf,"Generative Adversarial Nets

Ian J. Goodfellow∗, Jean Pouget-Abadie†, Mehdi Mirza, Bing Xu, David Warde-Farley,
Sherjil Ozair‡, Aaron Courville, Yoshua Bengio§
D´epartement d’informatique et de recherche op´erationnelle
Universit´e de Montr´eal
Montr´eal, QC H3C 3J7

Abstract

We propose a new framework for estimating generative models via an adversar-
ial process, in which we simultaneously train two models: a generative model G
that captures the data distribution, and a discriminative model D that estimates
the probability that a sample came from the training data rather than G. The train-
ing procedure for G is to maximize the probability of D making a mistake. This
framework corresponds to a minimax two-player game. In the space of arbitrary
functions G and D, a unique solution exists, with G recovering the training data
distribution and D equal to 1
2 everywhere. In the case where G and D are deﬁned
by multilayer perceptrons, the entire system can be trained with backpropagation.
There is no need for any Markov chains or unrolled approximate inference net-
works during either training or generation of samples. Experiments demonstrate
the potential of the framework through qualitative and quantitative evaluation of
the generated samples.

1

Introduction

The promise of deep learning is to discover rich, hierarchical models [2] that represent probability
distributions over the kinds of data encountered in artiﬁcial intelligence applications, such as natural
images, audio waveforms containing speech, and symbols in natural language corpora. So far, the
most striking successes in deep learning have involved discriminative models, usually those that
map a high-dimensional, rich sensory input to a class label [14, 20]. These striking successes have
primarily been based on the backpropagation and dropout algorithms, using piecewise linear units
[17, 8, 9] which have a particularly well-behaved gradient . Deep generative models have had less
of an impact, due to the difﬁculty of approximating many intractable probabilistic computations that
arise in maximum likelihood estimation and related strategies, and due to difﬁculty of leveraging
the beneﬁts of piecewise linear units in the generative context. We propose a new generative model
estimation procedure that sidesteps these difﬁculties. 1

In the proposed adversarial nets framework, the generative model is pitted against an adversary: a
discriminative model that learns to determine whether a sample is from the model distribution or the
data distribution. The generative model can be thought of as analogous to a team of counterfeiters,
trying to produce fake currency and use it without detection, while the discriminative model is
analogous to the police, trying to detect the counterfeit currency. Competition in this game drives
both teams to improve their methods until the counterfeits are indistiguishable from the genuine
articles.

∗Ian Goodfellow is now a research scientist at Google, but did this work earlier as a UdeM student
†Jean Pouget-Abadie did this work while visiting Universit´e de Montr´eal from Ecole Polytechnique.
‡Sherjil Ozair is visiting Universit´e de Montr´eal from Indian Institute of Technology Delhi
§Yoshua Bengio is a CIFAR Senior Fellow.
1All code and hyperparameters available at http://www.github.com/goodfeli/adversarial

1

This framework can yield speciﬁc training algorithms for many kinds of model and optimization
algorithm. In this article, we explore the special case when the generative model generates samples
by passing random noise through a multilayer perceptron, and the discriminative model is also a
multilayer perceptron. We refer to this special case as adversarial nets. In this case, we can train
both models using only the highly successful backpropagation and dropout algorithms [16] and
sample from the generative model using only forward propagation. No approximate inference or
Markov chains are necessary.

2 Related work

Until recently, most work on deep generative models focused on models that provided a parametric
speciﬁcation of a probability distribution function. The model can then be trained by maximiz-
ing the log likelihood. In this family of model, perhaps the most succesful is the deep Boltzmann
machine [25]. Such models generally have intractable likelihood functions and therefore require
numerous approximations to the likelihood gradient. These difﬁculties motivated the development
of “generative machines”–models that do not explicitly represent the likelihood, yet are able to gen-
erate samples from the desired distribution. Generative stochastic networks [4] are an example of
a generative machine that can be trained with exact backpropagation rather than the numerous ap-
proximations required for Boltzmann machines. This work extends the idea of a generative machine
by eliminating the Markov chains used in generative stochastic networks.

Our work backpropagates derivatives through generative processes by using the observation that

∇xE(cid:15)∼N (0,σ2I)f (x + (cid:15)) = ∇xf (x).

lim
σ→0

We were unaware at the time we developed this work that Kingma and Welling [18] and Rezende
et al. [23] had developed more general stochastic backpropagation rules, allowing one to backprop-
agate through Gaussian distributions with ﬁnite variance, and to backpropagate to the covariance
parameter as well as the mean. These backpropagation rules could allow one to learn the condi-
tional variance of the generator, which we treated as a hyperparameter in this work. Kingma and
Welling [18] and Rezende et al. [23] use stochastic backpropagation to train variational autoen-
coders (VAEs). Like generative adversarial networks, variational autoencoders pair a differentiable
generator network with a second neural network. Unlike generative adversarial networks, the sec-
ond network in a VAE is a recognition model that performs approximate inference. GANs require
differentiation through the visible units, and thus cannot model discrete data, while VAEs require
differentiation through the hidden units, and thus cannot have discrete latent variables. Other VAE-
like approaches exist [12, 22] but are less closely related to our method.

Previous work has also taken the approach of using a discriminative criterion to train a generative
model [29, 13]. These approaches use criteria that are intractable for deep generative models. These
methods are difﬁcult even to approximate for deep models because they involve ratios of probabili-
ties which cannot be approximated using variational approximations that lower bound the probabil-
ity. Noise-contrastive estimation (NCE) [13] involves training a generative model by learning the
weights that make the model useful for discriminating data from a ﬁxed noise distribution. Using a
previously trained model as the noise distribution allows training a sequence of models of increasing
quality. This can be seen as an informal competition mechanism similar in spirit to the formal com-
petition used in the adversarial networks game. The key limitation of NCE is that its “discriminator”
is deﬁned by the ratio of the probability densities of the noise distribution and the model distribution,
and thus requires the ability to evaluate and backpropagate through both densities.

Some previous work has used the general concept of having two neural networks compete. The most
relevant work is predictability minimization [26]. In predictability minimization, each hidden unit
in a neural network is trained to be different from the output of a second network, which predicts
the value of that hidden unit given the value of all of the other hidden units. This work differs from
predictability minimization in three important ways: 1) in this work, the competition between the
networks is the sole training criterion, and is sufﬁcient on its own to train the network. Predictability
minimization is only a regularizer that encourages the hidden units of a neural network to be sta-
tistically independent while they accomplish some other task; it is not a primary training criterion.
2) The nature of the competition is different. In predictability minimization, two networks’ outputs
are compared, with one network trying to make the outputs similar and the other trying to make the

2

outputs different. The output in question is a single scalar. In GANs, one network produces a rich,
high dimensional vector that is used as the input to another network, and attempts to choose an input
that the other network does not know how to process. 3) The speciﬁcation of the learning process
is different. Predictability minimization is described as an optimization problem with an objective
function to be minimized, and learning approaches the minimum of the objective function. GANs
are based on a minimax game rather than an optimization problem, and have a value function that
one agent seeks to maximize and the other seeks to minimize. The game terminates at a saddle point
that is a minimum with respect to one player’s strategy and a maximum with respect to the other
player’s strategy.

Generative adversarial networks has been sometimes confused with the related concept of “adversar-
ial examples” [28]. Adversarial examples are examples found by using gradient-based optimization
directly on the input to a classiﬁcation network, in order to ﬁnd examples that are similar to the
data yet misclassiﬁed. This is different from the present work because adversarial examples are
not a mechanism for training a generative model. Instead, adversarial examples are primarily an
analysis tool for showing that neural networks behave in intriguing ways, often conﬁdently clas-
sifying two images differently with high conﬁdence even though the difference between them is
imperceptible to a human observer. The existence of such adversarial examples does suggest that
generative adversarial network training could be inefﬁcient, because they show that it is possible to
make modern discriminative networks conﬁdently recognize a class without emulating any of the
human-perceptible attributes of that class.

3 Adversarial nets

The adversarial modeling framework is most straightforward to apply when the models are both
multilayer perceptrons. To learn the generator’s distribution pg over data x, we deﬁne a prior on
input noise variables pz(z), then represent a mapping to data space as G(z; θg), where G is a
differentiable function represented by a multilayer perceptron with parameters θg. We also deﬁne a
second multilayer perceptron D(x; θd) that outputs a single scalar. D(x) represents the probability
that x came from the data rather than pg. We train D to maximize the probability of assigning the
correct label to both training examples and samples from G. We simultaneously train G to minimize
log(1 − D(G(z))). In other words, D and G play the following two-player minimax game with
value function V (G, D):
min
G

V (D, G) = Ex∼pdata(x)[log D(x)] + Ez∼pz(z)[log(1 − D(G(z)))].

max
D

(1)

In the next section, we present a theoretical analysis of adversarial nets, essentially showing that
the training criterion allows one to recover the data generating distribution as G and D are given
enough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical
explanation of the approach. In practice, we must implement the game using an iterative, numerical
approach. Optimizing D to completion in the inner loop of training is computationally prohibitive,
and on ﬁnite datasets would result in overﬁtting. Instead, we alternate between k steps of optimizing
D and one step of optimizing G. This results in D being maintained near its optimal solution, so
long as G changes slowly enough. The procedure is formally presented in Algorithm 1.

In practice, equation 1 may not provide sufﬁcient gradient for G to learn well. Early in learning,
when G is poor, D can reject samples with high conﬁdence because they are clearly different from
the training data. In this case, log(1 − D(G(z))) saturates. Rather than training G to minimize
log(1 − D(G(z))) we can train G to maximize log D(G(z)). This objective function results in the
same ﬁxed point of the dynamics of G and D but provides much stronger gradients early in learning.

4 Theoretical Results

The generator G implicitly deﬁnes a probability distribution pg as the distribution of the samples
G(z) obtained when z ∼ pz. Therefore, we would like Algorithm 1 to converge to a good estimator
of pdata, if given enough capacity and training time. The results of this section are done in a non-
parametric setting, e.g. we represent a model with inﬁnite capacity by studying convergence in the
space of probability density functions.

We will show in section 4.1 that this minimax game has a global optimum for pg = pdata. We will
then show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.

3

. . .

(a)

(b)

(c)

(d)

Figure 1: Generative adversarial nets are trained by simultaneously updating the discriminative distribution
(D, blue, dashed line) so that it discriminates between samples from the data generating distribution (black,
dotted line) px from those of the generative distribution pg (G) (green, solid line). The lower horizontal line is
the domain from which z is sampled, in this case uniformly. The horizontal line above is part of the domain
of x. The upward arrows show how the mapping x = G(z) imposes the non-uniform distribution pg on
transformed samples. G contracts in regions of high density and expands in regions of low density of pg. (a)
Consider an adversarial pair near convergence: pg is similar to pdata and D is a partially accurate classiﬁer.
(b) In the inner loop of the algorithm D is trained to discriminate samples from data, converging to D∗(x) =
pdata(x)+pg (x) . (c) After an update to G, gradient of D has guided G(z) to ﬂow to regions that are more likely
to be classiﬁed as data. (d) After several steps of training, if G and D have enough capacity, they will reach a
point at which both cannot improve because pg = pdata. The discriminator is unable to differentiate between
the two distributions, i.e. D(x) = 1
2 .

pdata(x)

Algorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of
steps to apply to the discriminator, k, is a hyperparameter. We used k = 1, the least expensive option, in our
experiments.

for number of training iterations do

for k steps do

• Sample minibatch of m noise samples {z(1), . . . , z(m)} from noise prior pg(z).
• Sample minibatch of m examples {x(1), . . . , x(m)} from data generating distribution
pdata(x).
• Update the discriminator by ascending its stochastic gradient:

∇θd

1
m

m
(cid:88)

(cid:104)

i=1

log D

(cid:16)

x(i)(cid:17)

+ log

(cid:16)

1 − D

(cid:16)

(cid:16)

z(i)(cid:17)(cid:17)(cid:17)(cid:105)

.

G

end for
• Sample minibatch of m noise samples {z(1), . . . , z(m)} from noise prior pg(z).
• Update the generator by descending its stochastic gradient:

∇θg

1
m

m
(cid:88)

i=1

(cid:16)

log

1 − D

(cid:16)

(cid:16)

z(i)(cid:17)(cid:17)(cid:17)

.

G

end for
The gradient-based updates can use any standard gradient-based learning rule. We used momen-
tum in our experiments.

4.1 Global Optimality of pg = pdata

We ﬁrst consider the optimal discriminator D for any given generator G.

Proposition 1. For G ﬁxed, the optimal discriminator D is

D∗

G(x) =

pdata(x)
pdata(x) + pg(x)

(2)

4

xzXZXZXZProof. The training criterion for the discriminator D, given any generator G, is to maximize the
quantity V (G, D)

(cid:90)

(cid:90)

V (G, D) =

pdata(x) log(D(x))dx +

pz(z) log(1 − D(g(z)))dz

x

(cid:90)

=

pdata(x) log(D(x)) + pg(x) log(1 − D(x))dx

(3)

z

x

For any (a, b) ∈ R2 \ {0, 0}, the function y → a log(y) + b log(1 − y) achieves its maximum in
a
a+b . The discriminator does not need to be deﬁned outside of Supp(pdata) ∪ Supp(pg),
[0, 1] at
concluding the proof.

Note that the training objective for D can be interpreted as maximizing the log-likelihood for es-
timating the conditional probability P (Y = y|x), where Y indicates whether x comes from pdata
(with y = 1) or from pg (with y = 0). The minimax game in Eq. 1 can now be reformulated as:

C(G) = max

D

V (G, D)

=Ex∼pdata[log D∗
=Ex∼pdata[log D∗

G(x)] + Ez∼pz [log(1 − D∗
G(x)] + Ex∼pg [log(1 − D∗

G(G(z)))]
G(x))]
(cid:20)

=Ex∼pdata

(cid:20)

log

pdata(x)
Pdata(x) + pg(x)

(cid:21)

+ Ex∼pg

log

pg(x)
pdata(x) + pg(x)

(4)

(cid:21)

Theorem 1. The global minimum of the virtual training criterion C(G) is achieved if and only if
pg = pdata. At that point, C(G) achieves the value − log 4.

Proof. For pg = pdata, D∗
ﬁnd C(G) = log 1
2 + log 1
only for pg = pdata, observe that

2 , (consider Eq. 2). Hence, by inspecting Eq. 4 at D∗

G(x) = 1
2 , we
2 = − log 4. To see that this is the best possible value of C(G), reached

G(x) = 1

Ex∼pdata [− log 2] + Ex∼pg [− log 2] = − log 4

and that by subtracting this expression from C(G) = V (D∗
G, G), we obtain:
(cid:18)
(cid:19)

(cid:18)

C(G) = − log(4) + KL

pdata

+ KL

pg

(cid:13)
(cid:13)
(cid:13)
(cid:13)

pdata + pg
2

(cid:13)
(cid:13)
(cid:13)
(cid:13)

pdata + pg
2

(cid:19)

(5)

where KL is the Kullback–Leibler divergence. We recognize in the previous expression the Jensen–
Shannon divergence between the model’s distribution and the data generating process:

C(G) = − log(4) + 2 · JSD (pdata (cid:107)pg )
(6)
Since the Jensen–Shannon divergence between two distributions is always non-negative, and zero
iff they are equal, we have shown that C ∗ = − log(4) is the global minimum of C(G) and that the
only solution is pg = pdata, i.e., the generative model perfectly replicating the data distribution.

4.2 Convergence of Algorithm 1

Proposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator
is allowed to reach its optimum given G, and pg is updated so as to improve the criterion

Ex∼pdata[log D∗

G(x)] + Ex∼pg [log(1 − D∗

G(x))]

then pg converges to pdata

Proof. Consider V (G, D) = U (pg, D) as a function of pg as done in the above criterion. Note
that U (pg, D) is convex in pg. The subderivatives of a supremum of convex functions include the
derivative of the function at the point where the maximum is attained. In other words, if f (x) =
supα∈A fα(x) and fα(x) is convex in x for every α, then ∂fβ(x) ∈ ∂f if β = arg supα∈A fα(x).
This is equivalent to computing a gradient descent update for pg at the optimal D given the cor-
responding G. supD U (pg, D) is convex in pg with a unique global optima as proven in Thm 1,
therefore with sufﬁciently small updates of pg, pg converges to px, concluding the proof.
In practice, adversarial nets represent a limited family of pg distributions via the function G(z; θg),
and we optimize θg rather than pg itself, so the proofs do not apply. However, the excellent perfor-
mance of multilayer perceptrons in practice suggests that they are a reasonable model to use despite
their lack of theoretical guarantees.

5

Model
DBN [3]
Stacked CAE [3]
Deep GSN [5]
Adversarial nets

MNIST
138 ± 2
121 ± 1.6
214 ± 1.1
225 ± 2

TFD
1909 ± 66
2110 ± 50
1890 ± 29
2057 ± 26

Table 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean log-
likelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we
computed the standard error across folds of the dataset, with a different σ chosen using the validation set of
each fold. On TFD, σ was cross validated on each fold and mean log-likelihood on each fold were computed.
For MNIST we compare against other models of the real-valued (rather than binary) version of dataset.

5 Experiments

We trained adversarial nets an a range of datasets including MNIST[21], the Toronto Face Database
(TFD) [27], and CIFAR-10 [19]. The generator nets used a mixture of rectiﬁer linear activations [17,
8] and sigmoid activations, while the discriminator net used maxout [9] activations. Dropout [16]
was applied in training the discriminator net. While our theoretical framework permits the use of
dropout and other noise at intermediate layers of the generator, we used noise as the input to only
the bottommost layer of the generator network.

We estimate probability of the test set data under pg by ﬁtting a Gaussian Parzen window to the
samples generated with G and reporting the log-likelihood under this distribution. The σ parameter
of the Gaussians was obtained by cross validation on the validation set. This procedure was intro-
duced in Breuleux et al. [7] and used for various generative models for which the exact likelihood
is not tractable [24, 3, 4]. Results are reported in Table 1. This method of estimating the likelihood
has somewhat high variance and does not perform well in high dimensional spaces but it is the best
method available to our knowledge. Advances in generative models that can sample but not estimate
likelihood directly motivate further research into how to evaluate such models. In Figures 2 and 3
we show samples drawn from the generator net after training. While we make no claim that these
samples are better than samples generated by existing methods, we believe that these samples are at
least competitive with the better generative models in the literature and highlight the potential of the
adversarial framework.

6 Advantages and disadvantages

This new framework comes with advantages and disadvantages relative to previous modeling frame-
works. The disadvantages are primarily that there is no explicit representation of pg(x), and that D
must be synchronized well with G during training (in particular, G must not be trained too much
without updating D, in order to avoid “the Helvetica scenario” in which G collapses too many values
of z to the same value of x to have enough diversity to model pdata), much as the negative chains of a
Boltzmann machine must be kept up to date between learning steps. The advantages are that Markov
chains are never needed, only backprop is used to obtain gradients, no inference is needed during
learning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes
the comparison of generative adversarial nets with other generative modeling approaches.

The aforementioned advantages are primarily computational. Adversarial models may also gain
some statistical advantage from the generator network not being updated directly with data exam-
ples, but only with gradients ﬂowing through the discriminator. This means that components of the
input are not copied directly into the generator’s parameters. Another advantage of adversarial net-
works is that they can represent very sharp, even degenerate distributions, while methods based on
Markov chains require that the distribution be somewhat blurry in order for the chains to be able to
mix between modes.

7 Conclusions and future work

This framework admits many straightforward extensions:

6

a)

c)

b)

d)

Figure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of
the neighboring sample, in order to demonstrate that the model has not memorized the training set. Samples
are fair random draws, not cherry-picked. Unlike most other visualizations of deep generative models, these
images show actual samples from the model distributions, not conditional means given samples of hidden units.
Moreover, these samples are uncorrelated because the sampling process does not depend on Markov chain
mixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator
and “deconvolutional” generator)

Figure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.

1. A conditional generative model p(x | c) can be obtained by adding c as input to both G and D.
2. Learned approximate inference can be performed by training an auxiliary network to predict z
given x. This is similar to the inference net trained by the wake-sleep algorithm [15] but with
the advantage that the inference net may be trained for a ﬁxed generator net after the generator
net has ﬁnished training.

3. One can approximately model all conditionals p(xS | x(cid:54)S) where S is a subset of the indices
of x by training a family of conditional models that share parameters. Essentially, one can use
adversarial nets to implement a stochastic extension of the deterministic MP-DBM [10].

4. Semi-supervised learning: features from the discriminator or inference net could improve perfor-

mance of classiﬁers when limited labeled data is available.

5. Efﬁciency improvements: training could be accelerated greatly by devising better methods for
coordinating G and D or determining better distributions to sample z from during training.

This paper has demonstrated the viability of the adversarial modeling framework, suggesting that
these research directions could prove useful.

7

Deep directed
graphical models

Training

Inference needed
during training.

Inference

Learned
approximate
inference

Sampling

No difﬁculties

Deep undirected
graphical models
Inference needed
during training.
MCMC needed to
approximate
partition function
gradient.

Variational
inference

Requires Markov
chain

Evaluating p(x)

Intractable, may be
approximated with
AIS

Intractable, may be
approximated with
AIS

Generative
autoencoders

Enforced tradeoff
between mixing
and power of
reconstruction
generation

MCMC-based
inference

Requires Markov
chain
Not explicitly
represented, may be
approximated with
Parzen density
estimation

Adversarial models

Synchronizing the
discriminator with
the generator.
Helvetica.

Learned
approximate
inference

No difﬁculties

Not explicitly
represented, may be
approximated with
Parzen density
estimation

Model design

Models need to be
designed to work
with the desired
inference scheme
— some inference
schemes support
similar model
families as GANs

Careful design
needed to ensure
multiple properties

Any differentiable
function is
theoretically
permitted

Any differentiable
function is
theoretically
permitted

Table 2: Challenges in generative modeling: a summary of the difﬁculties encountered by different approaches
to deep generative modeling for each of the major operations involving a model.

Acknowledgments

We would like to acknowledge Patrice Marcotte, Olivier Delalleau, Kyunghyun Cho, Guillaume
Alain and Jason Yosinski for helpful discussions. Yann Dauphin shared his Parzen window eval-
uation code with us. We would like to thank the developers of Pylearn2 [11] and Theano [6, 1],
particularly Fr´ed´eric Bastien who rushed a Theano feature speciﬁcally to beneﬁt this project. Ar-
naud Bergeron provided much-needed support with LATEX typesetting. We would also like to thank
CIFAR, and Canada Research Chairs for funding, and Compute Canada, and Calcul Qu´ebec for
providing computational resources. Ian Goodfellow is supported by the 2013 Google Fellowship in
Deep Learning. Finally, we would like to thank Les Trois Brasseurs for stimulating our creativity.

References

[1] Bastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I. J., Bergeron, A., Bouchard, N., and
Bengio, Y. (2012). Theano: new features and speed improvements. Deep Learning and Unsupervised
Feature Learning NIPS 2012 Workshop.

[2] Bengio, Y. (2009). Learning deep architectures for AI. Now Publishers.

[3] Bengio, Y., Mesnil, G., Dauphin, Y., and Rifai, S. (2013). Better mixing via deep representations.

In

ICML’13.

[4] Bengio, Y., Thibodeau-Laufer, E., and Yosinski, J. (2014a). Deep generative stochastic networks trainable

by backprop. In ICML’14.

[5] Bengio, Y., Thibodeau-Laufer, E., Alain, G., and Yosinski, J. (2014b). Deep generative stochastic net-
works trainable by backprop. In Proceedings of the 30th International Conference on Machine Learning
(ICML’14).

[6] Bergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins, G., Turian, J., Warde-Farley,
In Proceedings of the

D., and Bengio, Y. (2010). Theano: a CPU and GPU math expression compiler.
Python for Scientiﬁc Computing Conference (SciPy). Oral Presentation.

[7] Breuleux, O., Bengio, Y., and Vincent, P. (2011). Quickly generating representative samples from an

RBM-derived process. Neural Computation, 23(8), 2053–2073.

[8] Glorot, X., Bordes, A., and Bengio, Y. (2011). Deep sparse rectiﬁer neural networks. In AISTATS’2011.

8

[9] Goodfellow, I. J., Warde-Farley, D., Mirza, M., Courville, A., and Bengio, Y. (2013a). Maxout networks.

In ICML’2013.

[10] Goodfellow, I. J., Mirza, M., Courville, A., and Bengio, Y. (2013b). Multi-prediction deep Boltzmann

machines. In NIPS’2013.

[11] Goodfellow, I. J., Warde-Farley, D., Lamblin, P., Dumoulin, V., Mirza, M., Pascanu, R., Bergstra,
J., Bastien, F., and Bengio, Y. (2013c). Pylearn2: a machine learning research library. arXiv preprint
arXiv:1308.4214.

[12] Gregor, K., Danihelka, I., Mnih, A., Blundell, C., and Wierstra, D. (2014). Deep autoregressive networks.

In ICML’2014.

[13] Gutmann, M. and Hyvarinen, A. (2010). Noise-contrastive estimation: A new estimation principle for
unnormalized statistical models. In Proceedings of The Thirteenth International Conference on Artiﬁcial
Intelligence and Statistics (AISTATS’10).

[14] Hinton, G., Deng, L., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V., Nguyen, P.,
Sainath, T., and Kingsbury, B. (2012a). Deep neural networks for acoustic modeling in speech recognition.
IEEE Signal Processing Magazine, 29(6), 82–97.

[15] Hinton, G. E., Dayan, P., Frey, B. J., and Neal, R. M. (1995). The wake-sleep algorithm for unsupervised

neural networks. Science, 268, 1558–1161.

[16] Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2012b). Improving

neural networks by preventing co-adaptation of feature detectors. Technical report, arXiv:1207.0580.

[17] Jarrett, K., Kavukcuoglu, K., Ranzato, M., and LeCun, Y. (2009). What is the best multi-stage architecture
for object recognition? In Proc. International Conference on Computer Vision (ICCV’09), pages 2146–2153.
IEEE.

[18] Kingma, D. P. and Welling, M. (2014). Auto-encoding variational bayes. In Proceedings of the Interna-

tional Conference on Learning Representations (ICLR).

[19] Krizhevsky, A. and Hinton, G. (2009). Learning multiple layers of features from tiny images. Technical

report, University of Toronto.

[20] Krizhevsky, A., Sutskever, I., and Hinton, G. (2012). ImageNet classiﬁcation with deep convolutional

neural networks. In NIPS’2012.

[21] LeCun, Y., Bottou, L., Bengio, Y., and Haffner, P. (1998). Gradient-based learning applied to document

recognition. Proceedings of the IEEE, 86(11), 2278–2324.

[22] Mnih, A. and Gregor, K. (2014). Neural variational inference and learning in belief networks. Technical

report, arXiv preprint arXiv:1402.0030.

[23] Rezende, D. J., Mohamed, S., and Wierstra, D. (2014). Stochastic backpropagation and approximate

inference in deep generative models. Technical report, arXiv:1401.4082.

[24] Rifai, S., Bengio, Y., Dauphin, Y., and Vincent, P. (2012). A generative process for sampling contractive

auto-encoders. In ICML’12.

[25] Salakhutdinov, R. and Hinton, G. E. (2009). Deep Boltzmann machines. In AISTATS’2009, pages 448–

455.

[26] Schmidhuber, J. (1992). Learning factorial codes by predictability minimization. Neural Computation,

4(6), 863–879.

[27] Susskind, J., Anderson, A., and Hinton, G. E. (2010). The Toronto face dataset. Technical Report UTML

TR 2010-001, U. Toronto.

[28] Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I. J., and Fergus, R. (2014).

Intriguing properties of neural networks. ICLR, abs/1312.6199.

[29] Tu, Z. (2007). Learning generative models via discriminative approaches. In Computer Vision and Pattern

Recognition, 2007. CVPR’07. IEEE Conference on, pages 1–8. IEEE.

9

"
5,MAE.pdf,"Masked Autoencoders Are Scalable Vision Learners

Kaiming He∗,† Xinlei Chen∗ Saining Xie Yanghao Li Piotr Doll´ar Ross Girshick

∗equal technical contribution

†project lead

Facebook AI Research (FAIR)

1
2
0
2
c
e
D
9
1

]

V
C
.
s
c
[

3
v
7
7
3
6
0
.
1
1
1
2
:
v
i
X
r
a

Abstract

This paper shows that masked autoencoders (MAE) are
scalable self-supervised learners for computer vision. Our
MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based
on two core designs. First, we develop an asymmetric
encoder-decoder architecture, with an encoder that oper-
ates only on the visible subset of patches (without mask to-
kens), along with a lightweight decoder that reconstructs
the original image from the latent representation and mask
tokens. Second, we ﬁnd that masking a high proportion
of the input image, e.g., 75%, yields a nontrivial and
meaningful self-supervisory task. Coupling these two de-
signs enables us to train large models efﬁciently and ef-
fectively: we accelerate training (by 3× or more) and im-
prove accuracy. Our scalable approach allows for learning
high-capacity models that generalize well: e.g., a vanilla
ViT-Huge model achieves the best accuracy (87.8%) among
methods that use only ImageNet-1K data. Transfer per-
formance in downstream tasks outperforms supervised pre-
training and shows promising scaling behavior.

1. Introduction

Deep learning has witnessed an explosion of archi-
tectures of continuously growing capability and capacity
[33, 25, 57]. Aided by the rapid gains in hardware, mod-
els today can easily overﬁt one million images [13] and
begin to demand hundreds of millions of—often publicly
inaccessible—labeled images [16].

This appetite for data has been successfully addressed in
natural language processing (NLP) by self-supervised pre-
training. The solutions, based on autoregressive language
modeling in GPT [47, 48, 4] and masked autoencoding in
BERT [14], are conceptually simple: they remove a portion
of the data and learn to predict the removed content. These
methods now enable training of generalizable NLP models
containing over one hundred billion parameters [4].

The idea of masked autoencoders, a form of more gen-
eral denoising autoencoders [58], is natural and applicable
in computer vision as well. Indeed, closely related research

Figure 1. Our MAE architecture. During pre-training, a large
random subset of image patches (e.g., 75%) is masked out. The
encoder is applied to the small subset of visible patches. Mask
tokens are introduced after the encoder, and the full set of en-
coded patches and mask tokens is processed by a small decoder
that reconstructs the original image in pixels. After pre-training,
the decoder is discarded and the encoder is applied to uncorrupted
images (full sets of patches) for recognition tasks.

in vision [59, 46] preceded BERT. However, despite signif-
icant interest in this idea following the success of BERT,
progress of autoencoding methods in vision lags behind
NLP. We ask: what makes masked autoencoding different
between vision and language? We attempt to answer this
question from the following perspectives:

(i) Until recently, architectures were different. In vision,
convolutional networks [34] were dominant over the last
decade [33]. Convolutions typically operate on regular grids
and it is not straightforward to integrate ‘indicators’ such as
mask tokens [14] or positional embeddings [57] into con-
volutional networks. This architectural gap, however, has
been addressed with the introduction of Vision Transform-
ers (ViT) [16] and should no longer present an obstacle.

(ii) Information density is different between language
and vision. Languages are human-generated signals that
are highly semantic and information-dense. When training
a model to predict only a few missing words per sentence,
this task appears to induce sophisticated language under-
standing. Images, on the contrary, are natural signals with
heavy spatial redundancy—e.g., a missing patch can be re-
covered from neighboring patches with little high-level un-

1

encoder........decoderinputtarget 
 
 
 
 
 
Figure 2. Example results on ImageNet validation images. For each triplet, we show the masked image (left), our MAE reconstruction†
(middle), and the ground-truth (right). The masking ratio is 80%, leaving only 39 out of 196 patches. More examples are in the appendix.
†As no loss is computed on visible patches, the model output on visible patches is qualitatively worse. One can simply overlay the output with the visible
patches to improve visual quality. We intentionally opt not to do this, so we can more comprehensively demonstrate the method’s behavior.

Figure 3. Example results on COCO validation images, using an MAE trained on ImageNet (the same model weights as in Figure 2).
Observe the reconstructions on the two right-most examples, which, although different from the ground truth, are semantically plausible.

derstanding of parts, objects, and scenes. To overcome this
difference and encourage learning useful features, we show
that a simple strategy works well in computer vision: mask-
ing a very high portion of random patches. This strategy
largely reduces redundancy and creates a challenging self-
supervisory task that requires holistic understanding beyond
low-level image statistics. To get a qualitative sense of our
reconstruction task, see Figures 2 – 4.

(iii) The autoencoder’s decoder, which maps the latent
representation back to the input, plays a different role be-
tween reconstructing text and images. In vision, the decoder
reconstructs pixels, hence its output is of a lower semantic
level than common recognition tasks. This is in contrast
to language, where the decoder predicts missing words that
contain rich semantic information. While in BERT the de-
coder can be trivial (an MLP) [14], we found that for im-
ages, the decoder design plays a key role in determining the
semantic level of the learned latent representations.

Driven by this analysis, we present a simple, effective,
and scalable form of a masked autoencoder (MAE) for
visual representation learning. Our MAE masks random
patches from the input image and reconstructs the missing
patches in the pixel space. It has an asymmetric encoder-
decoder design. Our encoder operates only on the visible
subset of patches (without mask tokens), and our decoder is

lightweight and reconstructs the input from the latent rep-
resentation along with mask tokens (Figure 1). Shifting
the mask tokens to the small decoder in our asymmetric
encoder-decoder results in a large reduction in computation.
Under this design, a very high masking ratio (e.g., 75%) can
achieve a win-win scenario: it optimizes accuracy while al-
lowing the encoder to process only a small portion (e.g.,
25%) of patches. This can reduce overall pre-training time
by 3× or more and likewise reduce memory consumption,
enabling us to easily scale our MAE to large models.

Our MAE learns very high-capacity models that gen-
eralize well. With MAE pre-training, we can train data-
hungry models like ViT-Large/-Huge [16] on ImageNet-1K
with improved generalization performance. With a vanilla
ViT-Huge model, we achieve 87.8% accuracy when ﬁne-
tuned on ImageNet-1K. This outperforms all previous re-
sults that use only ImageNet-1K data. We also evaluate
transfer learning on object detection, instance segmentation,
and semantic segmentation. In these tasks, our pre-training
achieves better results than its supervised pre-training coun-
terparts, and more importantly, we observe signiﬁcant gains
by scaling up models. These observations are aligned
with those witnessed in self-supervised pre-training in NLP
[14, 47, 48, 4] and we hope that they will enable our ﬁeld to
explore a similar trajectory.

2

Self-supervised learning approaches have seen signiﬁcant
interest in computer vision, often focusing on different pre-
text tasks for pre-training [15, 61, 42, 70, 45, 17]. Re-
cently, contrastive learning [3, 22] has been popular, e.g.,
[62, 43, 23, 7], which models image similarity and dis-
similarity (or only similarity [21, 8]) between two or more
views. Contrastive and related methods strongly depend on
data augmentation [7, 21, 8]. Autoencoding pursues a con-
ceptually different direction, and it exhibits different behav-
iors as we will present.

3. Approach

Our masked autoencoder (MAE) is a simple autoencod-
ing approach that reconstructs the original signal given its
partial observation. Like all autoencoders, our approach
has an encoder that maps the observed signal to a latent
representation, and a decoder that reconstructs the origi-
nal signal from the latent representation. Unlike classical
autoencoders, we adopt an asymmetric design that allows
the encoder to operate only on the partial, observed signal
(without mask tokens) and a lightweight decoder that re-
constructs the full signal from the latent representation and
mask tokens. Figure 1 illustrates the idea, introduced next.

Masking. Following ViT [16], we divide an image into reg-
ular non-overlapping patches. Then we sample a subset of
patches and mask (i.e., remove) the remaining ones. Our
sampling strategy is straightforward: we sample random
patches without replacement, following a uniform distribu-
tion. We simply refer to this as “random sampling”.

Random sampling with a high masking ratio (i.e., the ra-
tio of removed patches) largely eliminates redundancy, thus
creating a task that cannot be easily solved by extrapolation
from visible neighboring patches (see Figures 2 – 4). The
uniform distribution prevents a potential center bias (i.e.,
more masked patches near the image center). Finally, the
highly sparse input creates an opportunity for designing an
efﬁcient encoder, introduced next.

MAE encoder. Our encoder is a ViT [16] but applied only
on visible, unmasked patches. Just as in a standard ViT, our
encoder embeds patches by a linear projection with added
positional embeddings, and then processes the resulting set
via a series of Transformer blocks. However, our encoder
only operates on a small subset (e.g., 25%) of the full set.
Masked patches are removed; no mask tokens are used.
This allows us to train very large encoders with only a frac-
tion of compute and memory. The full set is handled by a
lightweight decoder, described next.

MAE decoder. The input to the MAE decoder is the full
set of tokens consisting of (i) encoded visible patches, and
(ii) mask tokens. See Figure 1. Each mask token [14] is a
shared, learned vector that indicates the presence of a miss-

Figure 4. Reconstructions of ImageNet validation images using
an MAE pre-trained with a masking ratio of 75% but applied on
inputs with higher masking ratios. The predictions differ plausibly
from the original images, showing that the method can generalize.

2. Related Work

Masked language modeling and its autoregressive coun-
terparts, e.g., BERT [14] and GPT [47, 48, 4], are highly
successful methods for pre-training in NLP. These methods
hold out a portion of the input sequence and train models
to predict the missing content. These methods have been
shown to scale excellently [4] and a large abundance of ev-
idence indicates that these pre-trained representations gen-
eralize well to various downstream tasks.

Autoencoding is a classical method for learning representa-
tions. It has an encoder that maps an input to a latent repre-
sentation and a decoder that reconstructs the input. For ex-
ample, PCA and k-means are autoencoders [29]. Denoising
autoencoders (DAE) [58] are a class of autoencoders that
corrupt an input signal and learn to reconstruct the origi-
nal, uncorrupted signal. A series of methods can be thought
of as a generalized DAE under different corruptions, e.g.,
masking pixels [59, 46, 6] or removing color channels [70].
Our MAE is a form of denoising autoencoding, but different
from the classical DAE in numerous ways.

Masked image encoding methods learn representations
from images corrupted by masking. The pioneering work
of [59] presents masking as a noise type in DAE. Context
Encoder [46] inpaints large missing regions using convolu-
tional networks. Motivated by the success in NLP, related
recent methods [6, 16, 2] are based on Transformers [57].
iGPT [6] operates on sequences of pixels and predicts un-
known pixels. The ViT paper [16] studies masked patch
prediction for self-supervised learning. Most recently, BEiT
[2] proposes to predict discrete tokens [44, 50].

3

originalmask 75%mask 85%mask 95%ing patch to be predicted. We add positional embeddings to
all tokens in this full set; without this, mask tokens would
have no information about their location in the image. The
decoder has another series of Transformer blocks.

The MAE decoder is only used during pre-training to
perform the image reconstruction task (only the encoder
is used to produce image representations for recognition).
Therefore, the decoder architecture can be ﬂexibly designed
in a manner that is independent of the encoder design. We
experiment with very small decoders, narrower and shal-
lower than the encoder. For example, our default decoder
has <10% computation per token vs. the encoder. With this
asymmetrical design, the full set of tokens are only pro-
cessed by the lightweight decoder, which signiﬁcantly re-
duces pre-training time.

Reconstruction target. Our MAE reconstructs the input
by predicting the pixel values for each masked patch. Each
element in the decoder’s output is a vector of pixel values
representing a patch. The last layer of the decoder is a lin-
ear projection whose number of output channels equals the
number of pixel values in a patch. The decoder’s output is
reshaped to form a reconstructed image. Our loss function
computes the mean squared error (MSE) between the recon-
structed and original images in the pixel space. We compute
the loss only on masked patches, similar to BERT [14].1

We also study a variant whose reconstruction target is
the normalized pixel values of each masked patch. Specif-
ically, we compute the mean and standard deviation of all
pixels in a patch and use them to normalize this patch. Us-
ing normalized pixels as the reconstruction target improves
representation quality in our experiments.

Simple implementation. Our MAE pre-training can be im-
plemented efﬁciently, and importantly, does not require any
specialized sparse operations. First we generate a token for
every input patch (by linear projection with an added po-
sitional embedding). Next we randomly shufﬂe the list of
tokens and remove the last portion of the list, based on the
masking ratio. This process produces a small subset of to-
kens for the encoder and is equivalent to sampling patches
without replacement. After encoding, we append a list of
mask tokens to the list of encoded patches, and unshufﬂe
this full list (inverting the random shufﬂe operation) to align
all tokens with their targets. The decoder is applied to this
full list (with positional embeddings added). As noted, no
sparse operations are needed. This simple implementation
introduces negligible overhead as the shufﬂing and unshuf-
ﬂing operations are fast.

1Computing the loss only on masked patches differs from traditional
denoising autoencoders [58] that compute the loss on all pixels. This
choice is purely result-driven: computing the loss on all pixels leads to
a slight decrease in accuracy (e.g., ∼0.5%).

masking ratio (%)

masking ratio (%)

Figure 5. Masking ratio. A high masking ratio (75%) works well
for both ﬁne-tuning (top) and linear probing (bottom). The y-axes
are ImageNet-1K validation accuracy (%) in all plots in this paper.

4. ImageNet Experiments

We do self-supervised pre-training on the ImageNet-1K
(IN1K) [13] training set. Then we do supervised training to
evaluate the representations with (i) end-to-end ﬁne-tuning
or (ii) linear probing. We report top-1 validation accuracy
of a single 224×224 crop. Details are in Appendix A.1.

Baseline: ViT-Large. We use ViT-Large (ViT-L/16) [16]
as the backbone in our ablation study. ViT-L is very big (an
order of magnitude bigger than ResNet-50 [25]) and tends
to overﬁt. The following is a comparison between ViT-L
trained from scratch vs. ﬁne-tuned from our baseline MAE:
scratch, our impl.
82.5

scratch, original [16]
76.5

baseline MAE
84.9

We note that it is nontrivial to train supervised ViT-L from
scratch and a good recipe with strong regularization is
needed (82.5%, see Appendix A.2). Even so, our MAE pre-
training contributes a big improvement. Here ﬁne-tuning is
only for 50 epochs (vs. 200 from scratch), implying that the
ﬁne-tuning accuracy heavily depends on pre-training.

4.1. Main Properties

We ablate our MAE using the default settings in Table 1

(see caption). Several intriguing properties are observed.

Masking ratio. Figure 5 shows the inﬂuence of the mask-
ing ratio. The optimal ratios are surprisingly high. The ra-
tio of 75% is good for both linear probing and ﬁne-tuning.
This behavior is in contrast with BERT [14], whose typical
masking ratio is 15%. Our masking ratios are also much
higher than those in related works [6, 16, 2] in computer
vision (20% to 50%).

The model infers missing patches to produce different,
It makes sense of the
yet plausible, outputs (Figure 4).
gestalt of objects and scenes, which cannot be simply com-
pleted by extending lines or textures. We hypothesize that
this reasoning-like behavior is linked to the learning of use-
ful representations.

Figure 5 also shows that linear probing and ﬁne-tuning
results follow different trends. For linear probing, the ac-

4

10203040506070809083848583.283.483.484.784.985.084.984.984.583.0fine-tuning10203040506070809050607054.658.961.767.069.971.873.273.571.866.1linear probingblocks
1
2
4
8
12

ft
84.8
84.9
84.9
84.9
84.4

lin
65.5
70.0
71.9
73.5
73.3

dim
128
256
512
768
1024

ft
84.9
84.8
84.9
84.4
84.3

lin
69.1
71.3
73.5
73.1
73.1

case
ft
encoder w/ [M]
84.2
encoder w/o [M] 84.9

lin
59.6
73.5

FLOPs
3.3×
1×

(a) Decoder depth. A deep decoder can im-
prove linear probing accuracy.

(b) Decoder width. The decoder can be nar-
rower than the encoder (1024-d).

(c) Mask token. An encoder without mask to-
kens is more accurate and faster (Table 2).

case
pixel (w/o norm)
pixel (w/ norm)
PCA
dVAE token

ft
84.9
85.4
84.6
85.3

lin
73.5
73.9
72.3
71.6

case
none
crop, ﬁxed size
crop, rand size
crop + color jit

ft
84.0
84.7
84.9
84.3

lin
65.7
73.1
73.5
71.9

case
random
block
block
grid

ratio
75
50
75
75

ft
84.9
83.9
82.8
84.0

lin
73.5
72.3
63.9
66.0

(d) Reconstruction target. Pixels as recon-
struction targets are effective.

(e) Data augmentation. Our MAE works with
minimal or no augmentation.

(f) Mask sampling. Random sampling works
the best. See Figure 6 for visualizations.

Table 1. MAE ablation experiments with ViT-L/16 on ImageNet-1K. We report ﬁne-tuning (ft) and linear probing (lin) accuracy (%). If
not speciﬁed, the default is: the decoder has depth 8 and width 512, the reconstruction target is unnormalized pixels, the data augmentation
is random resized cropping, the masking ratio is 75%, and the pre-training length is 800 epochs. Default settings are marked in gray .

curacy increases steadily with the masking ratio until the
the accuracy gap is up to ∼20% (54.6% vs.
sweet point:
73.5%). For ﬁne-tuning, the results are less sensitive to the
ratios, and a wide range of masking ratios (40–80%) work
well. All ﬁne-tuning results in Figure 5 are better than train-
ing from scratch (82.5%).

Decoder design. Our MAE decoder can be ﬂexibly de-
signed, as studied in Table 1a and 1b.

Table 1a varies the decoder depth (number of Trans-
former blocks). A sufﬁciently deep decoder is important
for linear probing. This can be explained by the gap be-
tween a pixel reconstruction task and a recognition task: the
last several layers in an autoencoder are more specialized
for reconstruction, but are less relevant for recognition. A
reasonably deep decoder can account for the reconstruction
specialization, leaving the latent representations at a more
abstract level. This design can yield up to 8% improvement
in linear probing (Table 1a, ‘lin’). However, if ﬁne-tuning
is used, the last layers of the encoder can be tuned to adapt
to the recognition task. The decoder depth is less inﬂuential
for improving ﬁne-tuning (Table 1a, ‘ft’).

Interestingly, our MAE with a single-block decoder can
perform strongly with ﬁne-tuning (84.8%). Note that a sin-
gle Transformer block is the minimal requirement to propa-
gate information from visible tokens to mask tokens. Such
a small decoder can further speed up training.

In Table 1b we study the decoder width (number of chan-
nels). We use 512-d by default, which performs well un-
der ﬁne-tuning and linear probing. A narrower decoder also
works well with ﬁne-tuning.

Overall, our default MAE decoder is lightweight. It has
8 blocks and a width of 512-d ( gray in Table 1). It only
has 9% FLOPs per token vs. ViT-L (24 blocks, 1024-d).
As such, while the decoder processes all tokens, it is still a
small fraction of the overall compute.

encoder
ViT-L, w/ [M]
ViT-L
ViT-L
ViT-H, w/ [M]
ViT-H
ViT-H

dec. depth
8
8
1
8
8
1

ft acc
84.2
84.9
84.8
-
85.8
85.9

hours
42.4
15.4
11.6
119.6†
34.5
29.3

speedup
-
2.8×
3.7×
-
3.5×
4.1×

Table 2. Wall-clock time of our MAE training (800 epochs),
benchmarked in 128 TPU-v3 cores with TensorFlow. The speedup
is relative to the entry whose encoder has mask tokens (gray). The
decoder width is 512, and the mask ratio is 75%. †: This entry is
estimated by training ten epochs.

Mask token. An important design of our MAE is to skip
the mask token [M] in the encoder and apply it later in the
lightweight decoder. Table 1c studies this design.

If the encoder uses mask tokens, it performs worse: its
accuracy drops by 14% in linear probing.
In this case,
there is a gap between pre-training and deploying: this en-
coder has a large portion of mask tokens in its input in pre-
training, which does not exist in uncorrupted images. This
gap may degrade accuracy in deployment. By removing the
mask token from the encoder, we constrain the encoder to
always see real patches and thus improve accuracy.

Moreover, by skipping the mask token in the encoder,
we greatly reduce training computation.
In Table 1c, we
reduce the overall training FLOPs by 3.3×. This leads to
a 2.8× wall-clock speedup in our implementation (see Ta-
ble 2). The wall-clock speedup is even bigger (3.5–4.1×),
for a smaller decoder (1-block), a larger encoder (ViT-H),
or both. Note that the speedup can be >4× for a masking
ratio of 75%, partially because the self-attention complexity
is quadratic. In addition, memory is greatly reduced, which
can enable training even larger models or speeding up more
by large-batch training. The time and memory efﬁciency
makes our MAE favorable for training very large models.

5

Figure 6. Mask sampling strategies determine the pretext task
difﬁculty, inﬂuencing reconstruction quality and representations
(Table 1f). Here each output is from an MAE trained with the spec-
iﬁed masking strategy. Left: random sampling (our default). Mid-
dle: block-wise sampling [2] that removes large random blocks.
Right: grid-wise sampling that keeps one of every four patches.
Images are from the validation set.

Reconstruction target. We compare different reconstruc-
tion targets in Table 1d. Our results thus far are based on
pixels without (per-patch) normalization. Using pixels with
normalization improves accuracy. This per-patch normal-
ization enhances the contrast locally. In another variant, we
perform PCA in the patch space and use the largest PCA
coefﬁcients (96 here) as the target. Doing so degrades ac-
curacy. Both experiments suggest that the high-frequency
components are useful in our method.

We also compare an MAE variant that predicts tokens,
the target used in BEiT [2]. Speciﬁcally for this variant,
we use the DALLE pre-trained dVAE [50] as the tokenizer,
following [2]. Here the MAE decoder predicts the token in-
dices using cross-entropy loss. This tokenization improves
ﬁne-tuning accuracy by 0.4% vs. unnormalized pixels, but
has no advantage vs. normalized pixels. It also reduces lin-
ear probing accuracy. In §5 we further show that tokeniza-
tion is not necessary in transfer learning.

Our pixel-based MAE is much simpler than tokeniza-
tion. The dVAE tokenizer requires one more pre-training
stage, which may depend on extra data (250M images [50]).
The dVAE encoder is a large convolutional network (40%
FLOPs of ViT-L) and adds nontrivial overhead. Using pix-
els does not suffer from these problems.

Data augmentation. Table 1e studies the inﬂuence of data
augmentation on our MAE pre-training.

Our MAE works well using cropping-only augmenta-
tion, either ﬁxed-size or random-size (both having random
horizontal ﬂipping). Adding color jittering degrades the re-
sults and so we do not use it in other experiments.

Surprisingly, our MAE behaves decently even if using
no data augmentation (only center-crop, no ﬂipping). This
property is dramatically different from contrastive learning
and related methods [62, 23, 7, 21], which heavily rely
on data augmentation.
It was observed [21] that using
cropping-only augmentation reduces the accuracy by 13%

epochs (log-scale)

epochs (log-scale)

Figure 7. Training schedules. A longer training schedule gives a
noticeable improvement. Here each point is a full training sched-
ule. The model is ViT-L with the default setting in Table 1.

and 28% respectively for BYOL [21] and SimCLR [7]. In
addition, there is no evidence that contrastive learning can
work without augmentation: the two views of an image are
the same and can easily satisfy a trivial solution.

In MAE, the role of data augmentation is mainly per-
formed by random masking (ablated next). The masks are
different for each iteration and so they generate new training
samples regardless of data augmentation. The pretext task
is made difﬁcult by masking and requires less augmentation
to regularize training.

Mask sampling strategy. In Table 1f we compare different
mask sampling strategies, illustrated in Figure 6.

The block-wise masking strategy, proposed in [2], tends
to remove large blocks (Figure 6 middle). Our MAE with
block-wise masking works reasonably well at a ratio of
50%, but degrades at a ratio of 75%. This task is harder
than that of random sampling, as a higher training loss is
observed. The reconstruction is also blurrier.

We also study grid-wise sampling, which regularly keeps
one of every four patches (Figure 6 right). This is an eas-
ier task and has lower training loss. The reconstruction is
sharper. However, the representation quality is lower.

Simple random sampling works the best for our MAE. It
allows for a higher masking ratio, which provides a greater
speedup beneﬁt while also enjoying good accuracy.

Training schedule. Our ablations thus far are based on
800-epoch pre-training. Figure 7 shows the inﬂuence of the
training schedule length. The accuracy improves steadily
Indeed, we have not observed sat-
with longer training.
uration of linear probing accuracy even at 1600 epochs.
This behavior is unlike contrastive learning methods, e.g.,
MoCo v3 [9] saturates at 300 epochs for ViT-L. Note that
the MAE encoder only sees 25% of patches per epoch,
while in contrastive learning the encoder sees 200% (two-
crop) or even more (multi-crop) patches per epoch.

6

block 50%grid 75%random 75%10020040080016008283848582.383.384.384.985.1fine-tuning10020040080016006065707557.364.469.773.575.1linear probingmethod
scratch, our impl.
DINO [5]
MoCo v3 [9]
BEiT [2]
MAE

pre-train data ViT-B ViT-L ViT-H ViT-H448
-
IN1K
IN1K
IN1K+DALLE

82.3
82.8
83.2
83.2
83.6

82.6
-
84.1
85.2
85.9

83.1
-
-
-
86.9

-
-
-
-
87.8

IN1K

Table 3. Comparisons with previous results on ImageNet-
1K. The pre-training data is the ImageNet-1K training set (ex-
cept the tokenizer in BEiT was pre-trained on 250M DALLE data
[50]). All self-supervised methods are evaluated by end-to-end
ﬁne-tuning. The ViT models are B/16, L/16, H/14 [16]. The best
for each column is underlined. All results are on an image size of
224, except for ViT-H with an extra result on 448. Here our MAE
reconstructs normalized pixels and is pre-trained for 1600 epochs.

[16]

[16]

params (M)
Figure 8. MAE pre-training vs. supervised pre-training, evalu-
ated by ﬁne-tuning in ImageNet-1K (224 size). We compare with
the original ViT results [16] trained in IN1K or JFT300M.

4.2. Comparisons with Previous Results

Comparisons with self-supervised methods. In Table 3
we compare the ﬁne-tuning results of self-supervised ViT
models. For ViT-B, all methods perform closely. For ViT-L,
the gaps among methods are bigger, suggesting that a chal-
lenge for bigger models is to reduce overﬁtting.

Our MAE can scale up easily and has shown steady im-
provement from bigger models. We obtain 86.9% accuracy
using ViT-H (224 size). By ﬁne-tuning with a 448 size, we
achieve 87.8% accuracy, using only IN1K data. The pre-
vious best accuracy, among all methods using only IN1K
data, is 87.1% (512 size) [67], based on advanced networks.
We improve over the state-of-the-art by a nontrivial margin
in the highly competitive benchmark of IN1K (no external
data). Our result is based on vanilla ViT, and we expect
advanced networks will perform better.

Comparing with BEiT [2], our MAE is more accurate
while being simpler and faster. Our method reconstructs
pixels, in contrast to BEiT that predicts tokens: BEiT re-
ported a 1.8% degradation [2] when reconstructing pixels
with ViT-B.2 We do not need dVAE pre-training. More-
over, our MAE is considerably faster (3.5× per epoch) than
BEiT, for the reason as studied in Table 1c.

2We observed the degradation also in BEiT with ViT-L: it produces

85.2% (tokens) and 83.5% (pixels), reproduced from the ofﬁcial code.

7

# blocks ﬁne-tuned

Figure 9. Partial ﬁne-tuning results of ViT-L w.r.t. the number
of ﬁne-tuned Transformer blocks under the default settings from
Table 1. Tuning 0 blocks is linear probing; 24 is full ﬁne-tuning.
Our MAE representations are less linearly separable, but are con-
sistently better than MoCo v3 if one or more blocks are tuned.

The MAE models in Table 3 are pre-trained for 1600
epochs for better accuracy (Figure 7). Even so, our total
pre-training time is less than the other methods when trained
on the same hardware. For example, training ViT-L on 128
TPU-v3 cores, our MAE’s training time is 31 hours for 1600
epochs and MoCo v3’s is 36 hours for 300 epochs [9].

Comparisons with supervised pre-training. In the origi-
nal ViT paper [16], ViT-L degrades when trained in IN1K.
Our implementation of supervised training (see A.2) works
better, but accuracy saturates. See Figure 8.

Our MAE pre-training, using only IN1K, can general-
ize better: the gain over training from scratch is bigger for
higher-capacity models.
It follows a trend similar to the
JFT-300M supervised pre-training in [16]. This compari-
son shows that our MAE can help scale up model sizes.

4.3. Partial Fine-tuning

Table 1 shows that linear probing and ﬁne-tuning results
are largely uncorrelated. Linear probing has been a popular
protocol in the past few years; however, it misses the oppor-
tunity of pursuing strong but non-linear features—which is
indeed a strength of deep learning. As a middle ground, we
study a partial ﬁne-tuning protocol: ﬁne-tune the last sev-
eral layers while freezing the others. This protocol was also
used in early works, e.g., [65, 70, 42].

Figure 9 shows the results. Notably, ﬁne-tuning only one
Transformer block boosts the accuracy signiﬁcantly from
73.5% to 81.0%. Moreover, if we ﬁne-tune only “half” of
the last block (i.e., its MLP sub-block), we can get 79.1%,
much better than linear probing. This variant is essentially
ﬁne-tuning an MLP head. Fine-tuning a few blocks (e.g., 4
or 6) can achieve accuracy close to full ﬁne-tuning.

In Figure 9 we also compare with MoCo v3 [9], a con-
trastive method with ViT-L results available. MoCo v3 has
higher linear probing accuracy; however, all of its partial
ﬁne-tuning results are worse than MAE. The gap is 2.6%
when tuning 4 blocks. While the MAE representations are
less linearly separable, they are stronger non-linear features
and perform well when a non-linear head is tuned.

020040060076788082848688ViT-B/16ViT-L/16ViT-H/14MAE, IN1Ksupervised, IN1K, our impl.supervised, IN1Ksupervised, JFT300M01 2 4 6 1218247075808573.581.083.184.284.484.684.784.977.679.980.881.681.983.283.884.1MAE baselineMoCo v3method
supervised
MoCo v3
BEiT
MAE

APmask

APbox
pre-train data ViT-B ViT-L ViT-B ViT-L
43.9
IN1K w/ labels
44.0
IN1K
47.1
IN1K+DALLE
47.2
IN1K

42.9
42.7
44.4
44.9

49.3
49.3
53.3
53.3

47.9
47.9
49.8
50.3

method
supervised
MoCo v3
BEiT
MAE

pre-train data
IN1K w/ labels
IN1K
IN1K+DALLE
IN1K

ViT-B
47.4
47.3
47.1
48.1

ViT-L
49.9
49.1
53.3
53.6

Table 4. COCO object detection and segmentation using a ViT
Mask R-CNN baseline. All entries are based on our implementa-
tion. Self-supervised entries use IN1K data without labels. Mask
AP follows a similar trend as box AP.

Table 5. ADE20K semantic segmentation (mIoU) using Uper-
Net. BEiT results are reproduced using the ofﬁcial code. Other
entries are based on our implementation. Self-supervised entries
use IN1K data without labels.

These observations suggest that linear separability is not
the sole metric for evaluating representation quality. It has
also been observed (e.g., [8]) that linear probing is not well
correlated with transfer learning performance, e.g., for ob-
ject detection. To our knowledge, linear evaluation is not
often used in NLP for benchmarking pre-training.

5. Transfer Learning Experiments

We evaluate transfer learning in downstream tasks using

the pre-trained models in Table 3.

Object detection and segmentation. We ﬁne-tune Mask
R-CNN [24] end-to-end on COCO [37]. The ViT backbone
is adapted for use with FPN [36] (see A.3). We apply this
approach for all entries in Table 4. We report box AP for
object detection and mask AP for instance segmentation.

Compared to supervised pre-training, our MAE performs
better under all conﬁgurations (Table 4). With the smaller
ViT-B, our MAE is 2.4 points higher than supervised pre-
training (50.3 vs. 47.9, APbox). More signiﬁcantly, with the
larger ViT-L, our MAE pre-training outperforms supervised
pre-training by 4.0 points (53.3 vs. 49.3).

The pixel-based MAE is better than or on par with the
token-based BEiT, while MAE is much simpler and faster.
Both MAE and BEiT are better than MoCo v3 and MoCo
v3 is on par with supervised pre-training.

Semantic segmentation. We experiment on ADE20K [72]
using UperNet [63] (see A.4). Table 5 shows that our pre-
training signiﬁcantly improves results over supervised pre-
training, e.g., by 3.7 points for ViT-L. Our pixel-based MAE
also outperforms the token-based BEiT. These observations
are consistent with those in COCO.

Classiﬁcation tasks. Table 6 studies transfer learning on
the iNaturalists [56] and Places [71] tasks (see A.5). On
iNat, our method shows strong scaling behavior: accuracy
improves considerably with bigger models. Our results sur-
pass the previous best results by large margins. On Places,
our MAE outperforms the previous best results [19, 40],
which were obtained via pre-training on billions of images.

Pixels vs. tokens. Table 7 compares pixels vs. tokens as the
MAE reconstruction target. While using dVAE tokens is
better than using unnormalized pixels, it is statistically sim-
ilar to using normalized pixels across all cases we tested. It
again shows that tokenization is not necessary for our MAE.

dataset
iNat 2017
iNat 2018
iNat 2019
Places205
Places365

ViT-B
70.5
75.4
80.5
63.9
57.9

ViT-L
75.7
80.1
83.4
65.8
59.4

ViT-H
79.3
83.0
85.7
65.9
59.8

ViT-H448
83.4
86.8
88.3
66.8
60.3

prev best
75.4 [55]
81.2 [54]
84.1 [54]
66.0 [19]†
58.0 [40]‡

Table 6. Transfer learning accuracy on classiﬁcation datasets,
using MAE pre-trained on IN1K and then ﬁne-tuned. We provide
system-level comparisons with the previous best results.
†: pre-trained on 1 billion images. ‡: pre-trained on 3.5 billion images.

IN1K

COCO

ADE20K

pixel (w/o norm)
pixel (w/ norm)
dVAE token
(cid:52)

ViT-B ViT-L ViT-H ViT-B ViT-L ViT-B ViT-L
51.8
49.5
83.3
53.6
50.3
83.6
53.4
50.3
83.6
-0.2
0.0
0.0

85.1
85.9
85.7
-0.2

86.2
86.9
86.9
0.0

48.0
48.1
48.1
0.0

52.8
53.3
53.2
-0.1

Table 7. Pixels vs. tokens as the MAE reconstruction target. (cid:52) is
the difference between using dVAE tokens and using normalized
pixels. The difference is statistically insigniﬁcant.

6. Discussion and Conclusion

Simple algorithms that scale well are the core of deep
learning. In NLP, simple self-supervised learning methods
(e.g., [47, 14, 48, 4]) enable beneﬁts from exponentially
scaling models. In computer vision, practical pre-training
paradigms are dominantly supervised (e.g. [33, 51, 25, 16])
despite progress in self-supervised learning. In this study,
we observe on ImageNet and in transfer learning that
an autoencoder—a simple self-supervised method similar
to techniques in NLP—provides scalable beneﬁts. Self-
supervised learning in vision may now be embarking on a
similar trajectory as in NLP.

On the other hand, we note that images and languages
are signals of a different nature and this difference must
be addressed carefully. Images are merely recorded light
without a semantic decomposition into the visual analogue
of words. Instead of attempting to remove objects, we re-
move random patches that most likely do not form a seman-
tic segment. Likewise, our MAE reconstructs pixels, which
are not semantic entities. Nevertheless, we observe (e.g.,
Figure 4) that our MAE infers complex, holistic reconstruc-
tions, suggesting it has learned numerous visual concepts,
i.e., semantics. We hypothesize that this behavior occurs
by way of a rich hidden representation inside the MAE. We
hope this perspective will inspire future work.

8

Broader impacts. The proposed method predicts content
based on learned statistics of the training dataset and as such
will reﬂect biases in those data, including ones with nega-
tive societal impacts. The model may generate inexistent
content. These issues warrant further research and consid-
eration when building upon this work to generate images.

References

[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer

normalization. arXiv:1607.06450, 2016.

[2] Hangbo Bao, Li Dong, and Furu Wei. BEiT: BERT pre-training
of image transformers. arXiv:2106.08254, 2021. Accessed in June
2021.

[3] Suzanna Becker and Geoffrey E Hinton. Self-organizing neural
network that discovers surfaces in random-dot stereograms. Na-
ture, 1992.

[4] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah,
Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav
Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel
Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child,
Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris
Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Ben-
jamin Chess, Jack Clark, Christopher Berner, Sam McCandlish,
Alec Radford, Ilya Sutskever, and Dario Amodei. Language mod-
els are few-shot learners. In NeurIPS, 2020.

[5] Mathilde Caron, Hugo Touvron, Ishan Misra, Herv´e J´egou, Julien
Mairal, Piotr Bojanowski, and Armand Joulin. Emerging properties
in self-supervised vision transformers. In ICCV, 2021.

[6] Mark Chen, Alec Radford, Rewon Child, Jeffrey Wu, Heewoo Jun,
David Luan, and Ilya Sutskever. Generative pretraining from pix-
els. In ICML, 2020.

[7] Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey
Hinton. A simple framework for contrastive learning of visual rep-
resentations. In ICML, 2020.

[8] Xinlei Chen and Kaiming He. Exploring simple Siamese represen-

tation learning. In CVPR, 2021.

Uszkoreit, and Neil Houlsby. An image is worth 16x16 words:
Transformers for image recognition at scale. In ICLR, 2021.

[17] Spyros Gidaris, Praveer Singh, and Nikos Komodakis. Unsuper-
vised representation learning by predicting image rotations.
In
ICLR, 2018.

[18] Xavier Glorot and Yoshua Bengio. Understanding the difﬁculty of
training deep feedforward neural networks. In AISTATS, 2010.

[19] Priya Goyal, Mathilde Caron, Benjamin Lefaudeux, Min Xu,
Pengchao Wang, Vivek Pai, Mannat Singh, Vitaliy Liptchinsky, Is-
han Misra, Armand Joulin, and Piotr Bojanowski. Self-supervised
pretraining of visual features in the wild. arXiv:2103.01988, 2021.

[20] Priya Goyal, Piotr Doll´ar, Ross Girshick, Pieter Noordhuis, Lukasz
Wesolowski, Aapo Kyrola, Andrew Tulloch, Yangqing Jia, and
Kaiming He. Accurate, large minibatch SGD: Training ImageNet
in 1 hour. arXiv:1706.02677, 2017.

[21] Jean-Bastien Grill, Florian Strub, Florent Altch´e, Corentin Tallec,
Pierre Richemond, Elena Buchatskaya, Carl Doersch, Bernardo
Avila Pires, Zhaohan Guo, Mohammad Gheshlaghi Azar, Bilal
Piot, Koray Kavukcuoglu, Remi Munos, and Michal Valko. Boot-
strap your own latent - a new approach to self-supervised learning.
In NeurIPS, 2020.

[22] Raia Hadsell, Sumit Chopra, and Yann LeCun. Dimensionality
reduction by learning an invariant mapping. In CVPR, 2006.

[23] Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Gir-
shick. Momentum contrast for unsupervised visual representation
learning. In CVPR, 2020.

[24] Kaiming He, Georgia Gkioxari, Piotr Doll´ar, and Ross Girshick.

Mask R-CNN. In ICCV, 2017.

[25] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep

residual learning for image recognition. In CVPR, 2016.

[26] Dan Hendrycks, Steven Basart, Norman Mu, Saurav Kadavath,
Frank Wang, Evan Dorundo, Rahul Desai, Tyler Zhu, Samyak
Parajuli, Mike Guo, et al. The many faces of robustness: A critical
analysis of out-of-distribution generalization. In ICCV, 2021.

[27] Dan Hendrycks and Thomas Dietterich. Benchmarking neural net-
work robustness to common corruptions and perturbations.
In
ICLR, 2019.

[9] Xinlei Chen, Saining Xie, and Kaiming He. An empirical study of
training self-supervised Vision Transformers. In ICCV, 2021.

[28] Dan Hendrycks, Kevin Zhao, Steven Basart, Jacob Steinhardt, and
Dawn Song. Natural adversarial examples. In CVPR, 2021.

[10] Kevin Clark, Minh-Thang Luong, Quoc V Le, and Christopher D
Manning. ELECTRA: Pre-training text encoders as discriminators
rather than generators. In ICLR, 2020.

[11] Corinna Cortes and Vladimir Vapnik. Support-vector networks.

Machine learning, 1995.

[12] Ekin D Cubuk, Barret Zoph, Jonathon Shlens, and Quoc V Le. Ran-
daugment: Practical automated data augmentation with a reduced
search space. In CVPR Workshops, 2020.

[13] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li
Fei-Fei. ImageNet: A large-scale hierarchical image database. In
CVPR, 2009.

[14] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina
Toutanova. BERT: Pre-training of deep bidirectional transformers
for language understanding. In NAACL, 2019.

[15] Carl Doersch, Abhinav Gupta, and Alexei A Efros. Unsupervised
In ICCV,

visual representation learning by context prediction.
2015.

[29] Geoffrey E Hinton and Richard S Zemel. Autoencoders, minimum

description length, and helmholtz free energy. In NeurIPS, 1994.

[30] Gao Huang, Yu Sun, Zhuang Liu, Daniel Sedra, and Kilian Q Wein-
berger. Deep networks with stochastic depth. In ECCV, 2016.

[31] Sergey Ioffe and Christian Szegedy. Batch normalization: Accel-
erating deep network training by reducing internal covariate shift.
In ICML, 2015.

[32] Insoo Kim, Seungju Han, Ji-won Baek, Seong-Jin Park, Jae-Joon
Han, and Jinwoo Shin. Quality-agnostic image recognition via in-
vertible decoder. In CVPR, 2021.

[33] Alex Krizhevsky, Ilya Sutskever, and Geoff Hinton. Imagenet clas-
In NeurIPS,

siﬁcation with deep convolutional neural networks.
2012.

[34] Yann LeCun, Bernhard Boser, John S Denker, Donnie Hender-
son, Richard E Howard, Wayne Hubbard, and Lawrence D Jackel.
Backpropagation applied to handwritten zip code recognition. Neu-
ral computation, 1989.

[16] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk
Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa De-
hghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob

[35] Yanghao Li, Saining Xie, Xinlei Chen, Piotr Doll´ar, Kaiming He,
and Ross Girshick. Benchmarking detection transfer learning with
vision transformers. In preparation, 2021.

9

[36] Tsung-Yi Lin, Piotr Doll´ar, Ross Girshick, Kaiming He, Bharath
Hariharan, and Serge Belongie. Feature pyramid networks for ob-
ject detection. In CVPR, 2017.

[37] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro
Perona, Deva Ramanan, Piotr Doll´ar, and C Lawrence Zitnick. Mi-
crosoft COCO: Common objects in context. In ECCV, 2014.

[38] Ilya Loshchilov and Frank Hutter. SGDR: Stochastic gradient de-

scent with warm restarts. In ICLR, 2017.

[39] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regu-

larization. In ICLR, 2019.

[40] Dhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming
He, Manohar Paluri, Yixuan Li, Ashwin Bharambe, and Laurens
van der Maaten. Exploring the limits of weakly supervised pre-
training. In ECCV, 2018.

[41] Xiaofeng Mao, Gege Qi, Yuefeng Chen, Xiaodan Li, Ranjie Duan,
Shaokai Ye, Yuan He, and Hui Xue. Towards robust vision trans-
former. arXiv:2105.07926, 2021.

[42] Mehdi Noroozi and Paolo Favaro. Unsupervised learning of visual
representations by solving jigsaw puzzles. In ECCV, 2016.

[43] Aaron van den Oord, Yazhe Li, and Oriol Vinyals. Representa-
tion learning with contrastive predictive coding. arXiv:1807.03748,
2018.

[44] Aaron van den Oord, Oriol Vinyals, and Koray Kavukcuoglu. Neu-

ral discrete representation learning. In NeurIPS, 2017.

[56] Grant Van Horn, Oisin Mac Aodha, Yang Song, Yin Cui, Chen
Sun, Alex Shepard, Hartwig Adam, Pietro Perona, and Serge Be-
longie. The iNaturalist species classiﬁcation and detection dataset.
In CVPR, 2018.

[57] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit,
Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin.
Attention is all you need. In NeurIPS, 2017.

[58] Pascal Vincent, Hugo Larochelle, Yoshua Bengio, and Pierre-
Antoine Manzagol. Extracting and composing robust features with
denoising autoencoders. In ICML, 2008.

[59] Pascal Vincent, Hugo Larochelle, Isabelle Lajoie, Yoshua Bengio,
Pierre-Antoine Manzagol, and L´eon Bottou. Stacked denoising au-
toencoders: Learning useful representations in a deep network with
a local denoising criterion. JMLR, 2010.

[60] Haohan Wang, Songwei Ge, Zachary Lipton, and Eric P Xing.
Learning robust global representations by penalizing local predic-
tive power. In NeurIPS, 2019.

[61] Xiaolong Wang and Abhinav Gupta. Unsupervised learning of vi-

sual representations using videos. In ICCV, 2015.

[62] Zhirong Wu, Yuanjun Xiong, Stella Yu, and Dahua Lin. Unsuper-
vised feature learning via non-parametric instance discrimination.
In CVPR, 2018.

[63] Tete Xiao, Yingcheng Liu, Bolei Zhou, Yuning Jiang, and Jian
Sun. Uniﬁed perceptual parsing for scene understanding. In ECCV,
2018.

[45] Deepak Pathak, Ross Girshick, Piotr Doll´ar, Trevor Darrell, and
Bharath Hariharan. Learning features by watching objects move.
In CVPR, 2017.

[64] Tete Xiao, Mannat Singh, Eric Mintun, Trevor Darrell, Piotr Doll´ar,
and Ross Girshick. Early convolutions help transformers see better.
In NeurIPS, 2021.

[46] Deepak Pathak, Philipp Krahenbuhl, Jeff Donahue, Trevor Darrell,
and Alexei A Efros. Context encoders: Feature learning by inpaint-
ing. In CVPR, 2016.

[65] Jason Yosinski, Jeff Clune, Yoshua Bengio, and Hod Lipson. How
In NeurIPS,

transferable are features in deep neural networks?
2014.

[66] Yang You, Igor Gitman, and Boris Ginsburg. Large batch training

of convolutional networks. arXiv:1708.03888, 2017.

[67] Li Yuan, Qibin Hou, Zihang Jiang, Jiashi Feng, and Shuicheng Yan.
VOLO: Vision outlooker for visual recognition. arXiv:2106.13112,
2021.

[68] Sangdoo Yun, Dongyoon Han, Seong Joon Oh, Sanghyuk Chun,
Junsuk Choe, and Youngjoon Yoo. Cutmix: Regularization strategy
to train strong classiﬁers with localizable features. In ICCV, 2019.

[69] Hongyi Zhang, Moustapha Cisse, Yann N Dauphin, and David
Lopez-Paz. mixup: Beyond empirical risk minimization. In ICLR,
2018.

[70] Richard Zhang, Phillip Isola, and Alexei A Efros. Colorful image

colorization. In ECCV, 2016.

[71] Bolei Zhou, Agata Lapedriza, Jianxiong Xiao, Antonio Torralba,
and Aude Oliva. Learning deep features for scene recognition using
Places database. In NeurIPS, 2014.

[72] Bolei Zhou, Hang Zhao, Xavier Puig, Tete Xiao, Sanja Fidler,
Adela Barriuso, and Antonio Torralba. Semantic understanding
of scenes through the ADE20K dataset. IJCV, 2019.

[47] Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya
Sutskever. Improving language understanding by generative pre-
training. 2018.

[48] Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario
Amodei, and Ilya Sutskever. Language models are unsupervised
multitask learners. 2019.

[49] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan
Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu.
Exploring the limits of transfer learning with a uniﬁed text-to-text
transformer. JMLR, 2020.

[50] Aditya Ramesh, Mikhail Pavlov, Gabriel Goh, Scott Gray, Chelsea
Voss, Alec Radford, Mark Chen, and Ilya Sutskever. Zero-shot
text-to-image generation. In ICML, 2021.

[51] Karen Simonyan and Andrew Zisserman. Very deep convolutional
networks for large-scale image recognition. In ICLR, 2015.

[52] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon
Shlens, and Zbigniew Wojna. Rethinking the inception architec-
ture for computer vision. In CVPR, 2016.

[53] Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa,
Alexandre Sablayrolles, and Herv´e J´egou. Training data-efﬁcient
In ICML,
image transformers & distillation through attention.
2021.

[54] Hugo Touvron, Alexandre Sablayrolles, Matthijs Douze, Matthieu
Cord, and Herv´e J´egou. Graﬁt: Learning ﬁne-grained image repre-
sentations with coarse labels. In ICCV, 2021.

[55] Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herv´e J´egou.
Fixing the train-test resolution discrepancy. arXiv:1906.06423,
2019.

10

A. Implementation Details

A.1. ImageNet Experiments

ViT architecture. We follow the standard ViT architecture
[16]. It has a stack of Transformer blocks [57], and each
block consists of a multi-head self-attention block and an
MLP block, both having LayerNorm (LN) [1]. The encoder
ends with LN. As the MAE encoder and decoder have dif-
ferent width, we adopt a linear projection layer after the
encoder to match it. Our MAE adds positional embeddings
[57] (the sine-cosine version) to both the encoder and de-
coder inputs. Our MAE does not use relative position or
layer scaling (which are used in the code of [2]).

We extract features from the encoder output for ﬁne-
tuning and linear probing. As ViT has a class token [16],
to adapt to this design, in our MAE pre-training we append
an auxiliary dummy token to the encoder input. This token
will be treated as the class token for training the classiﬁer in
linear probing and ﬁne-tuning. Our MAE works similarly
well without this token (with average pooling).

Pre-training. The default setting is in Table 8. We do
not use color jittering, drop path, or gradient clip. We use
xavier uniform [18] to initialize all Transformer blocks, fol-
lowing ViT’s ofﬁcial code [16]. We use the linear lr scaling
rule [20]: lr = base lr×batchsize / 256.

End-to-end ﬁne-tuning. Our ﬁne-tuning follows common
practice of supervised ViT training. The default setting is in
Table 9. We use layer-wise lr decay [10] following [2].

Linear probing. Our linear classiﬁer training follows [9].
See Table 10. We observe that linear probing requires a very
different recipe than end-to-end ﬁne-tuning. In particular,
regularization is in general harmful for linear probing. Fol-
lowing [9], we disable many common regularization strate-
gies: we do not use mixup [69], cutmix [68], drop path [30],
or color jittering, and we set weight decay as zero.

It is a common practice to normalize the classiﬁer input
when training a classical linear classiﬁer (e.g., SVM [11]).
Similarly, it is beneﬁcial to normalize the pre-trained fea-
tures when training the linear probing classiﬁer. Follow-
ing [15], we adopt an extra BatchNorm layer [31] without
afﬁne transformation (affine=False). This layer is ap-
plied on the pre-trained features produced by the encoder,
and is before the linear classiﬁer. We note that the layer
does not break the linear property, and it can be absorbed
into the linear classiﬁer after training: it is essentially a re-
parameterized linear classiﬁer.3 Introducing this layer helps
calibrate the feature magnitudes across different variants in
our ablations, so that they can use the same setting without
further lr search.

3Alternatively, we can pre-compute the mean and std of the features

and use the normalized features to train linear classiﬁers.

conﬁg
optimizer
base learning rate
weight decay
optimizer momentum
batch size
learning rate schedule
warmup epochs [20]
augmentation

value
AdamW [39]
1.5e-4
0.05
β1, β2=0.9, 0.95 [6]
4096
cosine decay [38]
40
RandomResizedCrop

Table 8. Pre-training setting.

conﬁg
optimizer
base learning rate
weight decay
optimizer momentum
layer-wise lr decay [10, 2]
batch size
learning rate schedule
warmup epochs
training epochs
augmentation
label smoothing [52]
mixup [69]
cutmix [68]
drop path [30]

value
AdamW
1e-3
0.05
β1, β2=0.9, 0.999
0.75
1024
cosine decay
5
100 (B), 50 (L/H)
RandAug (9, 0.5) [12]
0.1
0.8
1.0
0.1 (B/L) 0.2 (H)

Table 9. End-to-end ﬁne-tuning setting.

conﬁg
optimizer
base learning rate
weight decay
optimizer momentum
batch size
learning rate schedule
warmup epochs
training epochs
augmentation

value
LARS [66]
0.1
0
0.9
16384
cosine decay
10
90
RandomResizedCrop

Table 10. Linear probing setting. We use LARS with a large
batch for faster training; SGD works similarly with a 4096 batch.

Partial ﬁne-tuning. Our MAE partial ﬁne-tuning (§4.3)
follows the setting in Table 9, except that we adjust the num-
ber of ﬁne-tuning epochs. We observe that tuning fewer
blocks requires a longer schedule. We set the numbers of
ﬁne-tuning epochs as {50, 100, 200} and use the optimal
one for each number of blocks tuned.

A.2. Supervised Training ViT-L/H from Scratch

We ﬁnd that it is nontrivial to train supervised ViT-L/H
from scratch on ImageNet-1K. The training is unstable.
While there have been strong baselines with publicly avail-
able implementations [53] for smaller models, the recipes
for the larger ViT-L/H are unexplored. Directly applying
the previous recipes to these larger models does not work.
A NaN loss is frequently observed during training.

We provide our recipe in Table 11. We use a wd of 0.3,
a large batch size of 4096, and a long warmup, following
the original ViT [16]. We use β2=0.95 following [6]. We
use the regularizations listed in Table 11 and disable others,
following [64]. All these choices are for improving training
stability. Our recipe can ﬁnish training with no NaN loss.

11

conﬁg
optimizer
base learning rate
weight decay
optimizer momentum
batch size
learning rate schedule
warmup epochs
training epochs
augmentation
label smoothing [52]
mixup [69]
cutmix [68]
drop path [30]
exp. moving average (EMA)

value
AdamW
1e-4
0.3
β1, β2=0.9, 0.95
4096
cosine decay
20
300 (B), 200 (L/H)
RandAug (9, 0.5) [12]
0.1
0.8
1.0
0.1 (B), 0.2 (L/H)
0.9999

Table 11. Supervised training ViT from scratch.

The accuracy is 82.6% for ViT-L (81.5% w/o EMA), and
83.1% for ViT-H (80.9% w/o EMA). Both ViT-L and ViT-H
show an overﬁtting trend if not using EMA.

As a by-product, our recipe for ViT-B has 82.3% accu-

racy (82.1% w/o EMA), vs. 81.8% in [53].

A.3. Object Detection and Segmentation in COCO

We adapt the vanilla ViT for the use of an FPN backbone
[36] in Mask R-CNN [24]. ViT has a stack of Transformer
blocks that all produce feature maps at a single scale (e.g.,
stride 16). We equally divide this stack into 4 subsets and
apply convolutions to upsample or downsample the inter-
mediate feature maps for producing different scales (stride
4, 8, 16, or 32, the same as a standard ResNet [25]). FPN is
built on these multi-scale maps.

For fair comparisons among different methods, we
search for hyper-parameters for each entry in Table 4 (in-
cluding all competitors). The hyper-parameters we search
for are the learning rate, weight decay, drop path rate, and
ﬁne-tuning epochs. We will release code along with the
speciﬁc conﬁgurations. For full model and training details,
plus additional experiments, see [35].

A.4. Semantic Segmentation in ADE20K

We use UperNet [63] following the semantic segmenta-
tion code of [2]. We ﬁne-tune end-to-end for 100 epochs
with a batch size of 16. We search for the optimal lr for
each entry in Table 5 (including all competitors).

The semantic segmentation code of [2] uses relative po-
sition bias [49]. Our MAE pre-training does not use it. For
fair comparison, we turn on relative position bias only dur-
ing transfer learning, initialized as zero. We note that our
BEiT reproduction uses relative position bias in both pre-
training and ﬁne-tuning, following their code.

A.5. Additional Classiﬁcation Tasks

We follow the setting in Table 9 for iNaturalist and
Places ﬁne-tuning (Table 6). We adjust the lr and ﬁne-
tuning epochs for each individual dataset.

method
iGPT [6]
iGPT [6]
BEiT [2]
MAE
MAE
MAE

model
iGPT-L
iGPT-XL
ViT-L
ViT-B
ViT-L
ViT-H

params
1362 M
6801 M
304 M
86 M
304 M
632 M

acc
69.0
72.0
52.1†
68.0
75.8
76.6

Table 12. Linear probing results of masked encoding methods.
Our ﬁne-tuning results are in Table 3. †: our implementation.

36.8
76.7
66.5
50.9

41.8
57.1
59.9
45.3

33.8
68.2
64.4
49.6

ViT-B ViT-L ViT-H ViT-H448 prev best
42.5 [32]
51.7
35.8 [41]
35.9
48.7 [41]
48.3
36.0 [41]
34.5

dataset
IN-Corruption ↓ [27]
IN-Adversarial [28]
IN-Rendition [26]
IN-Sketch [60]
our supervised training baselines:
IN-Corruption ↓
42.3
IN-Adversarial
29.6
50.9
IN-Rendition
IN-Sketch
37.5
Table 13. Robustness evaluation on ImageNet variants (top-1
accuracy, except for IN-C [27] which evaluates mean corruption
error). We test the same MAE models (Table 3) on different Im-
ageNet validation sets, without any specialized ﬁne-tuning. We
provide system-level comparisons with the previous best results.

45.8
27.2
49.4
35.6

41.3
33.1
50.3
38.0

B. Comparison on Linear Probing Results

In §4.3 we have shown that linear probing accuracy and
ﬁne-tuning accuracy are largely uncorrelated and they have
different focuses about linear separability. We notice that
existing masked image encoding methods are generally less
competitive in linear probing (e.g., than contrastive learn-
ing). For completeness, in Table 12 we compare on linear
probing accuracy with masking-based methods.

Our MAE with ViT-L has 75.8% linear probing accu-
racy. This is substantially better than previous masking-
based methods. On the other hand, it still lags behind con-
trastive methods under this protocol: e.g., MoCo v3 [9] has
77.6% linear probing accuracy for the ViT-L (Figure 9).

C. Robustness Evaluation on ImageNet

In Table 13 we evaluate the robustness of our models on
different variants of ImageNet validation sets. We use the
same models ﬁne-tuned on original ImageNet (Table 3) and
only run inference on the different validation sets, without
any specialized ﬁne-tuning. Table 13 shows that our method
has strong scaling behavior: increasing the model sizes has
signiﬁcant gains. Increasing the image size helps in all sets
but IN-C. Our results outperform the previous best results
(of specialized systems) by large margins.

In contrast, supervised training performs much worse
(Table 13 bottom; models described in A.2). For example,
with ViT-H, our MAE pre-training is 35% better on IN-A
(68.2% vs 33.1%) than the supervised counterpart.

12

Figure 10. Uncurated random samples on ImageNet validation images. For each triplet, we show the masked image (left), our MAE
reconstruction (middle), and the ground-truth (right). The masking ratio is 75%.

13

Figure 11. Uncurated random samples on COCO validation images, using an MAE trained on ImageNet. For each triplet, we show the
masked image (left), our MAE reconstruction (middle), and the ground-truth (right). The masking ratio is 75%.

14

"
6,ViT.pdf,"1
2
0
2

n
u
J

3

]

V
C
.
s
c
[

2
v
9
2
9
1
1
.
0
1
0
2
:
v
i
X
r
a

Published as a conference paper at ICLR 2021

AN IMAGE IS WORTH 16X16 WORDS:
TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE

Alexey Dosovitskiy∗,†, Lucas Beyer∗, Alexander Kolesnikov∗, Dirk Weissenborn∗,
Xiaohua Zhai∗, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer,
Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby∗,†
∗equal technical contribution, †equal advising
Google Research, Brain Team
{adosovitskiy, neilhoulsby}@google.com

ABSTRACT

While the Transformer architecture has become the de-facto standard for natural
language processing tasks, its applications to computer vision remain limited. In
vision, attention is either applied in conjunction with convolutional networks, or
used to replace certain components of convolutional networks while keeping their
overall structure in place. We show that this reliance on CNNs is not necessary
and a pure transformer applied directly to sequences of image patches can perform
very well on image classiﬁcation tasks. When pre-trained on large amounts of
data and transferred to multiple mid-sized or small image recognition benchmarks
(ImageNet, CIFAR-100, VTAB, etc.), Vision Transformer (ViT) attains excellent
results compared to state-of-the-art convolutional networks while requiring sub-
stantially fewer computational resources to train.1

1

INTRODUCTION

Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have become
the model of choice in natural language processing (NLP). The dominant approach is to pre-train on
a large text corpus and then ﬁne-tune on a smaller task-speciﬁc dataset (Devlin et al., 2019). Thanks
to Transformers’ computational efﬁciency and scalability, it has become possible to train models of
unprecedented size, with over 100B parameters (Brown et al., 2020; Lepikhin et al., 2020). With the
models and datasets growing, there is still no sign of saturating performance.

In computer vision, however, convolutional architectures remain dominant (LeCun et al., 1989;
Krizhevsky et al., 2012; He et al., 2016). Inspired by NLP successes, multiple works try combining
CNN-like architectures with self-attention (Wang et al., 2018; Carion et al., 2020), some replacing
the convolutions entirely (Ramachandran et al., 2019; Wang et al., 2020a). The latter models, while
theoretically efﬁcient, have not yet been scaled effectively on modern hardware accelerators due to
the use of specialized attention patterns. Therefore, in large-scale image recognition, classic ResNet-
like architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al.,
2020).

Inspired by the Transformer scaling successes in NLP, we experiment with applying a standard
Transformer directly to images, with the fewest possible modiﬁcations. To do so, we split an image
into patches and provide the sequence of linear embeddings of these patches as an input to a Trans-
former. Image patches are treated the same way as tokens (words) in an NLP application. We train
the model on image classiﬁcation in supervised fashion.

When trained on mid-sized datasets such as ImageNet without strong regularization, these mod-
els yield modest accuracies of a few percentage points below ResNets of comparable size. This
seemingly discouraging outcome may be expected: Transformers lack some of the inductive biases

1Fine-tuning

code

and

pre-trained models

are

available

at

https://github.com/

google-research/vision_transformer

1

 
 
 
 
 
 
Published as a conference paper at ICLR 2021

inherent to CNNs, such as translation equivariance and locality, and therefore do not generalize well
when trained on insufﬁcient amounts of data.

However, the picture changes if the models are trained on larger datasets (14M-300M images). We
ﬁnd that large scale training trumps inductive bias. Our Vision Transformer (ViT) attains excellent
results when pre-trained at sufﬁcient scale and transferred to tasks with fewer datapoints. When
pre-trained on the public ImageNet-21k dataset or the in-house JFT-300M dataset, ViT approaches
or beats state of the art on multiple image recognition benchmarks. In particular, the best model
reaches the accuracy of 88.55% on ImageNet, 90.72% on ImageNet-ReaL, 94.55% on CIFAR-100,
and 77.63% on the VTAB suite of 19 tasks.

2 RELATED WORK

Transformers were proposed by Vaswani et al. (2017) for machine translation, and have since be-
come the state of the art method in many NLP tasks. Large Transformer-based models are often
pre-trained on large corpora and then ﬁne-tuned for the task at hand: BERT (Devlin et al., 2019)
uses a denoising self-supervised pre-training task, while the GPT line of work uses language mod-
eling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020).

Naive application of self-attention to images would require that each pixel attends to every other
pixel. With quadratic cost in the number of pixels, this does not scale to realistic input sizes. Thus,
to apply Transformers in the context of image processing, several approximations have been tried in
the past. Parmar et al. (2018) applied the self-attention only in local neighborhoods for each query
pixel instead of globally. Such local multi-head dot-product self attention blocks can completely
replace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different
line of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-
attention in order to be applicable to images. An alternative way to scale attention is to apply it in
blocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho
et al., 2019; Wang et al., 2020a). Many of these specialized attention architectures demonstrate
promising results on computer vision tasks, but require complex engineering to be implemented
efﬁciently on hardware accelerators.

Most related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2 × 2
from the input image and applies full self-attention on top. This model is very similar to ViT,
but our work goes further to demonstrate that large scale pre-training makes vanilla transformers
competitive with (or even better than) state-of-the-art CNNs. Moreover, Cordonnier et al. (2020)
use a small patch size of 2 × 2 pixels, which makes the model applicable only to small-resolution
images, while we handle medium-resolution images as well.

There has also been a lot of interest in combining convolutional neural networks (CNNs) with forms
of self-attention, e.g. by augmenting feature maps for image classiﬁcation (Bello et al., 2019) or by
further processing the output of a CNN using self-attention, e.g. for object detection (Hu et al., 2018;
Carion et al., 2020), video processing (Wang et al., 2018; Sun et al., 2019), image classiﬁcation (Wu
et al., 2020), unsupervised object discovery (Locatello et al., 2020), or uniﬁed text-vision tasks (Chen
et al., 2020c; Lu et al., 2019; Li et al., 2019).

Another recent related model is image GPT (iGPT) (Chen et al., 2020a), which applies Transformers
to image pixels after reducing image resolution and color space. The model is trained in an unsu-
pervised fashion as a generative model, and the resulting representation can then be ﬁne-tuned or
probed linearly for classiﬁcation performance, achieving a maximal accuracy of 72% on ImageNet.

Our work adds to the increasing collection of papers that explore image recognition at larger scales
than the standard ImageNet dataset. The use of additional data sources allows to achieve state-of-
the-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).
Moreover, Sun et al. (2017) study how CNN performance scales with dataset size, and Kolesnikov
et al. (2020); Djolonga et al. (2020) perform an empirical exploration of CNN transfer learning from
large scale datasets such as ImageNet-21k and JFT-300M. We focus on these two latter datasets as
well, but train Transformers instead of ResNet-based models used in prior works.

2

Published as a conference paper at ICLR 2021

Figure 1: Model overview. We split an image into ﬁxed-size patches, linearly embed each of them,
add position embeddings, and feed the resulting sequence of vectors to a standard Transformer
encoder. In order to perform classiﬁcation, we use the standard approach of adding an extra learnable
“classiﬁcation token” to the sequence. The illustration of the Transformer encoder was inspired by
Vaswani et al. (2017).

3 METHOD

In model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible.
An advantage of this intentionally simple setup is that scalable NLP Transformer architectures – and
their efﬁcient implementations – can be used almost out of the box.

3.1 VISION TRANSFORMER (VIT)

An overview of the model is depicted in Figure 1. The standard Transformer receives as input a 1D
sequence of token embeddings. To handle 2D images, we reshape the image x ∈ RH×W ×C into a
sequence of ﬂattened 2D patches xp ∈ RN ×(P 2·C), where (H, W ) is the resolution of the original
image, C is the number of channels, (P, P ) is the resolution of each image patch, and N = HW/P 2
is the resulting number of patches, which also serves as the effective input sequence length for the
Transformer. The Transformer uses constant latent vector size D through all of its layers, so we
ﬂatten the patches and map to D dimensions with a trainable linear projection (Eq. 1). We refer to
the output of this projection as the patch embeddings.

Similar to BERT’s [class] token, we prepend a learnable embedding to the sequence of embed-
0 = xclass), whose state at the output of the Transformer encoder (z0
ded patches (z0
L) serves as the
image representation y (Eq. 4). Both during pre-training and ﬁne-tuning, a classiﬁcation head is at-
tached to z0
L. The classiﬁcation head is implemented by a MLP with one hidden layer at pre-training
time and by a single linear layer at ﬁne-tuning time.

Position embeddings are added to the patch embeddings to retain positional information. We use
standard learnable 1D position embeddings, since we have not observed signiﬁcant performance
gains from using more advanced 2D-aware position embeddings (Appendix D.4). The resulting
sequence of embedding vectors serves as input to the encoder.

The Transformer encoder (Vaswani et al., 2017) consists of alternating layers of multiheaded self-
attention (MSA, see Appendix A) and MLP blocks (Eq. 2, 3). Layernorm (LN) is applied before
every block, and residual connections after every block (Wang et al., 2019; Baevski & Auli, 2019).

3

Transformer EncoderMLP HeadVision Transformer (ViT)*Linear Projection of Flattened Patches* Extra learnable     [class] embedding1234567890Patch + Position EmbeddingClassBirdBallCar...Embedded PatchesMulti-Head AttentionNormMLPNorm+L x+Transformer EncoderPublished as a conference paper at ICLR 2021

The MLP contains two layers with a GELU non-linearity.

p E] + Epos,

z0 = [xclass; x1
pE; · · · ; xN
pE; x2
z(cid:48)
(cid:96) = MSA(LN(z(cid:96)−1)) + z(cid:96)−1,
z(cid:96) = MLP(LN(z(cid:48)
y = LN(z0
L)

(cid:96))) + z(cid:48)

(cid:96),

E ∈ R(P 2·C)×D, Epos ∈ R(N +1)×D
(cid:96) = 1 . . . L

(cid:96) = 1 . . . L

(1)

(2)

(3)

(4)

Inductive bias. We note that Vision Transformer has much less image-speciﬁc inductive bias than
CNNs. In CNNs, locality, two-dimensional neighborhood structure, and translation equivariance are
baked into each layer throughout the whole model. In ViT, only MLP layers are local and transla-
tionally equivariant, while the self-attention layers are global. The two-dimensional neighborhood
structure is used very sparingly: in the beginning of the model by cutting the image into patches and
at ﬁne-tuning time for adjusting the position embeddings for images of different resolution (as de-
scribed below). Other than that, the position embeddings at initialization time carry no information
about the 2D positions of the patches and all spatial relations between the patches have to be learned
from scratch.

Hybrid Architecture. As an alternative to raw image patches, the input sequence can be formed
from feature maps of a CNN (LeCun et al., 1989).
In this hybrid model, the patch embedding
projection E (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case,
the patches can have spatial size 1x1, which means that the input sequence is obtained by simply
ﬂattening the spatial dimensions of the feature map and projecting to the Transformer dimension.
The classiﬁcation input embedding and position embeddings are added as described above.

3.2 FINE-TUNING AND HIGHER RESOLUTION

Typically, we pre-train ViT on large datasets, and ﬁne-tune to (smaller) downstream tasks. For
this, we remove the pre-trained prediction head and attach a zero-initialized D × K feedforward
layer, where K is the number of downstream classes. It is often beneﬁcial to ﬁne-tune at higher
resolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020). When feeding images
of higher resolution, we keep the patch size the same, which results in a larger effective sequence
length. The Vision Transformer can handle arbitrary sequence lengths (up to memory constraints),
however, the pre-trained position embeddings may no longer be meaningful. We therefore perform
2D interpolation of the pre-trained position embeddings, according to their location in the original
image. Note that this resolution adjustment and patch extraction are the only points at which an
inductive bias about the 2D structure of the images is manually injected into the Vision Transformer.

4 EXPERIMENTS

We evaluate the representation learning capabilities of ResNet, Vision Transformer (ViT), and the
hybrid. To understand the data requirements of each model, we pre-train on datasets of varying size
and evaluate many benchmark tasks. When considering the computational cost of pre-training the
model, ViT performs very favourably, attaining state of the art on most recognition benchmarks at
a lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show
that self-supervised ViT holds promise for the future.

4.1 SETUP

Datasets. To explore model scalability, we use the ILSVRC-2012 ImageNet dataset with 1k classes
and 1.3M images (we refer to it as ImageNet in what follows), its superset ImageNet-21k with
21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and
303M high-resolution images. We de-duplicate the pre-training datasets w.r.t. the test sets of the
downstream tasks following Kolesnikov et al. (2020). We transfer the models trained on these
dataset to several benchmark tasks: ImageNet on the original validation labels and the cleaned-up
ReaL labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al.,
2012), and Oxford Flowers-102 (Nilsback & Zisserman, 2008). For these datasets, pre-processing
follows Kolesnikov et al. (2020).

4

Published as a conference paper at ICLR 2021

Model

Layers Hidden size D MLP size Heads

Params

ViT-Base
ViT-Large
ViT-Huge

12
24
32

768
1024
1280

3072
4096
5120

12
16
16

86M
307M
632M

Table 1: Details of Vision Transformer model variants.

We also evaluate on the 19-task VTAB classiﬁcation suite (Zhai et al., 2019b). VTAB evaluates
low-data transfer to diverse tasks, using 1 000 training examples per task. The tasks are divided into
three groups: Natural – tasks like the above, Pets, CIFAR, etc. Specialized – medical and satellite
imagery, and Structured – tasks that require geometric understanding like localization.

Model Variants. We base ViT conﬁgurations on those used for BERT (Devlin et al., 2019), as
summarized in Table 1. The “Base” and “Large” models are directly adopted from BERT and we
add the larger “Huge” model. In what follows we use brief notation to indicate the model size and
the input patch size: for instance, ViT-L/16 means the “Large” variant with 16 × 16 input patch size.
Note that the Transformer’s sequence length is inversely proportional to the square of the patch size,
thus models with smaller patch size are computationally more expensive.

For the baseline CNNs, we use ResNet (He et al., 2016), but replace the Batch Normalization lay-
ers (Ioffe & Szegedy, 2015) with Group Normalization (Wu & He, 2018), and used standardized
convolutions (Qiao et al., 2019). These modiﬁcations improve transfer (Kolesnikov et al., 2020),
and we denote the modiﬁed model “ResNet (BiT)”. For the hybrids, we feed the intermediate fea-
ture maps into ViT with patch size of one “pixel”. To experiment with different sequence lengths,
we either (i) take the output of stage 4 of a regular ResNet50 or (ii) remove stage 4, place the same
number of layers in stage 3 (keeping the total number of layers), and take the output of this extended
stage 3. Option (ii) results in a 4x longer sequence length, and a more expensive ViT model.

Training & Fine-tuning. We train all models, including ResNets, using Adam (Kingma & Ba,
2015) with β1 = 0.9, β2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which
we found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common
practices, Adam works slightly better than SGD for ResNets in our setting). We use a linear learning
rate warmup and decay, see Appendix B.1 for details. For ﬁne-tuning we use SGD with momentum,
batch size 512, for all models, see Appendix B.1.1. For ImageNet results in Table 2, we ﬁne-tuned at
higher resolution: 512 for ViT-L/16 and 518 for ViT-H/14, and also used Polyak & Juditsky (1992)
averaging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b).

Metrics. We report results on downstream datasets either through few-shot or ﬁne-tuning accuracy.
Fine-tuning accuracies capture the performance of each model after ﬁne-tuning it on the respective
dataset. Few-shot accuracies are obtained by solving a regularized least-squares regression problem
that maps the (frozen) representation of a subset of training images to {−1, 1}K target vectors. This
formulation allows us to recover the exact solution in closed form. Though we mainly focus on
ﬁne-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-ﬂy evaluation
where ﬁne-tuning would be too costly.

4.2 COMPARISON TO STATE OF THE ART

We ﬁrst compare our largest models – ViT-H/14 and ViT-L/16 – to state-of-the-art CNNs from
the literature. The ﬁrst comparison point is Big Transfer (BiT) (Kolesnikov et al., 2020), which
performs supervised transfer learning with large ResNets. The second is Noisy Student (Xie et al.,
2020), which is a large EfﬁcientNet trained using semi-supervised learning on ImageNet and JFT-
300M with the labels removed. Currently, Noisy Student is the state of the art on ImageNet and
BiT-L on the other datasets reported here. All models were trained on TPUv3 hardware, and we
report the number of TPUv3-core-days taken to pre-train each of them, that is, the number of TPU
v3 cores (2 per chip) used for training multiplied by the training time in days.

Table 2 shows the results. The smaller ViT-L/16 model pre-trained on JFT-300M outperforms BiT-L
(which is pre-trained on the same dataset) on all tasks, while requiring substantially less computa-
tional resources to train. The larger model, ViT-H/14, further improves the performance, especially
on the more challenging datasets – ImageNet, CIFAR-100, and the VTAB suite. Interestingly, this

5

Published as a conference paper at ICLR 2021

Ours-JFT
(ViT-H/14)

Ours-JFT
(ViT-L/16)

Ours-I21k
(ViT-L/16)

BiT-L
(ResNet152x4)

ImageNet
ImageNet ReaL
CIFAR-10
CIFAR-100
Oxford-IIIT Pets
Oxford Flowers-102
VTAB (19 tasks)

88.55 ± 0.04
90.72 ± 0.05
99.50 ± 0.06
94.55 ± 0.04
97.56 ± 0.03
99.68 ± 0.02
77.63 ± 0.23

87.76 ± 0.03
90.54 ± 0.03
99.42 ± 0.03
93.90 ± 0.05
97.32 ± 0.11
99.74 ± 0.00
76.28 ± 0.46

85.30 ± 0.02
88.62 ± 0.05
99.15 ± 0.03
93.25 ± 0.05
94.67 ± 0.15
99.61 ± 0.02
72.72 ± 0.21

87.54 ± 0.02
90.54
99.37 ± 0.06
93.51 ± 0.08
96.62 ± 0.23
99.63 ± 0.03
76.29 ± 1.70

Noisy Student
(EfﬁcientNet-L2)
88.4/88.5∗
90.55
−
−
−
−
−

TPUv3-core-days

2.5k

0.68k

0.23k

9.9k

12.3k

Table 2: Comparison with state of the art on popular image classiﬁcation benchmarks. We re-
port mean and standard deviation of the accuracies, averaged over three ﬁne-tuning runs. Vision
Transformer models pre-trained on the JFT-300M dataset outperform ResNet-based baselines on all
datasets, while taking substantially less computational resources to pre-train. ViT pre-trained on the
smaller public ImageNet-21k dataset performs well too. ∗Slightly improved 88.5% result reported
in Touvron et al. (2020).

Figure 2: Breakdown of VTAB performance in Natural, Specialized, and Structured task groups.

model still took substantially less compute to pre-train than prior state of the art. However, we note
that pre-training efﬁciency may be affected not only by the architecture choice, but also other pa-
rameters, such as training schedule, optimizer, weight decay, etc. We provide a controlled study of
performance vs. compute for different architectures in Section 4.4. Finally, the ViT-L/16 model
pre-trained on the public ImageNet-21k dataset performs well on most datasets too, while taking
fewer resources to pre-train: it could be trained using a standard cloud TPUv3 with 8 cores in ap-
proximately 30 days.

Figure 2 decomposes the VTAB tasks into their respective groups, and compares to previous SOTA
methods on this benchmark: BiT, VIVI – a ResNet co-trained on ImageNet and Youtube (Tschannen
et al., 2020), and S4L – supervised plus semi-supervised learning on ImageNet (Zhai et al., 2019a).
ViT-H/14 outperforms BiT-R152x4, and other methods, on the Natural and Structured tasks. On the
Specialized the performance of the top two models is similar.

4.3 PRE-TRAINING DATA REQUIREMENTS

The Vision Transformer performs well when pre-trained on a large JFT-300M dataset. With fewer
inductive biases for vision than ResNets, how crucial is the dataset size? We perform two series of
experiments.

First, we pre-train ViT models on datasets of increasing size: ImageNet, ImageNet-21k, and JFT-
300M. To boost the performance on the smaller datasets, we optimize three basic regularization
parameters – weight decay, dropout, and label smoothing. Figure 3 shows the results after ﬁne-
tuning to ImageNet (results on other datasets are shown in Table 5)2. When pre-trained on the
smallest dataset, ImageNet, ViT-Large models underperform compared to ViT-Base models, despite
(moderate) regularization. With ImageNet-21k pre-training, their performances are similar. Only
with JFT-300M, do we see the full beneﬁt of larger models. Figure 3 also shows the performance

2Note that the ImageNet pre-trained models are also ﬁne-tuned, but again on ImageNet. This is because the

resolution increase during ﬁne-tuning improves the performance.

6

VTAB (19 tasks)65707580Accuracy [%]Natural (7 tasks)708090Specialized (4 tasks)8082858890Structured (8 tasks)506070ViT-H/14BiT-L (R152x4)VIVI-Ex-100% (R50x3)S4L (R50x1)Published as a conference paper at ICLR 2021

Figure 3: Transfer to ImageNet. While
large ViT models perform worse than BiT
ResNets (shaded area) when pre-trained on
small datasets, they shine when pre-trained on
larger datasets. Similarly, larger ViT variants
overtake smaller ones as the dataset grows.

Figure 4: Linear few-shot evaluation on Ima-
geNet versus pre-training size. ResNets per-
form better with smaller pre-training datasets
but plateau sooner than ViT, which performs
better with larger pre-training. ViT-b is ViT-B
with all hidden dimensions halved.

Figure 5: Performance versus pre-training compute for different architectures: Vision Transformers,
ResNets, and hybrids. Vision Transformers generally outperform ResNets with the same compu-
tational budget. Hybrids improve upon pure Transformers for smaller model sizes, but the gap
vanishes for larger models.

region spanned by BiT models of different sizes. The BiT CNNs outperform ViT on ImageNet, but
with the larger datasets, ViT overtakes.

Second, we train our models on random subsets of 9M, 30M, and 90M as well as the full JFT-
300M dataset. We do not perform additional regularization on the smaller subsets and use the same
hyper-parameters for all settings. This way, we assess the intrinsic model properties, and not the
effect of regularization. We do, however, use early-stopping, and report the best validation accuracy
achieved during training. To save compute, we report few-shot linear accuracy instead of full ﬁne-
tuning accuracy. Figure 4 contains the results. Vision Transformers overﬁt more than ResNets with
comparable computational cost on smaller datasets. For example, ViT-B/32 is slightly faster than
ResNet50; it performs much worse on the 9M subset, but better on 90M+ subsets. The same is true
for ResNet152x2 and ViT-L/16. This result reinforces the intuition that the convolutional inductive
bias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from
data is sufﬁcient, even beneﬁcial.

Overall, the few-shot results on ImageNet (Figure 4), as well as the low-data results on VTAB
(Table 2) seem promising for very low-data transfer. Further analysis of few-shot properties of ViT
is an exciting direction of future work.

7

ImageNetImageNet-21kJFT-300MPre-training dataset7075808590ImageNet Top1 Accuracy [%]BiTViT-B/32ViT-B/16ViT-L/32ViT-L/16ViT-H/1410 M30 M100 M300 MNumber of JFT pre-training samples3040506070Linear 5-shot ImageNet Top1 [%]ViT-L/16ViT-L/32ViT-B/32ViT-b/32ResNet50x1 (BiT)ResNet152x2 (BiT)1021039095Transfer accuracy [%]Average-5Transformer (ViT)ResNet (BiT)Hybrid10210375808590ImageNetTransformer (ViT)ResNet (BiT)HybridTotal pre-training compute [exaFLOPs]Published as a conference paper at ICLR 2021

4.4 SCALING STUDY

We perform a controlled scaling study of different models by evaluating transfer performance from
JFT-300M. In this setting data size does not bottleneck the models’ performances, and we assess
performance versus pre-training cost of each model. The model set includes: 7 ResNets, R50x1,
R50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained
for 14 epochs; 6 Vision Transformers, ViT-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus
L/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+ViT-B/32, B/16, L/32, L/16 pre-
trained for 7 epochs, plus R50+ViT-L/16 pre-trained for 14 epochs (for hybrids, the number at the
end of the model name stands not for the patch size, but for the total dowsampling ratio in the ResNet
backbone).

Figure 5 contains the transfer performance versus total pre-training compute (see Appendix D.5
for details on computational costs). Detailed results per model are provided in Table 6 in the Ap-
pendix. A few patterns can be observed. First, Vision Transformers dominate ResNets on the
performance/compute trade-off. ViT uses approximately 2 − 4× less compute to attain the same
performance (average over 5 datasets). Second, hybrids slightly outperform ViT at small compu-
tational budgets, but the difference vanishes for larger models. This result is somewhat surprising,
since one might expect convolutional local feature processing to assist ViT at any size. Third, Vision
Transformers appear not to saturate within the range tried, motivating future scaling efforts.

4.5

INSPECTING VISION TRANSFORMER

To begin to understand how the Vision Transformer processes im-
age data, we analyze its internal representations. The ﬁrst layer of
the Vision Transformer linearly projects the ﬂattened patches into a
lower-dimensional space (Eq. 1). Figure 7 (left) shows the top prin-
cipal components of the the learned embedding ﬁlters. The com-
ponents resemble plausible basis functions for a low-dimensional
representation of the ﬁne structure within each patch.

After the projection, a learned position embedding is added to the
patch representations. Figure 7 (center) shows that the model learns
to encode distance within the image in the similarity of position em-
beddings, i.e. closer patches tend to have more similar position em-
beddings. Further, the row-column structure appears; patches in the
same row/column have similar embeddings. Finally, a sinusoidal
structure is sometimes apparent for larger grids (Appendix D). That
the position embeddings learn to represent 2D image topology ex-
plains why hand-crafted 2D-aware embedding variants do not yield
improvements (Appendix D.4).

Self-attention allows ViT to integrate information across the entire
image even in the lowest layers. We investigate to what degree
the network makes use of this capability. Speciﬁcally, we compute
the average distance in image space across which information is
integrated, based on the attention weights (Figure 7, right). This
“attention distance” is analogous to receptive ﬁeld size in CNNs.
We ﬁnd that some heads attend to most of the image already in the lowest layers, showing that
the ability to integrate information globally is indeed used by the model. Other attention heads
have consistently small attention distances in the low layers. This highly localized attention is
less pronounced in hybrid models that apply a ResNet before the Transformer (Figure 7, right),
suggesting that it may serve a similar function as early convolutional layers in CNNs. Further, the
attention distance increases with network depth. Globally, we ﬁnd that the model attends to image
regions that are semantically relevant for classiﬁcation (Figure 6).

Figure 6: Representative ex-
amples of attention from the
output
token to the input
space. See Appendix D.7 for
details.

4.6 SELF-SUPERVISION

Transformers show impressive performance on NLP tasks. However, much of their success stems
not only from their excellent scalability but also from large scale self-supervised pre-training (Devlin

8

InputAttentionPublished as a conference paper at ICLR 2021

Figure 7: Left: Filters of the initial linear embedding of RGB values of ViT-L/32. Center: Sim-
ilarity of position embeddings of ViT-L/32. Tiles show the cosine similarity between the position
embedding of the patch with the indicated row and column and the position embeddings of all other
patches. Right: Size of attended area by head and network depth. Each dot shows the mean attention
distance across images for one of 16 heads at one layer. See Appendix D.7 for details.

et al., 2019; Radford et al., 2018). We also perform a preliminary exploration on masked patch
prediction for self-supervision, mimicking the masked language modeling task used in BERT. With
self-supervised pre-training, our smaller ViT-B/16 model achieves 79.9% accuracy on ImageNet, a
signiﬁcant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.
Appendix B.1.2 contains further details. We leave exploration of contrastive pre-training (Chen
et al., 2020b; He et al., 2020; Bachman et al., 2019; H´enaff et al., 2020) to future work.

5 CONCLUSION

We have explored the direct application of Transformers to image recognition. Unlike prior works
using self-attention in computer vision, we do not introduce image-speciﬁc inductive biases into
the architecture apart from the initial patch extraction step.
Instead, we interpret an image as a
sequence of patches and process it by a standard Transformer encoder as used in NLP. This simple,
yet scalable, strategy works surprisingly well when coupled with pre-training on large datasets.
Thus, Vision Transformer matches or exceeds the state of the art on many image classiﬁcation
datasets, whilst being relatively cheap to pre-train.

While these initial results are encouraging, many challenges remain. One is to apply ViT to other
computer vision tasks, such as detection and segmentation. Our results, coupled with those in Carion
et al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self-
supervised pre-training methods. Our initial experiments show improvement from self-supervised
pre-training, but there is still large gap between self-supervised and large-scale supervised pre-
training. Finally, further scaling of ViT would likely lead to improved performance.

ACKNOWLEDGEMENTS

The work was performed in Berlin, Z¨urich, and Amsterdam. We thank many colleagues at Google
for their help, in particular Andreas Steiner for crucial help with the infrastructure and the open-
source release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale
training infrastructure; Dmitry Lepikhin, Aravindh Mahendran, Daniel Keysers, Mario Luˇci´c, Noam
Shazeer, Ashish Vaswani, and Colin Raffel for useful discussions.

REFERENCES

Samira Abnar and Willem Zuidema. Quantifying attention ﬂow in transformers. In ACL, 2020.

Philip Bachman, R Devon Hjelm, and William Buchwalter. Learning representations by maximizing

mutual information across views. In NeurIPS, 2019.

9

RGB embedding filters(first 28 principal components)1234567Input patch column1234567Input patch rowPosition embedding similarity11Cosine similarity05101520Network depth (layer)020406080100120Mean attention distance (pixels)ViT-L/16Head 1Head 2Head 3...Published as a conference paper at ICLR 2021

Alexei Baevski and Michael Auli. Adaptive input representations for neural language modeling. In

ICLR, 2019.

I. Bello, B. Zoph, Q. Le, A. Vaswani, and J. Shlens. Attention augmented convolutional networks.

In ICCV, 2019.

Lucas Beyer, Olivier J. H´enaff, Alexander Kolesnikov, Xiaohua Zhai, and A¨aron van den Oord. Are

we done with imagenet? arXiv, 2020.

Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal,
Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are
few-shot learners. arXiv, 2020.

Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and

Sergey Zagoruyko. End-to-end object detection with transformers. In ECCV, 2020.

Mark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun. Generative pretraining from

pixels. In ICML, 2020a.

Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey E. Hinton. A simple framework

for contrastive learning of visual representations. In ICML, 2020b.

Yen-Chun Chen, Linjie Li, Licheng Yu, Ahmed El Kholy, Faisal Ahmed, Zhe Gan, Yu Cheng, and

Jingjing Liu. UNITER: UNiversal Image-TExt Representation Learning. In ECCV, 2020c.

Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse

transformers. arXiv, 2019.

Jean-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi. On the relationship between self-

attention and convolutional layers. In ICLR, 2020.

J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical

image database. In CVPR, 2009.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep

bidirectional transformers for language understanding. In NAACL, 2019.

Josip Djolonga, Jessica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander
Kolesnikov, Joan Puigcerver, Matthias Minderer, Alexander D’Amour, Dan Moldovan, Sylvan
Gelly, Neil Houlsby, Xiaohua Zhai, and Mario Lucic. On robustness and transferability of convo-
lutional neural networks. arXiv, 2020.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-

nition. In CVPR, 2016.

Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick. Momentum contrast for

unsupervised visual representation learning. In CVPR, 2020.

Jonathan Ho, Nal Kalchbrenner, Dirk Weissenborn, and Tim Salimans. Axial attention in multidi-

mensional transformers. arXiv, 2019.

Han Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei. Relation networks for object

detection. In CVPR, 2018.

Han Hu, Zheng Zhang, Zhenda Xie, and Stephen Lin. Local relation networks for image recognition.

In ICCV, 2019.

Zilong Huang, Xinggang Wang, Yunchao Wei, Lichao Huang, Humphrey Shi, Wenyu Liu, and

Thomas S. Huang. Ccnet: Criss-cross attention for semantic segmentation. In ICCV, 2020.

Olivier J. H´enaff, Aravind Srinivas, Jeffrey De Fauw, Ali Razavi, Carl Doersch, S. M. Ali Eslami,
and Aaron van den Oord. Data-efﬁcient image recognition with contrastive predictive coding. In
ICML, 2020.

10

Published as a conference paper at ICLR 2021

Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by

reducing internal covariate shift. 2015.

Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.

Alexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Joan Puigcerver, Jessica Yung, Sylvain Gelly,
and Neil Houlsby. Big transfer (BiT): General visual representation learning. In ECCV, 2020.

Alex Krizhevsky. Learning multiple layers of features from tiny images. Technical report, 2009.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classiﬁcation with deep convo-

lutional neural networks. In NIPS, 2012.

Y. LeCun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, and L. Jackel. Backpropa-

gation applied to handwritten zip code recognition. Neural Computation, 1:541–551, 1989.

Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang,
Maxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional
computation and automatic sharding. arXiv, 2020.

Liunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang. VisualBERT: A

Simple and Performant Baseline for Vision and Language. In Arxiv, 2019.

Francesco Locatello, Dirk Weissenborn, Thomas Unterthiner, Aravindh Mahendran, Georg Heigold,
Jakob Uszkoreit, Alexey Dosovitskiy, and Thomas Kipf. Object-centric learning with slot atten-
tion. arXiv, 2020.

Jiasen Lu, Dhruv Batra, Devi Parikh, and Stefan Lee. ViLBERT: Pretraining Task-Agnostic Visi-

olinguistic Representations for Vision-and-Language Tasks. In NeurIPS. 2019.

Dhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,
Ashwin Bharambe, and Laurens van der Maaten. Exploring the limits of weakly supervised
pretraining. In ECCV, 2018.

M. Nilsback and A. Zisserman. Automated ﬂower classiﬁcation over a large number of classes. In

ICVGIP, 2008.

Omkar M. Parkhi, Andrea Vedaldi, Andrew Zisserman, and C. V. Jawahar. Cats and dogs. In CVPR,

2012.

Niki Parmar, Ashish Vaswani, Jakob Uszkoreit, Lukasz Kaiser, Noam Shazeer, Alexander Ku, and

Dustin Tran. Image transformer. In ICML, 2018.

B. T. Polyak and A. B. Juditsky. Acceleration of stochastic approximation by averaging. SIAM
Journal on Control and Optimization, 30(4):838–855, 1992. doi: 10.1137/0330046. URL
https://doi.org/10.1137/0330046.

Siyuan Qiao, Huiyu Wang, Chenxi Liu, Wei Shen, and Alan Yuille. Weight standardization. arXiv

preprint arXiv:1903.10520, 2019.

Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language under-

standing with unsupervised learning. Technical Report, 2018.

Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language

models are unsupervised multitask learners. Technical Report, 2019.

Prajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.

Stand-alone self-attention in vision models. In NeurIPS, 2019.

Chen Sun, Abhinav Shrivastava, Saurabh Singh, and Abhinav Gupta. Revisiting unreasonable ef-

fectiveness of data in deep learning era. In ICCV, 2017.

Chen Sun, Austin Myers, Carl Vondrick, Kevin Murphy, and Cordelia Schmid. Videobert: A joint

model for video and language representation learning. In ICCV, 2019.

11

Published as a conference paper at ICLR 2021

Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution

discrepancy. In NeurIPS. 2019.

Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution

discrepancy: Fixefﬁcientnet. arXiv preprint arXiv:2003.08237, 2020.

Michael Tschannen, Josip Djolonga, Marvin Ritter, Aravindh Mahendran, Neil Houlsby, Sylvain
Gelly, and Mario Lucic. Self-supervised learning of video-induced visual invariances. In Pro-
ceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), June
2020.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,

Łukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.

Huiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh Chen.

Axial-deeplab: Stand-alone axial-attention for panoptic segmentation. In ECCV, 2020a.

Huiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh
Chen. Axial-deeplab: Stand-alone axial-attention for panoptic segmentation. arXiv preprint
arXiv:2003.07853, 2020b.

Qiang Wang, Bei Li, Tong Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.

Learning deep transformer models for machine translation. In ACL, 2019.

Xiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks. In

CVPR, 2018.

Dirk Weissenborn, Oscar T¨ackstr¨om, and Jakob Uszkoreit. Scaling autoregressive video models. In

ICLR, 2019.

Bichen Wu, Chenfeng Xu, Xiaoliang Dai, Alvin Wan, Peizhao Zhang, Masayoshi Tomizuka, Kurt
Keutzer, and Peter Vajda. Visual transformers: Token-based image representation and processing
for computer vision. arxiv, 2020.

Yuxin Wu and Kaiming He. Group normalization. In ECCV, 2018.

Qizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le. Self-training with noisy student

improves imagenet classiﬁcation. In CVPR, 2020.

Xiaohua Zhai, Avital Oliver, Alexander Kolesnikov, and Lucas Beyer. S4L: Self-Supervised Semi-

Supervised Learning. In ICCV, 2019a.

Xiaohua Zhai, Joan Puigcerver, Alexander Kolesnikov, Pierre Ruyssen, Carlos Riquelme, Mario
Lucic, Josip Djolonga, Andre Susano Pinto, Maxim Neumann, Alexey Dosovitskiy, et al. A
large-scale study of representation learning with the visual task adaptation benchmark. arXiv
preprint arXiv:1910.04867, 2019b.

Hengshuang Zhao, Jiaya Jia, and Vladlen Koltun. Exploring self-attention for image recognition. In

CVPR, 2020.

12

Published as a conference paper at ICLR 2021

Models

Dataset

Epochs

ViT-B/{16,32}
ViT-L/32
ViT-L/16
ViT-H/14
R50x{1,2}
R101x1
R152x{1,2}
R50+ViT-B/{16,32}
R50+ViT-L/32
R50+ViT-L/16
ViT-B/{16,32}
ViT-L/{16,32}
ViT-∗

JFT-300M
JFT-300M
JFT-300M
JFT-300M
JFT-300M
JFT-300M
JFT-300M
JFT-300M
JFT-300M
JFT-300M
ImageNet-21k
ImageNet-21k
ImageNet

7
7
7/14
14
7
7
7
7
7
7/14
90
30/90
300

Base LR LR decay Weight decay Dropout
8 · 10−4
6 · 10−4
4 · 10−4
3 · 10−4
10−3
8 · 10−4
6 · 10−4
8 · 10−4
2 · 10−4
4 · 10−4
10−3
10−3
3 · 10−3

linear
linear
linear
linear
linear
linear
linear
linear
linear
linear
linear
linear
cosine

0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.03
0.03
0.3

0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.1
0.1
0.1

Table 3: Hyperparameters for training. All models are trained with a batch size of 4096 and learn-
ing rate warmup of 10k steps. For ImageNet we found it beneﬁcial to additionally apply gradient
clipping at global norm 1. Training resolution is 224.

APPENDIX

A MULTIHEAD SELF-ATTENTION

Standard qkv self-attention (SA, Vaswani et al. (2017)) is a popular building block for neural archi-
tectures. For each element in an input sequence z ∈ RN ×D, we compute a weighted sum over all
values v in the sequence. The attention weights Aij are based on the pairwise similarity between
two elements of the sequence and their respective query qi and key kj representations.

[q, k, v] = zUqkv

A = softmax

(cid:16)

qk(cid:62)/

(cid:17)

(cid:112)

Dh

SA(z) = Av .

Uqkv ∈ RD×3Dh,
A ∈ RN ×N ,

(5)

(6)

(7)

Multihead self-attention (MSA) is an extension of SA in which we run k self-attention operations,
called “heads”, in parallel, and project their concatenated outputs. To keep compute and number of
parameters constant when changing k, Dh (Eq. 5) is typically set to D/k.

MSA(z) = [SA1(z); SA2(z); · · · ; SAk(z)] Umsa

Umsa ∈ Rk·Dh×D

(8)

B EXPERIMENT DETAILS

B.1 TRAINING

Table 3 summarizes our training setups for our different models. We found strong regularization
to be key when training models from scratch on ImageNet. Dropout, when used, is applied after
every dense layer except for the the qkv-projections and directly after adding positional- to patch
embeddings. Hybrid models are trained with the exact setup as their ViT counterparts. Finally, all
training is done on resolution 224.

B.1.1 FINE-TUNING

We ﬁne-tune all ViT models using SGD with a momentum of 0.9. We run a small grid search over
learning rates, see learning rate ranges in Table 4. To do so, we use small sub-splits from the training
set (10% for Pets and Flowers, 2% for CIFAR, 1% ImageNet) as development set and train on the
remaining data. For ﬁnal results we train on the entire training set and evaluate on the respective
test data. For ﬁne-tuning ResNets and hybrid models we use the exact same setup, with the only
exception of ImageNet where we add another value 0.06 to the learning rate sweep. Additionally,

13

Published as a conference paper at ICLR 2021

Dataset

ImageNet
CIFAR100
CIFAR10
Oxford-IIIT Pets
Oxford Flowers-102
VTAB (19 tasks)

Steps

20 000
10 000
10 000
500
500
2 500

Base LR

{0.003, 0.01, 0.03, 0.06}
{0.001, 0.003, 0.01, 0.03}
{0.001, 0.003, 0.01, 0.03}
{0.001, 0.003, 0.01, 0.03}
{0.001, 0.003, 0.01, 0.03}
0.01

Table 4: Hyperparameters for ﬁne-tuning. All models are ﬁne-tuned with cosine learning rate decay,
a batch size of 512, no weight decay, and grad clipping at global norm 1. If not mentioned otherwise,
ﬁne-tuning resolution is 384.

for ResNets we also run the setup of Kolesnikov et al. (2020) and select the best results across
this run and our sweep. Finally, if not mentioned otherwise, all ﬁne-tuning experiments run at 384
resolution (running ﬁne-tuning at different resolution than training is common practice (Kolesnikov
et al., 2020)).

When transferring ViT models to another dataset, we remove the whole head (two linear layers) and
replace it by a single, zero-initialized linear layer outputting the number of classes required by the
target dataset. We found this to be a little more robust than simply re-initializing the very last layer.

For VTAB we follow the protocol in Kolesnikov et al. (2020), and use the same hyperparameter
setting for all tasks. We use a learning rate of 0.01 and train for 2500 steps (Tab. 4). We chose this
setting by running a small sweep over two learning rates and two schedules, and selecting the setting
with the highest VTAB score on the 200-example validation sets. We follow the pre-processing used
in Kolesnikov et al. (2020), except that we do not use task-speciﬁc input resolutions. Instead we ﬁnd
that Vision Transformer beneﬁts most from a high resolution (384 × 384) for all tasks.

B.1.2 SELF-SUPERVISION

We employ the masked patch prediction objective for preliminary self-supervision experiments. To
do so we corrupt 50% of patch embeddings by either replacing their embeddings with a learnable
[mask] embedding (80%), a random other patch embedding (10%) or just keeping them as is
(10%). This setup is very similar to the one used for language by Devlin et al. (2019). Finally, we
predict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their respective
patch representations.

We trained our self-supervised model for 1M steps (ca. 14 epochs) with batch size 4096 on JFT. We
use Adam, with a base learning rate of 2 · 10−4, warmup of 10k steps and cosine learning rate decay.
As prediction targets for pretraining we tried the following settings: 1) predicting only the mean,
3bit color (i.e., 1 prediction of 512 colors), 2) predicting a 4 × 4 downsized version of the 16 × 16
patch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch
using L2 (i.e., 256 regressions on the 3 RGB channels). Surprisingly, we found that all worked quite
well, though L2 was slightly worse. We report ﬁnal results only for option 1) because it has shown
best few-shot performance. We also experimented with 15% corruption rate as used by Devlin et al.
(2019) but results were also slightly worse on our few-shot metrics.

Lastly, we would like to remark that our instantiation of masked patch prediction doesn’t require
such an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim-
ilar performance gains on ImageNet classiﬁcation. That is, we observed diminishing returns on
downstream performance after 100k pretraining steps, and see similar gains when pretraining on
ImageNet.

C ADDITIONAL RESULTS

We report detailed results corresponding to the ﬁgures presented in the paper. Table 5 corresponds
to Figure 3 from the paper and shows transfer performance of different ViT models pre-trained
on datasets of increasing size: ImageNet, ImageNet-21k, and JFT-300M. Table 6 corresponds to

14

Published as a conference paper at ICLR 2021

ViT-B/16 ViT-B/32 ViT-L/16 ViT-L/32 ViT-H/14

ImageNet

CIFAR-10
CIFAR-100
ImageNet
ImageNet ReaL
Oxford Flowers-102
Oxford-IIIT-Pets

ImageNet-21k CIFAR-10
CIFAR-100
ImageNet
ImageNet ReaL
Oxford Flowers-102
Oxford-IIIT-Pets

JFT-300M

CIFAR-10
CIFAR-100
ImageNet
ImageNet ReaL
Oxford Flowers-102
Oxford-IIIT-Pets

98.13
87.13
77.91
83.57
89.49
93.81

98.95
91.67
83.97
88.35
99.38
94.43

99.00
91.87
84.15
88.85
99.56
95.80

97.77
86.31
73.38
79.56
85.43
92.04

98.79
91.97
81.28
86.63
99.11
93.02

98.61
90.49
80.73
86.27
99.27
93.40

97.86
86.35
76.53
82.19
89.66
93.64

99.16
93.44
85.15
88.40
99.61
94.73

99.38
94.04
87.12
89.99
99.56
97.11

97.94
87.07
71.16
77.83
86.36
91.35

99.13
93.04
80.99
85.65
99.19
93.09

99.19
92.52
84.37
88.28
99.45
95.83

-
-
-
-
-
-

99.27
93.82
85.13
88.70
99.51
94.82

99.50
94.55
88.04
90.33
99.68
97.56

Table 5: Top1 accuracy (in %) of Vision Transformer on various datasets when pre-trained on Im-
ageNet, ImageNet-21k or JFT300M. These values correspond to Figure 3 in the main text. Models
are ﬁne-tuned at 384 resolution. Note that the ImageNet results are computed without additional
techniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2.

Epochs

ImageNet

ImageNet ReaL CIFAR-10 CIFAR-100

Pets

Flowers

exaFLOPs

name

ViT-B/32
ViT-B/16
ViT-L/32
ViT-L/16
ViT-L/16
ViT-H/14

ResNet50x1
ResNet50x2
ResNet101x1
ResNet152x1
ResNet152x2
ResNet152x2
ResNet200x3

R50x1+ViT-B/32
R50x1+ViT-B/16
R50x1+ViT-L/32
R50x1+ViT-L/16
R50x1+ViT-L/16

7
7
7
7
14
14

7
7
7
7
7
14
14

7
7
7
7
14

80.73
84.15
84.37
86.30
87.12
88.08

77.54
82.12
80.67
81.88
84.97
85.56
87.22

84.90
85.58
85.68
86.60
87.12

86.27
88.85
88.28
89.43
89.99
90.36

84.56
87.94
87.07
87.96
89.69
89.89
90.15

89.15
89.65
89.04
89.72
89.76

98.61
99.00
99.19
99.38
99.38
99.50

97.67
98.29
98.48
98.82
99.06
99.24
99.34

99.01
99.14
99.24
99.18
99.31

90.49
91.87
92.52
93.46
94.04
94.71

86.07
89.20
89.17
90.22
92.05
91.92
93.53

92.24
92.63
92.93
93.64
93.89

93.40
95.80
95.83
96.81
97.11
97.11

91.11
93.43
94.08
94.17
95.37
95.75
96.32

95.75
96.65
96.97
97.03
97.36

99.27
99.56
99.45
99.66
99.56
99.71

94.26
97.02
95.95
96.94
98.62
98.75
99.04

99.46
99.40
99.43
99.40
99.11

55
224
196
783
1567
4262

50
199
96
141
563
1126
3306

106
274
246
859
1668

Table 6: Detailed results of model scaling experiments. These correspond to Figure 5 in the main
paper. We show transfer accuracy on several datasets, as well as the pre-training compute (in ex-
aFLOPs).

Figure 5 from the paper and shows the transfer performance of ViT, ResNet, and hybrid models of
varying size, as well as the estimated computational cost of their pre-training.

D ADDITIONAL ANALYSES

D.1 SGD VS. ADAM FOR RESNETS

ResNets are typically trained with SGD and our use of Adam as optimizer is quite unconventional.
Here we show the experiments that motivated this choice. Namely, we compare the ﬁne-tuning

15

Published as a conference paper at ICLR 2021

Dataset

ImageNet
CIFAR10
CIFAR100
Oxford-IIIT Pets
Oxford Flowers-102
Average

ResNet50
Adam SGD

ResNet152x2
Adam SGD

77.54
97.67
86.07
91.11
94.26
89.33

78.24
97.46
85.17
91.00
92.06
88.79

84.97
99.06
92.05
95.37
98.62
94.01

84.37
99.07
91.06
94.79
99.32
93.72

Table 7: Fine-tuning ResNet models pre-trained with Adam and SGD.

Figure 8: Scaling different model dimensions of the Vision Transformer.

performance of two ResNets – 50x1 and 152x2 – pre-trained on JFT with SGD and Adam. For
SGD, we use the hyperparameters recommended by Kolesnikov et al. (2020). Results are presented
in Table 7. Adam pre-training outperforms SGD pre-training on most datasets and on average.
This justiﬁes the choice of Adam as the optimizer used to pre-train ResNets on JFT. Note that the
absolute numbers are lower than those reported by Kolesnikov et al. (2020), since we pre-train only
for 7 epochs, not 30.

D.2 TRANSFORMER SHAPE

We ran ablations on scaling different dimensions of the Transformer architecture to ﬁnd out which
are best suited for scaling to very large models. Figure 8 shows 5-shot performance on ImageNet
for different conﬁgurations. All conﬁgurations are based on a ViT model with 8 layers, D = 1024,
DM LP = 2048 and a patch size of 32, the intersection of all lines. We can see that scaling the
depth results in the biggest improvements which are clearly visible up until 64 layers. However,
diminishing returns are already visible after 16 layers. Interestingly, scaling the width of the net-
work seems to result in the smallest changes. Decreasing the patch size and thus increasing the
effective sequence length shows surprisingly robust improvements without introducing parameters.
These ﬁndings suggest that compute might be a better predictor of performance than the number of
parameters, and that scaling should emphasize depth over width if any. Overall, we ﬁnd that scaling
all dimensions proportionally results in robust improvements.

D.3 HEAD TYPE AND C L A S S TOKEN

In order to stay as close as possible to the original Transformer model, we made use of an additional
[class] token, which is taken as image representation. The output of this token is then trans-
formed into a class prediction via a small multi-layer perceptron (MLP) with tanh as non-linearity
in the single hidden layer.

This design is inherited from the Transformer model for text, and we use it throughout the main
paper. An initial attempt at using only image-patch embeddings, globally average-pooling (GAP)
them, followed by a linear classiﬁer—just like ResNet’s ﬁnal feature map—performed very poorly.
However, we found that this is neither due to the extra token, nor to the GAP operation. Instead,

16

100101Relative Compute0.20.30.40.50.6ImageNet 5shotModelsAllDepthPatch sizeWidth MLPWidth100101Relative Compute0.40.50.60.70.8Average 5shotModelsAllDepthPatch sizeWidth MLPWidthPublished as a conference paper at ICLR 2021

Figure 9: Comparison of class-token and global average pooling classiﬁers. Both work similarly
well, but require different learning-rates.

Pos. Emb.

Default/Stem Every Layer Every Layer-Shared

No Pos. Emb.
1-D Pos. Emb.
2-D Pos. Emb.
Rel. Pos. Emb.

0.61382
0.64206
0.64001
0.64032

N/A
0.63964
0.64046
N/A

N/A
0.64292
0.64022
N/A

Table 8: Results of the ablation study on positional embeddings with ViT-B/16 model evaluated on
ImageNet 5-shot linear.

the difference in performance is fully explained by the requirement for a different learning-rate, see
Figure 9.

D.4 POSITIONAL EMBEDDING

We ran ablations on different ways of encoding spatial information using positional embedding. We
tried the following cases:

• Providing no positional information: Considering the inputs as a bag of patches.

• 1-dimensional positional embedding: Considering the inputs as a sequence of patches in

the raster order (default across all other experiments in this paper).

• 2-dimensional positional embedding: Considering the inputs as a grid of patches in two
dimensions. In this case, two sets of embeddings are learned, each for one of the axes,
X-embedding, and Y -embedding, each with size D/2. Then, based on the coordinate on
the path in the input, we concatenate the X and Y embedding to get the ﬁnal positional
embedding for that patch.

• Relative positional embeddings: Considering the relative distance between patches to en-
code the spatial information as instead of their absolute position. To do so, we use 1-
dimensional Relative Attention, in which we deﬁne the relative distance all possible pairs
of patches. Thus, for every given pair (one as query, and the other as key/value in the at-
tention mechanism), we have an offset pq − pk, where each offset is associated with an
embedding. Then, we simply run extra attention, where we use the original query (the
content of query), but use relative positional embeddings as keys. We then use the log-
its from the relative attention as a bias term and add it to the logits of the main attention
(content-based attention) before applying the softmax.

In addition to different ways of encoding spatial information, we also tried different ways of in-
corporating this information in our model. For the 1-dimensional and 2-dimensional positional
embeddings, we tried three different cases: (1) add positional embeddings to the inputs right after

17

01234567Epochs of training2530354045505560ImageNet linear 5-shot accuracy [%]CLS-Token, lr=8e-4GAP, lr=8e-4GAP, lr=3e-4Published as a conference paper at ICLR 2021

Figure 10: Position embeddings of models trained with different hyperparameters.

the stem of them model and before feeding the inputs to the Transformer encoder (default across
all other experiments in this paper); (2) learn and add positional embeddings to the inputs at the
beginning of each layer; (3) add a learned positional embeddings to the inputs at the beginning of
each layer (shared between layers).

Table 8 summarizes the results from this ablation study on a ViT-B/16 model. As we can see, while
there is a large gap between the performances of the model with no positional embedding and mod-
els with positional embedding, there is little to no difference between different ways of encoding
positional information. We speculate that since our Transformer encoder operates on patch-level
inputs, as opposed to pixel-level, the differences in how to encode spatial information is less impor-
tant. More precisely, in patch-level inputs, the spatial dimensions are much smaller than the original
pixel-level inputs, e.g., 14 × 14 as opposed to 224 × 224, and learning to represent the spatial re-
lations in this resolution is equally easy for these different positional encoding strategies. Even so,
the speciﬁc pattern of position embedding similarity learned by the network depends on the training
hyperparameters (Figure 10).

Figure 11: Size of attended area by head and network depth. Attention distance was computed for
128 example images by averaging the distance between the query pixel and all other pixels, weighted
by the attention weight. Each dot shows the mean attention distance across images for one of 16
heads at one layer. Image width is 224 pixels.

D.5 EMPIRICAL COMPUTATIONAL COSTS

We are also interested in real-world speed of the architectures on our hardware, which is not always
well predicted by theoretical FLOPs due to details like lane widths and cache sizes. For this purpose,

18

1234567891011121314Input patch column1234567891011121314Input patch rowViT-L167 epochs, LR=0.0002, WD=0.0111Cosine similarity1234567891011121314Input patch column1234567891011121314Input patch rowViT-L167 epochs, LR=0.0004, WD=0.111Cosine similarity1234567891011121314Input patch column1234567891011121314Input patch rowViT-L1614 epochs, LR=0.0004, WD=0.111Cosine similarity05101520Network depth (layer)020406080100120Mean attention distance (pixels)ViT-L/16Head 1Head 2Head 3...05101520Network depth (layer)020406080100120R50x1 + ViT-L/16Head 1Head 2Head 3...Published as a conference paper at ICLR 2021

we perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the
difference between inference and backprop speed is a constant model-independent factor.

Figure 12 (left) shows how many images one core can handle per second, across various input sizes.
Every single point refers to the peak performance measured across a wide range of batch-sizes. As
can be seen, the theoretical bi-quadratic scaling of ViT with image size only barely starts happening
for the largest models at the largest resolutions.

Another quantity of interest is the largest batch-size each model can ﬁt onto a core, larger being
better for scaling to large datasets. Figure 12 (right) shows this quantity for the same set of models.
This shows that large ViT models have a clear advantage in terms of memory-efﬁciency over ResNet
models.

Figure 12: Left: Real wall-clock timings of various architectures across input sizes. ViT models
have speed comparable to similar ResNets. Right: Largest per-core batch-size ﬁtting on device with
various architectures across input sizes. ViT models are clearly more memory-efﬁcient.

D.6 AXIAL ATTENTION

Axial Attention (Huang et al., 2020; Ho et al., 2019) is a simple, yet effective technique to run self-
attention on large inputs that are organized as multidimensional tensors. The general idea of axial
attention is to perform multiple attention operations, each along a single axis of the input tensor,
instead of applying 1-dimensional attention to the ﬂattened version of the input. In axial attention,
each attention mixes information along a particular axis, while keeping information along the other
axes independent. Along this line, Wang et al. (2020b) proposed the AxialResNet model in which
all the convolutions with kernel size 3 × 3 in a ResNet50 are replaced by axial self-attention, i.e.
a row and column attention, augmented by relative positional encoding. We have implemented
AxialResNet as a baseline model.3.

Moreover, we have modiﬁed ViT to process inputs in the 2-dimensional shape, instead of a 1-
dimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of
a self-attention followed by an MLP, we have a a row-self-attention plus an MLP followed by a
column-self-attention plus an MLP.

Figure 13, present the performance of Axial ResNet, Axial-ViT-B/32 and Axial-ViT-B/16 on Ima-
geNet 5shot linear, when pretrained on JFT dataset, verses the pretraining compute, both in terms of
number of FLOPs and inference time (example per seconds). As we can see, both Axial-ViT-B/32
and Axial-ViT-B/16 do better than their ViT-B counterpart in terms of performance, but it comes at

3Our implementation is based on the open-sourced PyTorch implementation in https://github.com/
csrhddlam/axial-deeplab. In our experiments, we reproduced the scores reported in (Wang et al.,
2020b) in terms of accuracy, however, our implementation, similar to the open-source implementation, is very
slow on TPUs. Therefore, we were not able to use it for extensive large-scale experiments. These may be
unlocked by a carefully optimized implementation.

19

64128224384512Input size [px]102103104Peak inference speed [img/sec/core]64128224384512Input size [px]102103Largest per-core batch-sizeR50x1R50x2ViT-B/32ViT-L/32ViT-B/16ViT-L/16ViT-H/14R152x4Published as a conference paper at ICLR 2021

Figure 13: Performance of Axial-Attention based models, in terms of top-1 accuracy on ImageNet
5-shot linear, versus their speed in terms of number of FLOPs (left) and inference time (left).

the cost of more compute. This is because in Axial-ViT models, each Transformer block with global
self-attention is replaced by two Axial Transformer blocks, one with row and one with column self-
attention and although the sequence length that self-attention operates on is smaller in axial case,
there is a extra MLP per Axial-ViT block. For the AxialResNet, although it looks reasonable in
terms of accuracy/compute trade-off (Figure 13, left), the naive implementation is extremely slow
on TPUs (Figure 13, right).

D.7 ATTENTION DISTANCE

To understand how ViT uses self-attention to integrate information across the image, we analyzed
the average distance spanned by attention weights at different layers (Figure 11). This “attention
distance” is analogous to receptive ﬁeld size in CNNs. Average attention distance is highly variable
across heads in lower layers, with some heads attending to much of the image, while others attend
to small regions at or near the query location. As depth increases, attention distance increases for all
heads. In the second half of the network, most heads attend widely across tokens.

D.8 ATTENTION MAPS

To compute maps of the attention from the output token to the input space (Figures 6 and 14), we
used Attention Rollout (Abnar & Zuidema, 2020). Brieﬂy, we averaged attention weights of ViT-
L/16 across all heads and then recursively multiplied the weight matrices of all layers. This accounts
for the mixing of attention across tokens through all layers.

D.9 OBJECTNET RESULTS

We also evaluate our ﬂagship ViT-H/14 model on the ObjectNet benchmark following the evaluation
setup in Kolesnikov et al. (2020), resulting in 82.1% top-5 accuracy and 61.7% top-1 accuracy.

D.10 VTAB BREAKDOWN

Table 9 shows the scores attained on each of the VTAB-1k tasks.

20

102Total compute [exaFLOPs]0.5000.5250.5500.5750.6000.6250.650ImageNet 5-shot linear top-1 accuracyAxialViT-B/16AxialViT-B/32ViT-B/16ViT-B/32ResNet50AxialResNet50102103Peak inference speed [img/sec/core]0.5000.5250.5500.5750.6000.6250.650ImageNet 5-shot linear top-1 accuracyAxialViT-B/16AxialViT-B/32ViT-B/16ViT-B/32ResNet50AxialResNet50Published as a conference paper at ICLR 2021

Figure 14: Further example attention maps as in Figure 6 (random selection).

21

123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128Published as a conference paper at ICLR 2021

Table 9: Breakdown of VTAB-1k performance across tasks.

1
0
1
h
c
e
t
l
a
C

0
0
1
-
R
A
F
I
C

2
0
1
s
r
e
w
o
l
F

D
T
D

7
9
3
n
u
S

N
H
V
S

s
t
e
P

n
o
y
l
e
m
a
C

T
A
S
o
r
u
E

5
4
c
s
i
s
e
R

y
h
t
a
p
o
n
i
t
e
R

t
n
u
o
C

-
r
v
e
l
C

t
s
i
D

-
r
v
e
l
C

b
a
L
M
D

c
o
L
-
r
p
S
d

i
r

O

-
r
p
S
d

-

m
i
z
A
B
R
O
N
s

v
e
l
E
-
B
R
O
N
s

t
s
i
D

-
I
T
T
I
K

n
a
e

M

ViT-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6
ViT-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3
ViT-L/16 (I21k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6 85.2 75.3 70.3 56.1 41.9 74.7 64.9 79.9 30.5 41.7 72.7

22

"
